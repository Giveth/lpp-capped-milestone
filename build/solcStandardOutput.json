{
  "contracts": {
    "./contracts/LPPCappedMilestone.sol": {
      "LPPCappedMilestone": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "milestoneManager",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "approveMilestoneCompleted",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledgeManager",
                "type": "uint64"
              },
              {
                "name": "pledgeFrom",
                "type": "uint64"
              },
              {
                "name": "pledgeTo",
                "type": "uint64"
              },
              {
                "name": "context",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "afterTransfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "isCanceled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "reviewTimeoutSeconds",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "rejectCompleteRequest",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledgeManager",
                "type": "uint64"
              },
              {
                "name": "pledgeFrom",
                "type": "uint64"
              },
              {
                "name": "pledgeTo",
                "type": "uint64"
              },
              {
                "name": "context",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "beforeTransfer",
            "outputs": [
              {
                "name": "maxAllowed",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newCampaignReviewer",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "cancelMilestone",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "acceptedToken",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newReviewer",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledgesAmounts",
                "type": "uint256[]"
              }
            ],
            "name": "mWithdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "maxAmount",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "recipient",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "liquidPledging",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newReviewer",
                "type": "address"
              }
            ],
            "name": "requestChangeReviewer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "requestMarkAsComplete",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "received",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "campaignReviewer",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_reviewer",
                "type": "address"
              },
              {
                "name": "_campaignReviewer",
                "type": "address"
              },
              {
                "name": "_recipient",
                "type": "address"
              },
              {
                "name": "_milestoneManager",
                "type": "address"
              },
              {
                "name": "_reviewTimeoutSeconds",
                "type": "uint256"
              },
              {
                "name": "_maxAmount",
                "type": "uint256"
              },
              {
                "name": "_acceptedToken",
                "type": "address"
              },
              {
                "name": "_liquidPledging",
                "type": "address"
              },
              {
                "name": "_idProject",
                "type": "uint64"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptNewRecipient",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newRecipient",
                "type": "address"
              }
            ],
            "name": "requestChangeRecipient",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "idProject",
            "outputs": [
              {
                "name": "",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_newCampaignReviewer",
                "type": "address"
              }
            ],
            "name": "requestChangeCampaignReviewer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "completed",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "reviewer",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "disburse",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "newRecipient",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptNewCampaignReviewerRequest",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "reviewTimeout",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "requestComplete",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [],
            "name": "acceptNewReviewerRequest",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "name": "MilestoneCompleteRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "name": "MilestoneCompleteRequestRejected",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "name": "MilestoneCompleteRequestApproved",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "reviewer",
                "type": "address"
              }
            ],
            "name": "MilestoneChangeReviewerRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "reviewer",
                "type": "address"
              }
            ],
            "name": "MilestoneReviewerChanged",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "reviewer",
                "type": "address"
              }
            ],
            "name": "MilestoneChangeCampaignReviewerRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "reviewer",
                "type": "address"
              }
            ],
            "name": "MilestoneCampaignReviewerChanged",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "MilestoneChangeRecipientRequested",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "recipient",
                "type": "address"
              }
            ],
            "name": "MilestoneRecipientChanged",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "liquidPledging",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": true,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "PaymentCollected",
            "type": "event"
          }
        ],
        "devdoc": {
          "author": "RJ Ewing<perissology@protonmail.com>",
          "methods": {
            "afterTransfer(uint64,uint64,uint64,uint64,address,uint256)": {
              "details": "this is called by liquidPledging after every transfer to and from      a pledgeAdmin that has this contract as its pluginsee ILiquidPledgingPlugin interface for details about context param"
            },
            "allowRecoverability(address)": {
              "details": "By default, AragonApp will allow anyone to call transferToVault     We need to blacklist the `acceptedToken`",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)": {
              "details": "this is called by liquidPledging before every transfer to and from      a pledgeAdmin that has this contract as its pluginsee ILiquidPledgingPlugin interface for details about context param"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            }
          },
          "title": "LPPCappedMilestone"
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526000606e556000607155341561001957600080fd5b611f69806100286000396000f30060606040526004361061020b5763ffffffff60e060020a6000350416630b7d662f81146102105780630bdae8ad1461023f5780630da5e18c146102545780630ed5a93314610295578063178e6079146102bc578063179eec15146102e15780631f61fe7f146102f457806331c51a001461030757806332f0a3b5146103485780633c65aa5f1461035b57806342f7910b1461036e5780634338798314610381578063451c3d80146103a45780634ce3791e146103b757806357adafb6146103ca5780635f48f393146103e857806360b1e057146103fb57806366d003ac1461040e57806374041d1f146104215780637c30d116146104345780637e23c46a146104535780637e7db6e11461046657806380afdea8146104855780638322fff21461049857806383a6deb5146104ab57806385a7b369146104be57806385e5322f146104d15780638b3dd749146105245780638b8a173b146105375780638bea64e11461054a57806394edc359146105695780639b3fdf4c146105995780639c772185146105ac5780639d4941d8146105cb5780639d9a7fe9146105ea578063a1658fad146105fd578063a54044f814610660578063abc6fd0b14610673578063b997946c14610686578063c4d1511814610699578063c4e690df146106ac578063d4aae0c4146106bf578063e4127fe6146106d2578063e9f32b5c146106e5578063f92a79ff146106f8575b600080fd5b341561021b57600080fd5b610223610749565b604051600160a060020a03909116815260200160405180910390f35b341561024a57600080fd5b610252610758565b005b341561025f57600080fd5b61025267ffffffffffffffff60043581169060243581169060443581169060643516600160a060020a036084351660a4356107e0565b34156102a057600080fd5b6102a8610a4f565b604051901515815260200160405180910390f35b34156102c757600080fd5b6102cf610add565b60405190815260200160405180910390f35b34156102ec57600080fd5b6102cf610b01565b34156102ff57600080fd5b610252610b07565b341561031257600080fd5b6102cf67ffffffffffffffff60043581169060243581169060443581169060643516600160a060020a036084351660a435610b90565b341561035357600080fd5b610223610dd4565b341561036657600080fd5b610223610e35565b341561037957600080fd5b610252610e44565b341561038c57600080fd5b61025267ffffffffffffffff60043516602435610f06565b34156103af57600080fd5b610223611005565b34156103c257600080fd5b610223611014565b34156103d557600080fd5b6102526004803560248101910135611023565b34156103f357600080fd5b6102cf611112565b341561040657600080fd5b6102cf611118565b341561041957600080fd5b61022361113c565b341561042c57600080fd5b61022361114b565b341561043f57600080fd5b610252600160a060020a036004351661115a565b341561045e57600080fd5b6102526111f0565b341561047157600080fd5b6102a8600160a060020a03600435166112a9565b341561049057600080fd5b6102cf6112be565b34156104a357600080fd5b6102236112c4565b34156104b657600080fd5b6102cf6112c9565b34156104c957600080fd5b6102236112cf565b34156104dc57600080fd5b610252600160a060020a036004358116906024358116906044358116906064358116906084359060a4359060c43581169060e4351667ffffffffffffffff61010435166112de565b341561052f57600080fd5b6102cf611508565b341561054257600080fd5b61025261150e565b341561055557600080fd5b610252600160a060020a03600435166115ab565b341561057457600080fd5b61057c611641565b60405167ffffffffffffffff909116815260200160405180910390f35b34156105a457600080fd5b6102cf611658565b34156105b757600080fd5b610252600160a060020a036004351661167c565b34156105d657600080fd5b610252600160a060020a0360043516611714565b34156105f557600080fd5b6102a861188b565b341561060857600080fd5b6102a860048035600160a060020a031690602480359190606490604435908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965061189995505050505050565b341561066b57600080fd5b6102236119d7565b341561067e57600080fd5b6102526119e6565b341561069157600080fd5b610223611a78565b34156106a457600080fd5b610252611a87565b34156106b757600080fd5b6102cf611b27565b34156106ca57600080fd5b610223611b2d565b34156106dd57600080fd5b6102a8611b3c565b34156106f057600080fd5b610252611b45565b341561070357600080fd5b61022360046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611be295505050505050565b606b54600160a060020a031681565b60655433600160a060020a0390811691161461077357600080fd5b61077b610a4f565b1561078557600080fd5b606f805461ff00191661010017905560645467ffffffffffffffff60a060020a82041690600160a060020a03167f75718956abfdac55bf1a7d4da565a985ea3a3e27d0fde1f05f1f86501890a75d60405160405180910390a3565b60645460009081908190819033600160a060020a0390811691161461080457600080fd5b606454600160a060020a0316633f657a468a6000604051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b151561086057600080fd5b6102c65a03f1151561087157600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519060200180515050606454959a5050600160a060020a039094169450633f657a4693508c9250600091506040905051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b151561091157600080fd5b6102c65a03f1151561092257600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190505050505050509350506101008767ffffffffffffffff161415610a435767ffffffffffffffff84811690841614610a43575050606e54606f54600091850190610100900460ff16156109aa578491506109ce565b606d548111156109c557606d54606e819055810391506109ce565b606e8054860190555b6000821115610a4357606454600160a060020a031663af9f4563898460405160e060020a63ffffffff851602815267ffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1515610a2e57600080fd5b6102c65a03f11515610a3f57600080fd5b5050505b50505050505050505050565b606454600090600160a060020a03811690632101a6ad9060a060020a900467ffffffffffffffff16836040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610abe57600080fd5b6102c65a03f11515610acf57600080fd5b505050604051805191505090565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60705481565b60655433600160a060020a03908116911614610b2257600080fd5b610b2a610a4f565b15610b3457600080fd5b606f805461ffff19169055600060715560645467ffffffffffffffff60a060020a82041690600160a060020a03167f0bf244ac6dfafdca4b1d15c025afaa5aa1594d22ccf3f73eb543a2c9ad44862660405160405180910390a3565b60645460009081908190819033600160a060020a03908116911614610bb457600080fd5b606c54600160a060020a03878116911614610bd25760009350610dc7565b606454600160a060020a0316633f657a468a6000604051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b1515610c2e57600080fd5b6102c65a03f11515610c3f57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060645493995050600160a060020a039092169450633f657a4693508c9250600091506040905051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b1515610cdf57600080fd5b6102c65a03f11515610cf057600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519060200180519050975050505050509250506101ff8767ffffffffffffffff161415610d6057606f54610100900460ff1615610d5b5760009350610dc7565b610dc3565b6101008767ffffffffffffffff16148015610da557508167ffffffffffffffff168367ffffffffffffffff1614158015610da557506000816002811115610da357fe5b145b15610dc357606f54610100900460ff1615610dc35760009350610dc7565b8493505b5050509695505050505050565b60008054600160a060020a03161515610dec57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610abe57600080fd5b606a54600160a060020a031681565b606b5433600160a060020a0390811691161480610e6f575060655433600160a060020a039081169116145b1515610e7a57600080fd5b610e82610a4f565b15610e8c57600080fd5b606454600160a060020a0381169063796d56549060a060020a900467ffffffffffffffff1660405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401600060405180830381600087803b1515610ef057600080fd5b6102c65a03f11515610f0157600080fd5b505050565b606b5433600160a060020a0390811691161480610f31575060675433600160a060020a039081169116145b1515610f3c57600080fd5b606f54610100900460ff16158015610f5657506000607154115b8015610f63575060715442115b15610f7857606f805461ff0019166101001790555b606f54610100900460ff161515610f8e57600080fd5b606454600160a060020a03166343387983838360405160e060020a63ffffffff851602815267ffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1515610fe557600080fd5b6102c65a03f11515610ff657600080fd5b505050611001611cbe565b5050565b606c54600160a060020a031681565b606654600160a060020a031681565b606b5433600160a060020a039081169116148061104e575060675433600160a060020a039081169116145b151561105957600080fd5b606f54610100900460ff1615801561107357506000607154115b8015611080575060715442115b1561109557606f805461ff0019166101001790555b606f54610100900460ff1615156110ab57600080fd5b606454600160a060020a03166357adafb683836040518363ffffffff1660e060020a0281526004018080602001828103825284848281815260200192506020028082843782019150509350505050600060405180830381600087803b1515610fe557600080fd5b606d5481565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b606754600160a060020a031681565b606454600160a060020a031681565b60655433600160a060020a0390811691161461117557600080fd5b60668054600160a060020a031916600160a060020a03838116919091179182905560645460a060020a810467ffffffffffffffff1692908216917f9cddc4ba5fe0aba11ab77ca878328bc33504470cb50bdde8a611b486ff722e279116604051600160a060020a03909116815260200160405180910390a350565b606b5433600160a060020a039081169116148061121b575060675433600160a060020a039081169116145b151561122657600080fd5b61122e610a4f565b1561123857600080fd5b606f5460ff161561124857600080fd5b606f805460ff1916600117905560645467ffffffffffffffff60a060020a82041690600160a060020a03167f6d025f2abdd7590a11156e53c29dcfaf704d2c60aede1e69f91d78fe0bf5a35060405160405180910390a36070544201607155565b606c54600160a060020a039081169116141590565b60015481565b600081565b606e5481565b606954600160a060020a031681565b6003546000908190156112f057600080fd5b600160a060020a038b16151561130557600080fd5b600160a060020a038a16151561131a57600080fd5b600160a060020a038916151561132f57600080fd5b600160a060020a038816151561134457600080fd5b600160a060020a038416151561135957600080fd5b611361611e6d565b606480547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a060020a67ffffffffffffffff868116820292909217600160a060020a031916600160a060020a03888116919091179384905583169263eba8ba0692919004166000604051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b151561141257600080fd5b6102c65a03f1151561142357600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190509750505050505092505030600160a060020a031682600160a060020a0316148015611493575030600160a060020a031681600160a060020a0316145b151561149e57600080fd5b505050606d92909255606c8054600160a060020a0319908116600160a060020a039384161790915560658054821698831698909817909755606780548816958216959095179094555060705560698054851693831693909317909255606b80549093169116179055565b60035490565b60685433600160a060020a0390811691161461152957600080fd5b6068805460678054600160a060020a03808416600160a060020a03199283161792839055921690925560645460a060020a810467ffffffffffffffff1692908216917f8303ee541dbc7b991b4b38a6dde86e834b9781d0c78790b1e05b1dcc92cce1599116604051600160a060020a03909116815260200160405180910390a3565b60655433600160a060020a039081169116146115c657600080fd5b60688054600160a060020a031916600160a060020a03838116919091179182905560645460a060020a810467ffffffffffffffff1692908216917f635df17e49deab19611dc19ca9f731d926a1a252fab0c19c8f16f7d363b9ba9f9116604051600160a060020a03909116815260200160405180910390a350565b60645460a060020a900467ffffffffffffffff1681565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b60695433600160a060020a0390811691161461169757600080fd5b606a8054600160a060020a031916600160a060020a038381169190911790915560645460665460a060020a820467ffffffffffffffff1692918216917f756e185a0be1e35ffd47e5077086f3bb5d31ca32ec5b74f3d7989e5f75eb36559116604051600160a060020a03909116815260200160405180910390a350565b600080611720836112a9565b151561172b57600080fd5b611733610dd4565b915061173e82611e87565b151561174957600080fd5b600160a060020a038316151561179b5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561179657600080fd5b610f01565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156117f257600080fd5b6102c65a03f1151561180357600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561186b57600080fd5b6102c65a03f1151561187c57600080fd5b50505060405180515050505050565b606f54610100900460ff1681565b60006118a3611f2b565b600080845111156118bc57835160200290508391508082525b600054600160a060020a031615806119cd575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b8381101561196357808201518382015260200161194b565b50505050905090810190601f1680156119905780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156119b157600080fd5b6102c65a03f115156119c257600080fd5b505050604051805190505b9695505050505050565b606554600160a060020a031681565b606b5433600160a060020a0390811691161480611a11575060675433600160a060020a039081169116145b1515611a1c57600080fd5b606f54610100900460ff16158015611a3657506000607154115b8015611a43575060715442115b15611a5857606f805461ff0019166101001790555b606f54610100900460ff161515611a6e57600080fd5b611a76611cbe565b565b606854600160a060020a031681565b606a5433600160a060020a03908116911614611aa257600080fd5b606a805460698054600160a060020a03808416600160a060020a03199283161790925590911690915560645460655460a060020a820467ffffffffffffffff1692918216917f3950cd495133556148302f9c5e59a3ff036cbb3c3488074af7f1a3ef06fecc399116604051600160a060020a03909116815260200160405180910390a3565b60715481565b600054600160a060020a031681565b606f5460ff1681565b60665433600160a060020a03908116911614611b6057600080fd5b6066805460658054600160a060020a03808416600160a060020a03199283161792839055921690925560645460a060020a810467ffffffffffffffff1692908216917f087eed477afd512ad1e8837f68c1fc91b4134c672c170e15d1db4d4155e716b29116604051600160a060020a03909116815260200160405180910390a3565b6000611bec611eb4565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c53578082015183820152602001611c3b565b50505050905090810190601f168015611c805780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515611c9e57600080fd5b6102c65a03f11515611caf57600080fd5b50505060405180519392505050565b606c546000908190600160a060020a03161515611d1357606754600160a060020a033081163193501682156108fc0283604051600060405180830381858888f193505050501515611d0e57600080fd5b611e14565b50606c54600160a060020a0316806370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611d6e57600080fd5b6102c65a03f11515611d7f57600080fd5b5050506040518051606754909350600160a060020a03808416925063a9059cbb91168460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611dee57600080fd5b6102c65a03f11515611dff57600080fd5b505050604051805190501515611e1457600080fd5b600082111561100157606454829067ffffffffffffffff60a060020a82041690600160a060020a03167f32b1d8bd67f570f5d4eb4474796991f4355a82a102bd643743dbca7c35932c5360405160405180910390a45050565b60035415611e7a57600080fd5b611e82611f27565b600355565b600080600160a060020a0383161515611ea35760009150611eae565b823b90506000811191505b50919050565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611c9e57600080fd5b4390565b602060405190810160405260008152905600a165627a7a72305820cca43b65756b8fe65146fb70b5b6cee375f0b68f63d5330f6555a0e3520660220029",
            "sourceMap": "1608:13789:0:-;;;2132:1;2109:24;;2454:1;2426:29;;1608:13789;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061020b5763ffffffff60e060020a6000350416630b7d662f81146102105780630bdae8ad1461023f5780630da5e18c146102545780630ed5a93314610295578063178e6079146102bc578063179eec15146102e15780631f61fe7f146102f457806331c51a001461030757806332f0a3b5146103485780633c65aa5f1461035b57806342f7910b1461036e5780634338798314610381578063451c3d80146103a45780634ce3791e146103b757806357adafb6146103ca5780635f48f393146103e857806360b1e057146103fb57806366d003ac1461040e57806374041d1f146104215780637c30d116146104345780637e23c46a146104535780637e7db6e11461046657806380afdea8146104855780638322fff21461049857806383a6deb5146104ab57806385a7b369146104be57806385e5322f146104d15780638b3dd749146105245780638b8a173b146105375780638bea64e11461054a57806394edc359146105695780639b3fdf4c146105995780639c772185146105ac5780639d4941d8146105cb5780639d9a7fe9146105ea578063a1658fad146105fd578063a54044f814610660578063abc6fd0b14610673578063b997946c14610686578063c4d1511814610699578063c4e690df146106ac578063d4aae0c4146106bf578063e4127fe6146106d2578063e9f32b5c146106e5578063f92a79ff146106f8575b600080fd5b341561021b57600080fd5b610223610749565b604051600160a060020a03909116815260200160405180910390f35b341561024a57600080fd5b610252610758565b005b341561025f57600080fd5b61025267ffffffffffffffff60043581169060243581169060443581169060643516600160a060020a036084351660a4356107e0565b34156102a057600080fd5b6102a8610a4f565b604051901515815260200160405180910390f35b34156102c757600080fd5b6102cf610add565b60405190815260200160405180910390f35b34156102ec57600080fd5b6102cf610b01565b34156102ff57600080fd5b610252610b07565b341561031257600080fd5b6102cf67ffffffffffffffff60043581169060243581169060443581169060643516600160a060020a036084351660a435610b90565b341561035357600080fd5b610223610dd4565b341561036657600080fd5b610223610e35565b341561037957600080fd5b610252610e44565b341561038c57600080fd5b61025267ffffffffffffffff60043516602435610f06565b34156103af57600080fd5b610223611005565b34156103c257600080fd5b610223611014565b34156103d557600080fd5b6102526004803560248101910135611023565b34156103f357600080fd5b6102cf611112565b341561040657600080fd5b6102cf611118565b341561041957600080fd5b61022361113c565b341561042c57600080fd5b61022361114b565b341561043f57600080fd5b610252600160a060020a036004351661115a565b341561045e57600080fd5b6102526111f0565b341561047157600080fd5b6102a8600160a060020a03600435166112a9565b341561049057600080fd5b6102cf6112be565b34156104a357600080fd5b6102236112c4565b34156104b657600080fd5b6102cf6112c9565b34156104c957600080fd5b6102236112cf565b34156104dc57600080fd5b610252600160a060020a036004358116906024358116906044358116906064358116906084359060a4359060c43581169060e4351667ffffffffffffffff61010435166112de565b341561052f57600080fd5b6102cf611508565b341561054257600080fd5b61025261150e565b341561055557600080fd5b610252600160a060020a03600435166115ab565b341561057457600080fd5b61057c611641565b60405167ffffffffffffffff909116815260200160405180910390f35b34156105a457600080fd5b6102cf611658565b34156105b757600080fd5b610252600160a060020a036004351661167c565b34156105d657600080fd5b610252600160a060020a0360043516611714565b34156105f557600080fd5b6102a861188b565b341561060857600080fd5b6102a860048035600160a060020a031690602480359190606490604435908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965061189995505050505050565b341561066b57600080fd5b6102236119d7565b341561067e57600080fd5b6102526119e6565b341561069157600080fd5b610223611a78565b34156106a457600080fd5b610252611a87565b34156106b757600080fd5b6102cf611b27565b34156106ca57600080fd5b610223611b2d565b34156106dd57600080fd5b6102a8611b3c565b34156106f057600080fd5b610252611b45565b341561070357600080fd5b61022360046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650611be295505050505050565b606b54600160a060020a031681565b60655433600160a060020a0390811691161461077357600080fd5b61077b610a4f565b1561078557600080fd5b606f805461ff00191661010017905560645467ffffffffffffffff60a060020a82041690600160a060020a03167f75718956abfdac55bf1a7d4da565a985ea3a3e27d0fde1f05f1f86501890a75d60405160405180910390a3565b60645460009081908190819033600160a060020a0390811691161461080457600080fd5b606454600160a060020a0316633f657a468a6000604051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b151561086057600080fd5b6102c65a03f1151561087157600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519060200180515050606454959a5050600160a060020a039094169450633f657a4693508c9250600091506040905051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b151561091157600080fd5b6102c65a03f1151561092257600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190505050505050509350506101008767ffffffffffffffff161415610a435767ffffffffffffffff84811690841614610a43575050606e54606f54600091850190610100900460ff16156109aa578491506109ce565b606d548111156109c557606d54606e819055810391506109ce565b606e8054860190555b6000821115610a4357606454600160a060020a031663af9f4563898460405160e060020a63ffffffff851602815267ffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1515610a2e57600080fd5b6102c65a03f11515610a3f57600080fd5b5050505b50505050505050505050565b606454600090600160a060020a03811690632101a6ad9060a060020a900467ffffffffffffffff16836040516020015260405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401602060405180830381600087803b1515610abe57600080fd5b6102c65a03f11515610acf57600080fd5b505050604051805191505090565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60705481565b60655433600160a060020a03908116911614610b2257600080fd5b610b2a610a4f565b15610b3457600080fd5b606f805461ffff19169055600060715560645467ffffffffffffffff60a060020a82041690600160a060020a03167f0bf244ac6dfafdca4b1d15c025afaa5aa1594d22ccf3f73eb543a2c9ad44862660405160405180910390a3565b60645460009081908190819033600160a060020a03908116911614610bb457600080fd5b606c54600160a060020a03878116911614610bd25760009350610dc7565b606454600160a060020a0316633f657a468a6000604051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b1515610c2e57600080fd5b6102c65a03f11515610c3f57600080fd5b5050506040518051906020018051906020018051906020018051906020018051906020018051906020018051906020018051505060645493995050600160a060020a039092169450633f657a4693508c9250600091506040905051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b1515610cdf57600080fd5b6102c65a03f11515610cf057600080fd5b50505060405180519060200180519060200180519060200180519060200180519060200180519060200180519060200180519050975050505050509250506101ff8767ffffffffffffffff161415610d6057606f54610100900460ff1615610d5b5760009350610dc7565b610dc3565b6101008767ffffffffffffffff16148015610da557508167ffffffffffffffff168367ffffffffffffffff1614158015610da557506000816002811115610da357fe5b145b15610dc357606f54610100900460ff1615610dc35760009350610dc7565b8493505b5050509695505050505050565b60008054600160a060020a03161515610dec57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610abe57600080fd5b606a54600160a060020a031681565b606b5433600160a060020a0390811691161480610e6f575060655433600160a060020a039081169116145b1515610e7a57600080fd5b610e82610a4f565b15610e8c57600080fd5b606454600160a060020a0381169063796d56549060a060020a900467ffffffffffffffff1660405160e060020a63ffffffff841602815267ffffffffffffffff9091166004820152602401600060405180830381600087803b1515610ef057600080fd5b6102c65a03f11515610f0157600080fd5b505050565b606b5433600160a060020a0390811691161480610f31575060675433600160a060020a039081169116145b1515610f3c57600080fd5b606f54610100900460ff16158015610f5657506000607154115b8015610f63575060715442115b15610f7857606f805461ff0019166101001790555b606f54610100900460ff161515610f8e57600080fd5b606454600160a060020a03166343387983838360405160e060020a63ffffffff851602815267ffffffffffffffff90921660048301526024820152604401600060405180830381600087803b1515610fe557600080fd5b6102c65a03f11515610ff657600080fd5b505050611001611cbe565b5050565b606c54600160a060020a031681565b606654600160a060020a031681565b606b5433600160a060020a039081169116148061104e575060675433600160a060020a039081169116145b151561105957600080fd5b606f54610100900460ff1615801561107357506000607154115b8015611080575060715442115b1561109557606f805461ff0019166101001790555b606f54610100900460ff1615156110ab57600080fd5b606454600160a060020a03166357adafb683836040518363ffffffff1660e060020a0281526004018080602001828103825284848281815260200192506020028082843782019150509350505050600060405180830381600087803b1515610fe557600080fd5b606d5481565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b606754600160a060020a031681565b606454600160a060020a031681565b60655433600160a060020a0390811691161461117557600080fd5b60668054600160a060020a031916600160a060020a03838116919091179182905560645460a060020a810467ffffffffffffffff1692908216917f9cddc4ba5fe0aba11ab77ca878328bc33504470cb50bdde8a611b486ff722e279116604051600160a060020a03909116815260200160405180910390a350565b606b5433600160a060020a039081169116148061121b575060675433600160a060020a039081169116145b151561122657600080fd5b61122e610a4f565b1561123857600080fd5b606f5460ff161561124857600080fd5b606f805460ff1916600117905560645467ffffffffffffffff60a060020a82041690600160a060020a03167f6d025f2abdd7590a11156e53c29dcfaf704d2c60aede1e69f91d78fe0bf5a35060405160405180910390a36070544201607155565b606c54600160a060020a039081169116141590565b60015481565b600081565b606e5481565b606954600160a060020a031681565b6003546000908190156112f057600080fd5b600160a060020a038b16151561130557600080fd5b600160a060020a038a16151561131a57600080fd5b600160a060020a038916151561132f57600080fd5b600160a060020a038816151561134457600080fd5b600160a060020a038416151561135957600080fd5b611361611e6d565b606480547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a060020a67ffffffffffffffff868116820292909217600160a060020a031916600160a060020a03888116919091179384905583169263eba8ba0692919004166000604051610100015260405160e060020a63ffffffff841602815267ffffffffffffffff909116600482015260240161010060405180830381600087803b151561141257600080fd5b6102c65a03f1151561142357600080fd5b505050604051805190602001805190602001805190602001805190602001805190602001805190602001805190602001805190509750505050505092505030600160a060020a031682600160a060020a0316148015611493575030600160a060020a031681600160a060020a0316145b151561149e57600080fd5b505050606d92909255606c8054600160a060020a0319908116600160a060020a039384161790915560658054821698831698909817909755606780548816958216959095179094555060705560698054851693831693909317909255606b80549093169116179055565b60035490565b60685433600160a060020a0390811691161461152957600080fd5b6068805460678054600160a060020a03808416600160a060020a03199283161792839055921690925560645460a060020a810467ffffffffffffffff1692908216917f8303ee541dbc7b991b4b38a6dde86e834b9781d0c78790b1e05b1dcc92cce1599116604051600160a060020a03909116815260200160405180910390a3565b60655433600160a060020a039081169116146115c657600080fd5b60688054600160a060020a031916600160a060020a03838116919091179182905560645460a060020a810467ffffffffffffffff1692908216917f635df17e49deab19611dc19ca9f731d926a1a252fab0c19c8f16f7d363b9ba9f9116604051600160a060020a03909116815260200160405180910390a350565b60645460a060020a900467ffffffffffffffff1681565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b60695433600160a060020a0390811691161461169757600080fd5b606a8054600160a060020a031916600160a060020a038381169190911790915560645460665460a060020a820467ffffffffffffffff1692918216917f756e185a0be1e35ffd47e5077086f3bb5d31ca32ec5b74f3d7989e5f75eb36559116604051600160a060020a03909116815260200160405180910390a350565b600080611720836112a9565b151561172b57600080fd5b611733610dd4565b915061173e82611e87565b151561174957600080fd5b600160a060020a038316151561179b5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561179657600080fd5b610f01565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156117f257600080fd5b6102c65a03f1151561180357600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561186b57600080fd5b6102c65a03f1151561187c57600080fd5b50505060405180515050505050565b606f54610100900460ff1681565b60006118a3611f2b565b600080845111156118bc57835160200290508391508082525b600054600160a060020a031615806119cd575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b8381101561196357808201518382015260200161194b565b50505050905090810190601f1680156119905780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156119b157600080fd5b6102c65a03f115156119c257600080fd5b505050604051805190505b9695505050505050565b606554600160a060020a031681565b606b5433600160a060020a0390811691161480611a11575060675433600160a060020a039081169116145b1515611a1c57600080fd5b606f54610100900460ff16158015611a3657506000607154115b8015611a43575060715442115b15611a5857606f805461ff0019166101001790555b606f54610100900460ff161515611a6e57600080fd5b611a76611cbe565b565b606854600160a060020a031681565b606a5433600160a060020a03908116911614611aa257600080fd5b606a805460698054600160a060020a03808416600160a060020a03199283161790925590911690915560645460655460a060020a820467ffffffffffffffff1692918216917f3950cd495133556148302f9c5e59a3ff036cbb3c3488074af7f1a3ef06fecc399116604051600160a060020a03909116815260200160405180910390a3565b60715481565b600054600160a060020a031681565b606f5460ff1681565b60665433600160a060020a03908116911614611b6057600080fd5b6066805460658054600160a060020a03808416600160a060020a03199283161792839055921690925560645460a060020a810467ffffffffffffffff1692908216917f087eed477afd512ad1e8837f68c1fc91b4134c672c170e15d1db4d4155e716b29116604051600160a060020a03909116815260200160405180910390a3565b6000611bec611eb4565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611c53578082015183820152602001611c3b565b50505050905090810190601f168015611c805780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515611c9e57600080fd5b6102c65a03f11515611caf57600080fd5b50505060405180519392505050565b606c546000908190600160a060020a03161515611d1357606754600160a060020a033081163193501682156108fc0283604051600060405180830381858888f193505050501515611d0e57600080fd5b611e14565b50606c54600160a060020a0316806370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611d6e57600080fd5b6102c65a03f11515611d7f57600080fd5b5050506040518051606754909350600160a060020a03808416925063a9059cbb91168460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611dee57600080fd5b6102c65a03f11515611dff57600080fd5b505050604051805190501515611e1457600080fd5b600082111561100157606454829067ffffffffffffffff60a060020a82041690600160a060020a03167f32b1d8bd67f570f5d4eb4474796991f4355a82a102bd643743dbca7c35932c5360405160405180910390a45050565b60035415611e7a57600080fd5b611e82611f27565b600355565b600080600160a060020a0383161515611ea35760009150611eae565b823b90506000811191505b50919050565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515611c9e57600080fd5b4390565b602060405190810160405260008152905600a165627a7a72305820cca43b65756b8fe65146fb70b5b6cee375f0b68f63d5330f6555a0e3520660220029",
            "sourceMap": "1608:13789:0:-;;;;;;;;;-1:-1:-1;;;1608:13789:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2011:31;;;;;;;;;;;;;;;-1:-1:-1;;;;;2011:31:0;;;;;;;;;;;;;;6799:203;;;;;;;;;;;;;;11911:1353;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11911:1353:0;;;;;;;5484:120;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;2388:32:0;;;;;;;;;;;;6314:269;;;;;;;;;;;;10109:1572;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10109:1572:0;;;;;;;1226:226:8;;;;;;;;;;;;1971:34:0;;;;;;;;;;;;7086:200;;;;;;;;;;;;14007:178;;;;;;;;;;;;;;;;;;2048:28;;;;;;;;;;;;1835:26;;;;;;;;;;;;13540:171;;;;;;;;;;;;;;;;;;;;;2082:21;;;;;;;;;;;;565:118:18;;;;;;;;;;;;1871:24:0;;;;;;;;;;;;1734:36;;;;;;;;;;;;7357:218;;;;;;;;;;-1:-1:-1;;;;;7357:218:0;;;;;5834:344;;;;;;;;;;;;14641:117;;;;;;;;;;-1:-1:-1;;;;;14641:117:0;;;;;113:20:7;;;;;;;;;;;;185:40:11;;;;;;;;;;;;2109:24:0;;;;;;;;;;;;1934:31;;;;;;;;;;;;4232:1171;;;;;;;;;;-1:-1:-1;;;;;4232:1171:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;358:107:13;;;;;;;;;;;;9637:236:0;;;;;;;;;;;;9287:224;;;;;;;;;;-1:-1:-1;;;;;9287:224:0;;;;;1776:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;689:115:18;;;;;;;;;;;;8185:266:0;;;;;;;;;;-1:-1:-1;;;;;8185:266:0;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;2172:21:0;;;;;;;;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;1806:23:0;;;;;;;;;;;;14282:99;;;;;;;;;;;;1901:27;;;;;;;;;;;;8774:283;;;;;;;;;;;;2426:29;;;;;;;;;;;;86:21:7;;;;;;;;;;;;2139:27:0;;;;;;;;;;;;7863:235;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;2011:31:0;;;-1:-1:-1;;;;;2011:31:0;;:::o;6799:203::-;3647:8;;3633:10;-1:-1:-1;;;;;3633:22:0;;;3647:8;;3633:22;3625:31;;;;;;6877:12;:10;:12::i;:::-;6876:13;6868:22;;;;;;6901:9;:16;;-1:-1:-1;;6901:16:0;;;;;6976:9;;;-1:-1:-1;;;6976:9:0;;;;-1:-1:-1;;;;;6960:14:0;6927:59;;;;;;;;;;6799:203::o;11911:1353::-;12143:14;;12177:9;;;;;;;;12121:10;-1:-1:-1;;;;;12121:37:0;;;12143:14;;12121:37;12113:46;;;;;;12201:14;;-1:-1:-1;;;;;12201:14:0;:24;12226:10;12201:14;:36;;;;;;;-1:-1:-1;;;12201:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;12277:14:0;;12170:67;;-1:-1:-1;;;;;;;12277:14:0;;;;-1:-1:-1;12277:24:0;;-1:-1:-1;12302:8:0;;-1:-1:-1;12277:14:0;;-1:-1:-1;12277:34:0;;-1:-1:-1;12277:34:0;;;;;;-1:-1:-1;;;12277:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12247:64;;;;;;;;;1680:3;12326:7;:19;;;12322:936;;;12557:20;;;;;;;;12553:695;;-1:-1:-1;;12653:8:0;;12755:9;;12616:1;;12653:17;;;12755:9;;;;;12751:304;;;12802:6;12788:20;;12751:304;;;12850:9;;12837:10;:22;12833:222;;;12910:9;;12941:8;:20;;;12897:22;;;-1:-1:-1;12833:222:0;;;13019:8;;;:17;;13008:28;;12833:222;13140:1;13126:11;:15;13122:112;;;13165:14;;-1:-1:-1;;;;;13165:14:0;:27;13193:8;13203:11;13165:50;;-1:-1:-1;;;13165:50:0;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13165:50:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;13122:112;11911:1353;;;;;;;;;;:::o;5484:120::-;5554:14;;5531:4;;-1:-1:-1;;;;;5554:14:0;;;:32;;-1:-1:-1;;;5587:9:0;;;;5531:4;5554:43;;;;;;;-1:-1:-1;;;5554:43:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5484:120:0;:::o;448:111:18:-;493:66;448:111;:::o;2388:32:0:-;;;;:::o;6314:269::-;3647:8;;3633:10;-1:-1:-1;;;;;3633:22:0;;;3647:8;;3633:22;3625:31;;;;;;6388:12;:10;:12::i;:::-;6387:13;6379:22;;;;;;6430:9;:17;;-1:-1:-1;;6457:23:0;;;6442:5;6490:13;:17;6566:9;;;-1:-1:-1;;;6566:9:0;;;;-1:-1:-1;;;;;6550:14:0;6517:59;;;;;;;;;;6314:269::o;10109:1572::-;10368:14;;10307:15;;;;;;;;10346:10;-1:-1:-1;;;;;10346:37:0;;;10368:14;;10346:37;10338:46;;;;;;10450:13;;-1:-1:-1;;;;;10441:22:0;;;10450:13;;10441:22;10437:61;;10486:1;10479:8;;;;10437:61;10549:14;;-1:-1:-1;;;;;10549:14:0;:24;10574:10;10549:14;:36;;;;;;;-1:-1:-1;;;10549:36:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;10637:14:0;;10508:77;;-1:-1:-1;;;;;;;10637:14:0;;;;-1:-1:-1;10637:24:0;;-1:-1:-1;10662:8:0;;-1:-1:-1;10637:14:0;;-1:-1:-1;10637:34:0;;-1:-1:-1;10637:34:0;;;;;;-1:-1:-1;;;10637:34:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;10595:76;;;;;;;;;;1724:3;10791:7;:29;;;10787:865;;;10904:9;;;;;;;10900:56;;;10940:1;10933:8;;;;10900:56;10787:865;;;1680:3;11132:7;:19;;;:145;;;;;11191:7;11168:30;;:19;:30;;;;:108;;;;-1:-1:-1;11235:41:0;11218:13;:58;;;;;;;;;11168:108;11128:524;;;11590:9;;;;;;;11586:56;;;11626:1;11619:8;;;;11586:56;11668:6;11661:13;;10109:1572;;;;;;;;;;;;:::o;1226:226:8:-;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;1971:34:0;;;-1:-1:-1;;;;;1971:34:0;;:::o;7086:200::-;7154:16;;7140:10;-1:-1:-1;;;;;7140:30:0;;;7154:16;;7140:30;;:56;;-1:-1:-1;7188:8:0;;7174:10;-1:-1:-1;;;;;7174:22:0;;;7188:8;;7174:22;7140:56;7132:65;;;;;;;;7216:12;:10;:12::i;:::-;7215:13;7207:22;;;;;;7240:14;;-1:-1:-1;;;;;7240:14:0;;;:28;;-1:-1:-1;;;7269:9:0;;;;7240:39;;-1:-1:-1;;;7240:39:0;;;;;;;;;;;;;;;;-1:-1:-1;7240:39:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7086:200::o;14007:178::-;3851:16;;3837:10;-1:-1:-1;;;;;3837:30:0;;;3851:16;;3837:30;;:57;;-1:-1:-1;3885:9:0;;3871:10;-1:-1:-1;;;;;3871:23:0;;;3885:9;;3871:23;3837:57;3829:66;;;;;;;;3968:9;;;;;;;3967:10;:31;;;;;3997:1;3981:13;;:17;3967:31;:54;;;;;4008:13;;4002:3;:19;3967:54;3963:101;;;4037:9;:16;;-1:-1:-1;;4037:16:0;;;;;3963:101;4081:9;;;;;;;4073:18;;;;;;;;14116:14;;-1:-1:-1;;;;;14116:14:0;:23;14140:8;14150:6;14116:41;;-1:-1:-1;;;14116:41:0;;;;;;;;;;;;;;;;;;;;-1:-1:-1;14116:41:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14167:11;:9;:11::i;:::-;14007:178;;:::o;2048:28::-;;;-1:-1:-1;;;;;2048:28:0;;:::o;1835:26::-;;;-1:-1:-1;;;;;1835:26:0;;:::o;13540:171::-;3851:16;;3837:10;-1:-1:-1;;;;;3837:30:0;;;3851:16;;3837:30;;:57;;-1:-1:-1;3885:9:0;;3871:10;-1:-1:-1;;;;;3871:23:0;;;3885:9;;3871:23;3837:57;3829:66;;;;;;;;3968:9;;;;;;;3967:10;:31;;;;;3997:1;3981:13;;:17;3967:31;:54;;;;;4008:13;;4002:3;:19;3967:54;3963:101;;;4037:9;:16;;-1:-1:-1;;4037:16:0;;;;;3963:101;4081:9;;;;;;;4073:18;;;;;;;;13643:14;;-1:-1:-1;;;;;13643:14:0;:24;13668:14;;13643:40;;;;;-1:-1:-1;;;13643:40:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2082:21;;;;:::o;565:118:18:-;617:66;565:118;:::o;1871:24:0:-;;;-1:-1:-1;;;;;1871:24:0;;:::o;1734:36::-;;;-1:-1:-1;;;;;1734:36:0;;:::o;7357:218::-;3647:8;;3633:10;-1:-1:-1;;;;;3633:22:0;;;3647:8;;3633:22;3625:31;;;;;;7442:11;:26;;-1:-1:-1;;;;;;7442:26:0;-1:-1:-1;;;;;7442:26:0;;;;;;;;;;;7528:9;;-1:-1:-1;;;7528:9:0;;;;;7512:14;;;;7479:72;;7539:11;7479:72;;-1:-1:-1;;;;;7479:72:0;;;;;;;;;;;;;;7357:218;:::o;5834:344::-;3851:16;;3837:10;-1:-1:-1;;;;;3837:30:0;;;3851:16;;3837:30;;:57;;-1:-1:-1;3885:9:0;;3871:10;-1:-1:-1;;;;;3871:23:0;;;3885:9;;3871:23;3837:57;3829:66;;;;;;;;5918:12;:10;:12::i;:::-;5917:13;5909:22;;;;;;5950:15;;;;5949:16;5941:25;;;;;;5977:15;:22;;-1:-1:-1;;5977:22:0;5995:4;5977:22;;;6052:9;;;-1:-1:-1;;;6052:9:0;;;;-1:-1:-1;;;;;6036:14:0;6009:53;;;;;;;;;;6147:20;;6141:3;:26;6125:13;:42;5834:344::o;14641:117::-;14738:13;;-1:-1:-1;;;;;14738:13:0;;;14729:22;;;;;14641:117::o;113:20:7:-;;;;:::o;185:40:11:-;223:1;185:40;:::o;2109:24:0:-;;;;:::o;1934:31::-;;;-1:-1:-1;;;;;1934:31:0;;:::o;4232:1171::-;140:19:13;;4966:4:0;;;;140:24:13;132:33;;;;;;-1:-1:-1;;;;;4655:14:0;;;;4647:23;;;;;;-1:-1:-1;;;;;4696:22:0;;;;4688:31;;;;;;-1:-1:-1;;;;;4737:15:0;;;;4729:24;;;;;;-1:-1:-1;;;;;4771:22:0;;;;4763:31;;;;;;-1:-1:-1;;;;;4812:20:0;;;;4804:29;;;;;;4843:13;:11;:13::i;:::-;4867:9;:22;;;;-1:-1:-1;;;4867:22:0;;;;;;;;;;-1:-1:-1;;;;;;4899:48:0;-1:-1:-1;;;;;4899:48:0;;;;;;;;;;;4992:14;;;:29;;5022:9;;;;-1:-1:-1;4992:40:0;;;;;;;-1:-1:-1;;;4992:40:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4958:74;;;;;;;;;;5066:4;-1:-1:-1;;;;;5050:21:0;:4;-1:-1:-1;;;;;5050:21:0;;:48;;;;;5093:4;-1:-1:-1;;;;;5075:23:0;:6;-1:-1:-1;;;;;5075:23:0;;5050:48;5042:57;;;;;;;;-1:-1:-1;;;5110:9:0;:22;;;;5142:13;:30;;-1:-1:-1;;;;;;5142:30:0;;;-1:-1:-1;;;;;5142:30:0;;;;;;;5182:8;:20;;;;;;;;;;;;;;5220:9;:22;;;;;;;;;;;;;;-1:-1:-1;5252:20:0;:44;5306:16;:36;;;;;;;;;;;;;;5352:16;:36;;;;;;;;;;4232:1171::o;358:107:13:-;439:19;;358:107;:::o;9637:236:0:-;9694:12;;9710:10;-1:-1:-1;;;;;9694:26:0;;;:12;;:26;9686:35;;;;;;9744:12;;;9732:9;:24;;-1:-1:-1;;;;;9744:12:0;;;-1:-1:-1;;;;;;9732:24:0;;;;;;;;9766:16;;;;;9835:9;;-1:-1:-1;;;9835:9:0;;;;;9819:14;;;;9793:63;;9846:9;9793:63;;-1:-1:-1;;;;;9793:63:0;;;;;;;;;;;;;;9637:236::o;9287:224::-;3647:8;;3633:10;-1:-1:-1;;;;;3633:22:0;;;3647:8;;3633:22;3625:31;;;;;;9374:12;:28;;-1:-1:-1;;;;;;9374:28:0;-1:-1:-1;;;;;9374:28:0;;;;;;;;;;;9463:9;;-1:-1:-1;;;9463:9:0;;;;;9447:14;;;;9413:74;;9474:12;9413:74;;-1:-1:-1;;;;;9413:74:0;;;;;;;;;;;;;;9287:224;:::o;1776:23::-;;;-1:-1:-1;;;1776:23:0;;;;;:::o;689:115:18:-;738:66;689:115;:::o;8185:266:0:-;3744:16;;3730:10;-1:-1:-1;;;;;3730:30:0;;;3744:16;;3730:30;3722:39;;;;;;8294:19;:42;;-1:-1:-1;;;;;;8294:42:0;-1:-1:-1;;;;;8294:42:0;;;;;;;;;;8404:9;;8415:11;;-1:-1:-1;;;8404:9:0;;;;;8388:14;;;;8347:80;;8415:11;8347:80;;-1:-1:-1;;;;;8347:80:0;;;;;;;;;;;;;;8185:266;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;497:393:15;;;:::o;2172:21:0:-;;;;;;;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;1806:23:0:-;;;-1:-1:-1;;;;;1806:23:0;;:::o;14282:99::-;3851:16;;3837:10;-1:-1:-1;;;;;3837:30:0;;;3851:16;;3837:30;;:57;;-1:-1:-1;3885:9:0;;3871:10;-1:-1:-1;;;;;3871:23:0;;;3885:9;;3871:23;3837:57;3829:66;;;;;;;;3968:9;;;;;;;3967:10;:31;;;;;3997:1;3981:13;;:17;3967:31;:54;;;;;4008:13;;4002:3;:19;3967:54;3963:101;;;4037:9;:16;;-1:-1:-1;;4037:16:0;;;;;3963:101;4081:9;;;;;;;4073:18;;;;;;;;14363:11;:9;:11::i;:::-;14282:99::o;1901:27::-;;;-1:-1:-1;;;;;1901:27:0;;:::o;8774:283::-;8845:19;;8868:10;-1:-1:-1;;;;;8845:33:0;;;:19;;:33;8837:42;;;;;;8909:19;;;8890:16;:38;;-1:-1:-1;;;;;8909:19:0;;;-1:-1:-1;;;;;;8890:38:0;;;;;;;8938:23;;;;;;9021:9;;9032:8;;-1:-1:-1;;;9021:9:0;;;;;9005:14;;;;8972:69;;9032:8;8972:69;;-1:-1:-1;;;;;8972:69:0;;;;;;;;;;;;;;8774:283::o;2426:29::-;;;;:::o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;2139:27:0:-;;;;;;:::o;7863:235::-;7926:11;;7941:10;-1:-1:-1;;;;;7926:25:0;;;:11;;:25;7918:34;;;;;;7974:11;;;7963:8;:22;;-1:-1:-1;;;;;7974:11:0;;;-1:-1:-1;;;;;;7963:22:0;;;;;;;;7995:15;;;;;8062:9;;-1:-1:-1;;;8062:9:0;;;;;8046:14;;;;8021:61;;8073:8;8021:61;;-1:-1:-1;;;;;8021:61:0;;;;;;;;;;;;;;7863:235::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;14867:528:0:-;14969:13;;14907:11;;;;-1:-1:-1;;;;;14969:13:0;:20;14965:310;;;15048:9;;-1:-1:-1;;;;;15014:4:0;:12;;;;-1:-1:-1;15048:9:0;:22;;;;15014:12;15048:22;;;;;;;;;;;;;;;;;;15040:31;;;;;;;;14965:310;;;-1:-1:-1;15131:13:0;;-1:-1:-1;;;;;15131:13:0;;15169:24;15194:4;15131:13;15169:30;;;;;;;-1:-1:-1;;;15169:30:0;;;;;;-1:-1:-1;;;;;15169:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15245:9;;15169:30;;-1:-1:-1;;;;;;15221:23:0;;;;-1:-1:-1;15221:23:0;;15245:9;15169:30;15245:9;15221:42;;;;;;;-1:-1:-1;;;15221:42:0;;;;;;-1:-1:-1;;;;;15221:42:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15213:51;;;;;;;;15298:1;15289:6;:10;15285:104;;;15348:9;;15359:6;;15348:9;-1:-1:-1;;;15348:9:0;;;;-1:-1:-1;;;;;15332:14:0;15315:51;;;;;;;;;;14867:528;;:::o;576:96:13:-;140:19;;:24;132:33;;;;;;649:16;:14;:16::i;:::-;627:19;:38;576:96::o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;856:94:13;931:12;856:94;:::o;1608:13789:0:-;;;;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1608200",
              "executionCost": "11694",
              "totalCost": "1619894"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "324",
              "ETH()": "820",
              "EVMSCRIPT_REGISTRY_APP()": "918",
              "EVMSCRIPT_REGISTRY_APP_ID()": "588",
              "acceptNewCampaignReviewerRequest()": "44342",
              "acceptNewRecipient()": "43897",
              "acceptNewReviewerRequest()": "44227",
              "acceptedToken()": "853",
              "afterTransfer(uint64,uint64,uint64,uint64,address,uint256)": "infinite",
              "allowRecoverability(address)": "1078",
              "appId()": "920",
              "approveMilestoneCompleted()": "infinite",
              "beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)": "infinite",
              "campaignReviewer()": "1139",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "cancelMilestone()": "infinite",
              "completed()": "1207",
              "disburse()": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "1030",
              "getRecoveryVault()": "infinite",
              "idProject()": "1185",
              "initialize(address,address,address,address,uint256,uint256,address,address,uint64)": "infinite",
              "isCanceled()": "infinite",
              "kernel()": "1491",
              "liquidPledging()": "985",
              "mWithdraw(uint256[])": "infinite",
              "maxAmount()": "766",
              "milestoneManager()": "589",
              "newCampaignReviewer()": "787",
              "newRecipient()": "1425",
              "newReviewer()": "875",
              "received()": "964",
              "recipient()": "963",
              "rejectCompleteRequest()": "infinite",
              "requestChangeCampaignReviewer(address)": "24053",
              "requestChangeRecipient(address)": "23787",
              "requestChangeReviewer(address)": "23567",
              "requestComplete()": "1372",
              "requestMarkAsComplete()": "infinite",
              "reviewTimeout()": "1316",
              "reviewTimeoutSeconds()": "546",
              "reviewer()": "1381",
              "transferToVault(address)": "infinite",
              "withdraw(uint64,uint256)": "infinite"
            },
            "internal": {
              "_disburse()": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "acceptNewCampaignReviewerRequest()": "c4d15118",
            "acceptNewRecipient()": "8b8a173b",
            "acceptNewReviewerRequest()": "e9f32b5c",
            "acceptedToken()": "451c3d80",
            "afterTransfer(uint64,uint64,uint64,uint64,address,uint256)": "0da5e18c",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "approveMilestoneCompleted()": "0bdae8ad",
            "beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)": "31c51a00",
            "campaignReviewer()": "85a7b369",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "cancelMilestone()": "42f7910b",
            "completed()": "9d9a7fe9",
            "disburse()": "abc6fd0b",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getRecoveryVault()": "32f0a3b5",
            "idProject()": "94edc359",
            "initialize(address,address,address,address,uint256,uint256,address,address,uint64)": "85e5322f",
            "isCanceled()": "0ed5a933",
            "kernel()": "d4aae0c4",
            "liquidPledging()": "74041d1f",
            "mWithdraw(uint256[])": "57adafb6",
            "maxAmount()": "5f48f393",
            "milestoneManager()": "0b7d662f",
            "newCampaignReviewer()": "3c65aa5f",
            "newRecipient()": "b997946c",
            "newReviewer()": "4ce3791e",
            "received()": "83a6deb5",
            "recipient()": "66d003ac",
            "rejectCompleteRequest()": "1f61fe7f",
            "requestChangeCampaignReviewer(address)": "9c772185",
            "requestChangeRecipient(address)": "8bea64e1",
            "requestChangeReviewer(address)": "7c30d116",
            "requestComplete()": "e4127fe6",
            "requestMarkAsComplete()": "7e23c46a",
            "reviewTimeout()": "c4e690df",
            "reviewTimeoutSeconds()": "179eec15",
            "reviewer()": "a54044f8",
            "transferToVault(address)": "9d4941d8",
            "withdraw(uint64,uint256)": "43387983"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"milestoneManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"approveMilestoneCompleted\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledgeManager\",\"type\":\"uint64\"},{\"name\":\"pledgeFrom\",\"type\":\"uint64\"},{\"name\":\"pledgeTo\",\"type\":\"uint64\"},{\"name\":\"context\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"afterTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewTimeoutSeconds\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"rejectCompleteRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledgeManager\",\"type\":\"uint64\"},{\"name\":\"pledgeFrom\",\"type\":\"uint64\"},{\"name\":\"pledgeTo\",\"type\":\"uint64\"},{\"name\":\"context\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"beforeTransfer\",\"outputs\":[{\"name\":\"maxAllowed\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newCampaignReviewer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"cancelMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acceptedToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newReviewer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledgesAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"liquidPledging\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newReviewer\",\"type\":\"address\"}],\"name\":\"requestChangeReviewer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"requestMarkAsComplete\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"received\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"campaignReviewer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_reviewer\",\"type\":\"address\"},{\"name\":\"_campaignReviewer\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_milestoneManager\",\"type\":\"address\"},{\"name\":\"_reviewTimeoutSeconds\",\"type\":\"uint256\"},{\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"name\":\"_liquidPledging\",\"type\":\"address\"},{\"name\":\"_idProject\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newRecipient\",\"type\":\"address\"}],\"name\":\"requestChangeRecipient\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"idProject\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newCampaignReviewer\",\"type\":\"address\"}],\"name\":\"requestChangeCampaignReviewer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"completed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewer\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"disburse\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"newRecipient\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewCampaignReviewerRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"reviewTimeout\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requestComplete\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"acceptNewReviewerRequest\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"}],\"name\":\"MilestoneCompleteRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"}],\"name\":\"MilestoneCompleteRequestRejected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"}],\"name\":\"MilestoneCompleteRequestApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"reviewer\",\"type\":\"address\"}],\"name\":\"MilestoneChangeReviewerRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"reviewer\",\"type\":\"address\"}],\"name\":\"MilestoneReviewerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"reviewer\",\"type\":\"address\"}],\"name\":\"MilestoneChangeCampaignReviewerRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"reviewer\",\"type\":\"address\"}],\"name\":\"MilestoneCampaignReviewerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MilestoneChangeRecipientRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"MilestoneRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"liquidPledging\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":true,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"PaymentCollected\",\"type\":\"event\"}],\"devdoc\":{\"author\":\"RJ Ewing<perissology@protonmail.com>\",\"methods\":{\"afterTransfer(uint64,uint64,uint64,uint64,address,uint256)\":{\"details\":\"this is called by liquidPledging after every transfer to and from      a pledgeAdmin that has this contract as its pluginsee ILiquidPledgingPlugin interface for details about context param\"},\"allowRecoverability(address)\":{\"details\":\"By default, AragonApp will allow anyone to call transferToVault     We need to blacklist the `acceptedToken`\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)\":{\"details\":\"this is called by liquidPledging before every transfer to and from      a pledgeAdmin that has this contract as its pluginsee ILiquidPledgingPlugin interface for details about context param\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}},\"title\":\"LPPCappedMilestone\"},\"userdoc\":{\"methods\":{\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/LPPCappedMilestone.sol\":\"LPPCappedMilestone\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/LPPCappedMilestone.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n/*\\n    Copyright 2017\\n    RJ Ewing <perissology@protonmail.com>\\n    S van Heummen <satya.vh@gmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"giveth-liquidpledging/contracts/LiquidPledging.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/kernel/IKernel.sol\\\";\\n\\n\\n/// @title LPPCappedMilestone\\n/// @author RJ Ewing<perissology@protonmail.com>\\n/// @notice The LPPCappedMilestone contract is a plugin contract for liquidPledging,\\n///  extending the functionality of a liquidPledging project. This contract\\n///  prevents withdrawals from any pledges this contract is the owner of.\\n///  This contract has 4 roles. The admin, a reviewer, and a recipient role. \\n///\\n///  1. The admin can cancel the milestone, update the conditions the milestone accepts transfers\\n///  and send a tx as the milestone. \\n///  2. The reviewer can cancel the milestone. \\n///  3. The recipient role will receive the pledge's owned by this milestone. \\n\\ncontract LPPCappedMilestone is AragonApp {\\n    uint constant TO_OWNER = 256;\\n    uint constant TO_INTENDEDPROJECT = 511;\\n\\n    LiquidPledging public liquidPledging;\\n    uint64 public idProject;\\n\\n    address public reviewer;\\n    address public newReviewer;    \\n    address public recipient;\\n    address public newRecipient;\\n    address public campaignReviewer;\\n    address public newCampaignReviewer;\\n    address public milestoneManager;\\n    address public acceptedToken;\\n    uint public maxAmount;\\n    uint public received = 0;\\n    bool public requestComplete;\\n    bool public completed;\\n\\n    // @notice After marking complete, and after this timeout, the recipient can withdraw the money\\n    // even if the milestone was not marked as complete.\\n    // Must be set in seconds.\\n    uint public reviewTimeoutSeconds;\\n    uint public reviewTimeout = 0;\\n\\n    event MilestoneCompleteRequested(address indexed liquidPledging, uint64 indexed idProject);\\n    event MilestoneCompleteRequestRejected(address indexed liquidPledging, uint64 indexed idProject);\\n    event MilestoneCompleteRequestApproved(address indexed liquidPledging, uint64 indexed idProject);\\n\\n    event MilestoneChangeReviewerRequested(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n    event MilestoneReviewerChanged(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n\\n    event MilestoneChangeCampaignReviewerRequested(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n    event MilestoneCampaignReviewerChanged(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n\\n    event MilestoneChangeRecipientRequested(address indexed liquidPledging, uint64 indexed idProject, address recipient);\\n    event MilestoneRecipientChanged(address indexed liquidPledging, uint64 indexed idProject, address recipient);\\n\\n    event PaymentCollected(address indexed liquidPledging, uint64 indexed idProject, uint indexed amount);\\n\\n\\n    modifier onlyReviewer() {\\n        require(msg.sender == reviewer);\\n        _;\\n    }\\n\\n    modifier onlyCampaignReviewer() {\\n        require(msg.sender == campaignReviewer);\\n        _;\\n    }\\n\\n    modifier onlyManagerOrRecipient() {\\n        require(msg.sender == milestoneManager || msg.sender == recipient);\\n        _;\\n    }   \\n\\n    modifier checkReviewTimeout() { \\n        if (!completed && reviewTimeout > 0 && now > reviewTimeout) {\\n            completed = true;\\n        }\\n        require(completed);\\n        _; \\n    }\\n    \\n    //== constructor\\n\\n    // @notice we pass in the idProject here because it was throwing stack too deep error\\n    function initialize(\\n        address _reviewer,\\n        address _campaignReviewer,\\n        address _recipient,\\n        address _milestoneManager,\\n        uint _reviewTimeoutSeconds,\\n        uint _maxAmount,\\n        address _acceptedToken,\\n        // if these params are at the beginning, we get a stack too deep error\\n        address _liquidPledging,\\n        uint64 _idProject\\n    ) onlyInit external\\n    {\\n        require(_reviewer != 0);        \\n        require(_campaignReviewer != 0);\\n        require(_recipient != 0);\\n        require(_milestoneManager != 0);\\n        require(_liquidPledging != 0);\\n        initialized();\\n\\n        idProject = _idProject;\\n        liquidPledging = LiquidPledging(_liquidPledging);\\n\\n        var ( , addr, , , , , , plugin) = liquidPledging.getPledgeAdmin(idProject);\\n        require(addr == address(this) && plugin == address(this));\\n\\n        maxAmount = _maxAmount;\\n        acceptedToken = _acceptedToken;\\n        reviewer = _reviewer;        \\n        recipient = _recipient;\\n        reviewTimeoutSeconds = _reviewTimeoutSeconds;\\n        campaignReviewer = _campaignReviewer;\\n        milestoneManager = _milestoneManager;        \\n    }\\n\\n    //== external\\n\\n    // don't allow cancel if the milestone is completed\\n    function isCanceled() public constant returns (bool) {\\n        return liquidPledging.isProjectCanceled(idProject);\\n    }\\n\\n    // @notice Milestone manager can request to mark a milestone as completed\\n    // When he does, the timeout is initiated. So if the reviewer doesn't\\n    // handle the request in time, the recipient can withdraw the funds\\n    function requestMarkAsComplete() onlyManagerOrRecipient external {\\n        require(!isCanceled());\\n        require(!requestComplete);\\n\\n        requestComplete = true;\\n        MilestoneCompleteRequested(liquidPledging, idProject);        \\n        \\n        // start the review timeout\\n        reviewTimeout = now + reviewTimeoutSeconds;    \\n    }\\n\\n    // @notice The reviewer can reject a completion request from the milestone manager\\n    // When he does, the timeout is reset.\\n    function rejectCompleteRequest() onlyReviewer external {\\n        require(!isCanceled());\\n\\n        // reset \\n        completed = false;\\n        requestComplete = false;\\n        reviewTimeout = 0;\\n        MilestoneCompleteRequestRejected(liquidPledging, idProject);\\n    }   \\n\\n    // @notice The reviewer can approve a completion request from the milestone manager\\n    // When he does, the milestone's state is set to completed and the funds can be\\n    // withdrawn by the recipient.\\n    function approveMilestoneCompleted() onlyReviewer external {\\n        require(!isCanceled());\\n\\n        completed = true;\\n        MilestoneCompleteRequestApproved(liquidPledging, idProject);         \\n    }\\n\\n    // @notice The reviewer and the milestone manager can cancel a milestone.\\n    function cancelMilestone() external {\\n        require(msg.sender == milestoneManager || msg.sender == reviewer);\\n        require(!isCanceled());\\n\\n        liquidPledging.cancelProject(idProject);\\n    }    \\n\\n    // @notice The reviewer can request changing a reviewer.\\n    function requestChangeReviewer(address _newReviewer) onlyReviewer external {\\n        newReviewer = _newReviewer;\\n\\n        MilestoneChangeReviewerRequested(liquidPledging, idProject, newReviewer);                 \\n    }    \\n\\n    // @notice The new reviewer needs to accept the request from the old\\n    // reviewer to become the new reviewer.\\n    // @dev There's no point in adding a rejectNewReviewer because as long as\\n    // the new reviewer doesn't accept, the old reviewer remains the reviewer.    \\n    function acceptNewReviewerRequest() external {\\n        require(newReviewer == msg.sender);\\n\\n        reviewer = newReviewer;\\n        newReviewer = 0;\\n\\n        MilestoneReviewerChanged(liquidPledging, idProject, reviewer);         \\n    }  \\n\\n    // @notice The campaign reviewer can request changing a campaign reviewer.\\n    function requestChangeCampaignReviewer(address _newCampaignReviewer) onlyCampaignReviewer external {\\n        newCampaignReviewer = _newCampaignReviewer;\\n\\n        MilestoneChangeCampaignReviewerRequested(liquidPledging, idProject, newReviewer);                 \\n    }    \\n\\n    // @notice The new campaign reviewer needs to accept the request from the old\\n    // campaign reviewer to become the new campaign reviewer.\\n    // @dev There's no point in adding a rejectNewCampaignReviewer because as long as\\n    // the new reviewer doesn't accept, the old reviewer remains the reviewer.    \\n    function acceptNewCampaignReviewerRequest() external {\\n        require(newCampaignReviewer == msg.sender);\\n\\n        campaignReviewer = newCampaignReviewer;\\n        newCampaignReviewer = 0;\\n\\n        MilestoneCampaignReviewerChanged(liquidPledging, idProject, reviewer);         \\n    }  \\n\\n    // @notice The recipient can request changing recipient.\\n    // @dev There's no point in adding a rejectNewRecipient because as long as\\n    // the new recipient doesn't accept, the old recipient remains the recipient.\\n    function requestChangeRecipient(address _newRecipient) onlyReviewer external {\\n        newRecipient = _newRecipient;\\n\\n        MilestoneChangeRecipientRequested(liquidPledging, idProject, newRecipient);                 \\n    }\\n\\n    // @notice The new recipient needs to accept the request from the old\\n    // recipient to become the new recipient.\\n    function acceptNewRecipient() external {\\n        require(newRecipient == msg.sender);\\n\\n        recipient = newRecipient;\\n        newRecipient = 0;\\n\\n        MilestoneRecipientChanged(liquidPledging, idProject, recipient);         \\n\\n    }     \\n\\n    /// @dev this is called by liquidPledging before every transfer to and from\\n    ///      a pledgeAdmin that has this contract as its plugin\\n    /// @dev see ILiquidPledgingPlugin interface for details about context param\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) external returns (uint maxAllowed)\\n    {\\n        require(msg.sender == address(liquidPledging));\\n        \\n        // only accept that token\\n        if (token != acceptedToken) {\\n            return 0;\\n        }\\n\\n        var (, , , fromIntendedProject, , , ,) = liquidPledging.getPledge(pledgeFrom);\\n        var (, toOwner, , , , , ,toPledgeState) = liquidPledging.getPledge(pledgeTo);\\n\\n        // if m is the intendedProject, make sure m is still accepting funds (not completed or canceled)\\n        if (context == TO_INTENDEDPROJECT) {\\n            // don't need to check if canceled b/c lp does this\\n            if (completed) {\\n                return 0;\\n            }\\n        // if the pledge is being transferred to m and is in the Pledged state, make\\n        // sure m is still accepting funds (not completed or canceled)\\n        } else if (context == TO_OWNER &&\\n            (fromIntendedProject != toOwner &&\\n                toPledgeState == LiquidPledgingStorage.PledgeState.Pledged)) {\\n            //TODO what if milestone isn't initialized? should we throw?\\n            // this can happen if someone adds a project through lp with this contracts address as the plugin\\n            // we can require(maxAmount > 0);\\n            // don't need to check if canceled b/c lp does this\\n            if (completed) {\\n                return 0;\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    /// @dev this is called by liquidPledging after every transfer to and from\\n    ///      a pledgeAdmin that has this contract as its plugin\\n    /// @dev see ILiquidPledgingPlugin interface for details about context param\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) external\\n    {\\n        require(msg.sender == address(liquidPledging));\\n\\n        var (, fromOwner, , , , , ,) = liquidPledging.getPledge(pledgeFrom);\\n        var (, toOwner, , , , , , ) = liquidPledging.getPledge(pledgeTo);\\n\\n        if (context == TO_OWNER) {\\n            // If fromOwner != toOwner, the means that a pledge is being committed to\\n            // milestone. We will accept any amount up to m.maxAmount, and return\\n            // the rest\\n            if (fromOwner != toOwner) {\\n                uint returnFunds = 0;\\n                uint newBalance = received + amount;\\n\\n                // milestone is no longer accepting new funds\\n                if (completed) {\\n                    returnFunds = amount;\\n                } else if (newBalance > maxAmount) {\\n                    returnFunds = newBalance - maxAmount;\\n                    received = maxAmount;\\n                } else {\\n                    received = received + amount;\\n                }\\n\\n                // send any exceeding funds back\\n                if (returnFunds > 0) {\\n                    liquidPledging.cancelPledge(pledgeTo, returnFunds);\\n                }\\n            }\\n        }\\n    }\\n\\n    // @notice Allows the recipient or milestoneManager to initiate withdraw from\\n    // the vault to this milestone. If the vault is autoPay, this will disburse the\\n    // payment to the recipient\\n    // Checks if reviewTimeout has passed, if so, sets completed to yes\\n    function mWithdraw(uint[] pledgesAmounts) onlyManagerOrRecipient checkReviewTimeout external {\\n        liquidPledging.mWithdraw(pledgesAmounts);\\n        _disburse();\\n    }\\n\\n    // @notice Allows the recipient or milestoneManager to initiate withdraw of a single pledge, from\\n    // the vault to this milestone. If the vault is autoPay, this will disburse the payment to the\\n    // recipient\\n    // Checks if reviewTimeout has passed, if so, sets completed to yes\\n    function withdraw(uint64 idPledge, uint amount) onlyManagerOrRecipient checkReviewTimeout external {\\n        liquidPledging.withdraw(idPledge, amount);\\n        _disburse();\\n    }\\n\\n    // @notice Allows the recipient or milestoneManager to disburse funds to the recipient\\n    function disburse() onlyManagerOrRecipient checkReviewTimeout external {\\n        _disburse();\\n    }\\n\\n    /**\\n    * @dev By default, AragonApp will allow anyone to call transferToVault\\n    *      We need to blacklist the `acceptedToken`\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return token != acceptedToken;\\n    }\\n\\n\\n    /**\\n    * @notice Pays out the balance of this milestone. Checks for native or ERC20 token\\n    */\\n    function _disburse() internal {\\n        uint amount;\\n\\n        // check for ether or token\\n        if (acceptedToken == ETH) {\\n            amount = this.balance;\\n            require(recipient.send(amount));\\n        } else {\\n            ERC20 milestoneToken = ERC20(acceptedToken);\\n\\n            amount = milestoneToken.balanceOf(this);\\n            require(milestoneToken.transfer(recipient, amount));\\n        }\\n\\n        if (amount > 0) {\\n            PaymentCollected(liquidPledging, idProject, amount);            \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfcebb28373084bf0fe157000466a303793d03f0abd74af12d4dfd53cbe3539e8\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledging.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n    Arthur Lunn, Satya van Heummen <satya.vh@gmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingBase.sol\\\";\\n\\n/// @dev `LiquidPledging` allows for liquid pledging through the use of\\n///  internal id structures and delegate chaining. All basic operations for\\n///  handling liquid pledging are supplied as well as plugin features\\n///  to allow for expanded functionality.\\ncontract LiquidPledging is LiquidPledgingBase {\\n\\n    /// @notice Make a donation in Ether, basically forwarding to addGiverAndDonate method,\\n    ///  setting msg.sender as the \\\"giver\\\" of this donation\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project    \\n    function addGiverAndDonate(uint64 idReceiver)\\n        public\\n        payable\\n    {\\n        addGiverAndDonate(idReceiver, msg.sender, ETH, msg.value);\\n    }\\n\\n    /// @notice Make a donation in Ether on behalf of another Giver\\n    ///  basically forwarding to addGiverAndDonate method\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param donorAddress The address of the \\\"giver\\\" of this donation    \\n    function addGiverAndDonate(uint64 idReceiver, address donorAddress)\\n        public\\n        payable\\n    {\\n        addGiverAndDonate(idReceiver, donorAddress, ETH, msg.value);\\n    }    \\n\\n    /// Create a \\\"giver\\\" pledge admin for the sender & donate \\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function addGiverAndDonate(uint64 idReceiver, address token, uint amount)\\n        public\\n    {\\n        addGiverAndDonate(idReceiver, msg.sender, token, amount);\\n    }\\n\\n    /// Create a \\\"giver\\\" pledge admin for the given `donorAddress` & donate \\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param donorAddress The address of the \\\"giver\\\" of this donation\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function addGiverAndDonate(uint64 idReceiver, address donorAddress, address token, uint amount)\\n        public\\n    {\\n        require(donorAddress != 0);\\n        // default to a 3 day (259200 seconds) commitTime\\n        uint64 idGiver = addGiver(donorAddress, \\\"\\\", \\\"\\\", 259200, ILiquidPledgingPlugin(0));\\n        donate(idGiver, idReceiver, token, amount);\\n    }\\n\\n    /// @notice Make a donation in Ether, basically forwarding to donate method\\n    ///  setting the msg.sender as the \\\"giver\\\" of the donation\\n    /// @param idGiver The id of the Giver donating\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    function donate(uint64 idGiver, uint64 idReceiver)\\n        public\\n        payable\\n    {\\n        donate(idGiver, idReceiver, ETH, msg.value);\\n    }\\n\\n    /// @notice This is how value enters the system and how pledges are created;\\n    ///  the ether is sent to the vault, a pledge for the Giver is created (or\\n    ///  found), the amount of ETH donated in wei is added to the `amount` in\\n    ///  the Giver's Pledge, and an LP transfer is done to the idReceiver for\\n    ///  the full amount\\n    /// @param idGiver The id of the Giver donating\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function donate(uint64 idGiver, uint64 idReceiver, address token, uint amount)\\n        public\\n    {\\n        require(idGiver > 0); // prevent burning donations. idReceiver is checked in _transfer\\n        require(amount > 0);\\n\\n        PledgeAdmin storage sender = _findAdmin(idGiver);\\n        require(sender.adminType == PledgeAdminType.Giver);\\n\\n        // transfer ether or token to the `vault`\\n        if (token == ETH) {\\n            vault.transfer(amount);\\n        } else {\\n            require(ERC20(token).transferFrom(msg.sender, address(vault), amount));\\n        }\\n\\n        uint64 idPledge = _findOrCreatePledge(\\n            idGiver,\\n            new uint64[](0), // Creates empty array for delegationChain\\n            0,\\n            0,\\n            0,\\n            token,\\n            PledgeState.Pledged\\n        );\\n\\n        Pledge storage pTo = _findPledge(idPledge);\\n        pTo.amount += amount;\\n\\n        Transfer(0, idPledge, amount);\\n\\n        _transfer(idGiver, idPledge, amount, idReceiver);\\n    }\\n\\n    /// @notice Transfers amounts between pledges for internal accounting\\n    /// @param idSender Id of the Admin that is transferring the amount from\\n    ///  Pledge to Pledge; this admin must have permissions to move the value\\n    /// @param idPledge Id of the pledge that's moving the value\\n    /// @param amount Quantity of ETH (in wei) that this pledge is transferring \\n    ///  the authority to withdraw from the vault\\n    /// @param idReceiver Destination of the `amount`, can be a Giver/Project sending\\n    ///  to a Giver, a Delegate or a Project; a Delegate sending to another\\n    ///  Delegate, or a Delegate pre-commiting it to a Project \\n    function transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) public\\n    {\\n        _checkAdminOwner(idSender);\\n        _transfer(idSender, idPledge, amount, idReceiver);\\n    }\\n\\n    /// @notice Authorizes a payment be made from the `vault` can be used by the\\n    ///  Giver to veto a pre-committed donation from a Delegate to an\\n    ///  intendedProject\\n    /// @param idPledge Id of the pledge that is to be redeemed into ether\\n    /// @param amount Quantity of ether (in wei) to be authorized\\n    function withdraw(uint64 idPledge, uint amount) public {\\n        idPledge = normalizePledge(idPledge); // Updates pledge info \\n\\n        Pledge storage p = _findPledge(idPledge);\\n        require(p.pledgeState == PledgeState.Pledged);\\n        _checkAdminOwner(p.owner);\\n\\n        uint64 idNewPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Paying\\n        );\\n\\n        _doTransfer(idPledge, idNewPledge, amount);\\n\\n        PledgeAdmin storage owner = _findAdmin(p.owner);\\n        vault.authorizePayment(bytes32(idNewPledge), owner.addr, p.token, amount);\\n    }\\n\\n    /// @notice `onlyVault` Confirms a withdraw request changing the PledgeState\\n    ///  from Paying to Paid\\n    /// @param idPledge Id of the pledge that is to be withdrawn\\n    /// @param amount Quantity of ether (in wei) to be withdrawn\\n    function confirmPayment(uint64 idPledge, uint amount) public onlyVault {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.pledgeState == PledgeState.Paying);\\n\\n        uint64 idNewPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Paid\\n        );\\n\\n        _doTransfer(idPledge, idNewPledge, amount);\\n    }\\n\\n    /// @notice `onlyVault` Cancels a withdraw request, changing the PledgeState\\n    ///  from Paying back to Pledged\\n    /// @param idPledge Id of the pledge that's withdraw is to be canceled\\n    /// @param amount Quantity of ether (in wei) to be canceled\\n    function cancelPayment(uint64 idPledge, uint amount) public onlyVault {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.pledgeState == PledgeState.Paying);\\n\\n        // When a payment is canceled, never is assigned to a project.\\n        uint64 idOldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n\\n        idOldPledge = normalizePledge(idOldPledge);\\n\\n        _doTransfer(idPledge, idOldPledge, amount);\\n    }\\n\\n    /// @notice Changes the `project.canceled` flag to `true`; cannot be undone\\n    /// @param idProject Id of the project that is to be canceled\\n    function cancelProject(uint64 idProject) public {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n        _checkAdminOwner(idProject);\\n        project.canceled = true;\\n\\n        CancelProject(idProject);\\n    }\\n\\n    /// @notice Transfers `amount` in `idPledge` back to the `oldPledge` that\\n    ///  that sent it there in the first place, a Ctrl-z \\n    /// @param idPledge Id of the pledge that is to be canceled\\n    /// @param amount Quantity of ether (in wei) to be transfered to the \\n    ///  `oldPledge`\\n    function cancelPledge(uint64 idPledge, uint amount) public {\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        require(p.oldPledge != 0);\\n        require(p.pledgeState == PledgeState.Pledged);\\n        _checkAdminOwner(p.owner);\\n\\n        uint64 oldPledge = _getOldestPledgeNotCanceled(p.oldPledge);\\n        _doTransfer(idPledge, oldPledge, amount);\\n    }\\n\\n\\n////////\\n// Multi pledge methods\\n////////\\n\\n    // @dev This set of functions makes moving a lot of pledges around much more\\n    // efficient (saves gas) than calling these functions in series\\n    \\n    \\n    /// @dev Bitmask used for dividing pledge amounts in Multi pledge methods\\n    uint constant D64 = 0x10000000000000000;\\n\\n    /// @notice Transfers multiple amounts within multiple Pledges in an\\n    ///  efficient single call \\n    /// @param idSender Id of the Admin that is transferring the amounts from\\n    ///  all the Pledges; this admin must have permissions to move the value\\n    /// @param pledgesAmounts An array of Pledge amounts and the idPledges with \\n    ///  which the amounts are associated; these are extrapolated using the D64\\n    ///  bitmask\\n    /// @param idReceiver Destination of the `pledesAmounts`, can be a Giver or \\n    ///  Project sending to a Giver, a Delegate or a Project; a Delegate sending\\n    ///  to another Delegate, or a Delegate pre-commiting it to a Project \\n    function mTransfer(\\n        uint64 idSender,\\n        uint[] pledgesAmounts,\\n        uint64 idReceiver\\n    ) public \\n    {\\n        for (uint i = 0; i < pledgesAmounts.length; i++ ) {\\n            uint64 idPledge = uint64(pledgesAmounts[i] & (D64-1));\\n            uint amount = pledgesAmounts[i] / D64;\\n\\n            transfer(idSender, idPledge, amount, idReceiver);\\n        }\\n    }\\n\\n    /// @notice Authorizes multiple amounts within multiple Pledges to be\\n    ///  withdrawn from the `vault` in an efficient single call \\n    /// @param pledgesAmounts An array of Pledge amounts and the idPledges with \\n    ///  which the amounts are associated; these are extrapolated using the D64\\n    ///  bitmask\\n    function mWithdraw(uint[] pledgesAmounts) public {\\n        for (uint i = 0; i < pledgesAmounts.length; i++ ) {\\n            uint64 idPledge = uint64(pledgesAmounts[i] & (D64-1));\\n            uint amount = pledgesAmounts[i] / D64;\\n\\n            withdraw(idPledge, amount);\\n        }\\n    }\\n\\n    /// @notice `mNormalizePledge` allows for multiple pledges to be\\n    ///  normalized efficiently\\n    /// @param pledges An array of pledge IDs\\n    function mNormalizePledge(uint64[] pledges) public {\\n        for (uint i = 0; i < pledges.length; i++ ) {\\n            normalizePledge(pledges[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa549270fe2f164f902b91543b5f3e0c41f1cf97a65f6a307a387534b900777e6\"},\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"},\"giveth-liquidpledging/contracts/LiquidPledgingBase.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./PledgeAdmins.sol\\\";\\nimport \\\"./Pledges.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\n/// @dev `LiquidPledgingBase` is the base level contract used to carry out\\n///  liquidPledging's most basic functions, mostly handling and searching the\\n///  data structures\\ncontract LiquidPledgingBase is AragonApp, LiquidPledgingStorage, PledgeAdmins, Pledges {\\n\\n    event Transfer(uint indexed from, uint indexed to, uint amount);\\n    event CancelProject(uint indexed idProject);\\n\\n/////////////\\n// Modifiers\\n/////////////\\n\\n    /// @dev The `vault`is the only addresses that can call a function with this\\n    ///  modifier\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault));\\n        _;\\n    }\\n\\n///////////////\\n// Constructor\\n///////////////\\n\\n    /// @param _vault The vault where the ETH backing the pledges is stored\\n    function initialize(address _vault) onlyInit public {\\n        require(_vault != 0x0);\\n        initialized();\\n\\n        vault = ILPVault(_vault);\\n\\n        admins.length = 1; // we reserve the 0 admin\\n        pledges.length = 1; // we reserve the 0 pledge\\n    }\\n\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice Getter to find Delegate w/ the Pledge ID & the Delegate index\\n    /// @param idPledge The id number representing the pledge being queried\\n    /// @param idxDelegate The index number for the delegate in this Pledge \\n    function getPledgeDelegate(uint64 idPledge, uint64 idxDelegate) external view returns(\\n        uint64 idDelegate,\\n        address addr,\\n        string name\\n    ) {\\n        Pledge storage p = _findPledge(idPledge);\\n        idDelegate = p.delegationChain[idxDelegate - 1];\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        addr = delegate.addr;\\n        name = delegate.name;\\n    }\\n\\n///////////////////\\n// Public functions\\n///////////////////\\n\\n    /// @notice Only affects pledges with the Pledged PledgeState for 2 things:\\n    ///   #1: Checks if the pledge should be committed. This means that\\n    ///       if the pledge has an intendedProject and it is past the\\n    ///       commitTime, it changes the owner to be the proposed project\\n    ///       (The UI will have to read the commit time and manually do what\\n    ///       this function does to the pledge for the end user\\n    ///       at the expiration of the commitTime)\\n    ///\\n    ///   #2: Checks to make sure that if there has been a cancellation in the\\n    ///       chain of projects, the pledge's owner has been changed\\n    ///       appropriately.\\n    ///\\n    /// This function can be called by anybody at anytime on any pledge.\\n    ///  In general it can be called to force the calls of the affected \\n    ///  plugins, which also need to be predicted by the UI\\n    /// @param idPledge This is the id of the pledge that will be normalized\\n    /// @return The normalized Pledge!\\n    function normalizePledge(uint64 idPledge) public returns(uint64) {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Check to make sure this pledge hasn't already been used \\n        // or is in the process of being used\\n        if (p.pledgeState != PledgeState.Pledged) {\\n            return idPledge;\\n        }\\n\\n        // First send to a project if it's proposed and committed\\n        if ((p.intendedProject > 0) && ( _getTime() > p.commitTime)) {\\n            uint64 oldPledge = _findOrCreatePledge(\\n                p.owner,\\n                p.delegationChain,\\n                0,\\n                0,\\n                p.oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            uint64 toPledge = _findOrCreatePledge(\\n                p.intendedProject,\\n                new uint64[](0),\\n                0,\\n                0,\\n                oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            _doTransfer(idPledge, toPledge, p.amount);\\n            idPledge = toPledge;\\n            p = _findPledge(idPledge);\\n        }\\n\\n        toPledge = _getOldestPledgeNotCanceled(idPledge);\\n        if (toPledge != idPledge) {\\n            _doTransfer(idPledge, toPledge, p.amount);\\n        }\\n\\n        return toPledge;\\n    }\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice A check to see if the msg.sender is the owner or the\\n    ///  plugin contract for a specific Admin\\n    /// @param idAdmin The id of the admin being checked\\n    function _checkAdminOwner(uint64 idAdmin) internal view {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        require(msg.sender == address(a.plugin) || msg.sender == a.addr);\\n    }\\n\\n    function _transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal\\n    {\\n        require(idReceiver > 0); // prevent burning value\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage receiver = _findAdmin(idReceiver);\\n\\n        require(p.pledgeState == PledgeState.Pledged);\\n\\n        // If the sender is the owner of the Pledge\\n        if (p.owner == idSender) {\\n\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                _transferOwnershipToGiver(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Project) {\\n                _transferOwnershipToProject(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Delegate) {\\n\\n                uint recieverDIdx = _getDelegateIdx(p, idReceiver);\\n                if (p.intendedProject > 0 && recieverDIdx != NOTFOUND) {\\n                    // if there is an intendedProject and the receiver is in the delegationChain,\\n                    // then we want to preserve the delegationChain as this is a veto of the\\n                    // intendedProject by the owner\\n\\n                    if (recieverDIdx == p.delegationChain.length - 1) {\\n                        uint64 toPledge = _findOrCreatePledge(\\n                            p.owner,\\n                            p.delegationChain,\\n                            0,\\n                            0,\\n                            p.oldPledge,\\n                            p.token,\\n                            PledgeState.Pledged);\\n                        _doTransfer(idPledge, toPledge, amount);\\n                        return;\\n                    }\\n\\n                    _undelegate(idPledge, amount, p.delegationChain.length - receiverDIdx - 1);\\n                    return;\\n                }\\n                // owner is not vetoing an intendedProject and is transferring the pledge to a delegate,\\n                // so we want to reset the delegationChain\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length\\n                );\\n                _appendDelegate(idPledge, amount, idReceiver);\\n                return;\\n            }\\n\\n            // This should never be reached as the receiver.adminType\\n            // should always be either a Giver, Project, or Delegate\\n            assert(false);\\n        }\\n\\n        // If the sender is a Delegate\\n        uint senderDIdx = _getDelegateIdx(p, idSender);\\n        if (senderDIdx != NOTFOUND) {\\n\\n            // And the receiver is another Giver\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                // Only transfer to the Giver who owns the pledge\\n                assert(p.owner == idReceiver);\\n                _undelegate(idPledge, amount, p.delegationChain.length);\\n                return;\\n            }\\n\\n            // And the receiver is another Delegate\\n            if (receiver.adminType == PledgeAdminType.Delegate) {\\n                uint receiverDIdx = _getDelegateIdx(p, idReceiver);\\n\\n                // And not in the delegationChain or part of the delegationChain\\n                // is after the sender, then all of the other delegates after \\n                // the sender are removed and the receiver is appended at the \\n                // end of the delegationChain\\n                if (receiverDIdx == NOTFOUND || receiverDIdx > senderDIdx) {\\n                    idPledge = _undelegate(\\n                        idPledge,\\n                        amount,\\n                        p.delegationChain.length - senderDIdx - 1\\n                    );\\n                    _appendDelegate(idPledge, amount, idReceiver);\\n                    return;\\n                }\\n\\n                // And is already part of the delegate chain but is before the\\n                //  sender, then the sender and all of the other delegates after\\n                //  the RECEIVER are removed from the delegationChain\\n                _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - receiverDIdx - 1\\n                );\\n                return;\\n            }\\n\\n            // And the receiver is a Project, all the delegates after the sender\\n            //  are removed and the amount is pre-committed to the project\\n            if (receiver.adminType == PledgeAdminType.Project) {\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - senderDIdx - 1\\n                );\\n                _proposeAssignProject(idPledge, amount, idReceiver);\\n                return;\\n            }\\n        }\\n        assert(false);  // When the sender is not an owner or a delegate\\n    }\\n\\n    /// @notice `transferOwnershipToProject` allows for the transfer of\\n    ///  ownership to the project, but it can also be called by a project\\n    ///  to un-delegate everyone by setting one's own id for the idReceiver\\n    /// @param idPledge the id of the pledge to be transfered.\\n    /// @param amount Quantity of value that's being transfered\\n    /// @param idReceiver The new owner of the project (or self to un-delegate)\\n    function _transferOwnershipToProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Ensure that the pledge is not already at max pledge depth\\n        // and the project has not been canceled\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 oldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,                     // Set the new owner\\n            new uint64[](0),                // clear the delegation chain\\n            0,\\n            0,\\n            oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }   \\n\\n\\n    /// @notice `transferOwnershipToGiver` allows for the transfer of\\n    ///  value back to the Giver, value is placed in a pledged state\\n    ///  without being attached to a project, delegation chain, or time line.\\n    /// @param idPledge the id of the pledge to be transferred.\\n    /// @param amount Quantity of value that's being transferred\\n    /// @param idReceiver The new owner of the pledge\\n    function _transferOwnershipToGiver(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,\\n            new uint64[](0),\\n            0,\\n            0,\\n            0,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's being chained.\\n    /// @param idReceiver The delegate to be added at the end of the chain\\n    function _appendDelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.delegationChain.length < MAX_DELEGATES);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length + 1\\n        );\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n\\n        // Make the last item in the array the idReceiver\\n        newDelegationChain[p.delegationChain.length] = idReceiver;\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's shifted from delegates.\\n    /// @param q Number (or depth) of delegates to remove\\n    /// @return toPledge The id for the pledge being adjusted or created\\n    function _undelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint q\\n    ) internal returns (uint64 toPledge)\\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length - q\\n        );\\n\\n        for (uint i = 0; i < p.delegationChain.length - q; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n        toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `proposeAssignProject` proposes the assignment of a pledge\\n    ///  to a specific project.\\n    /// @dev This function should potentially be named more specifically.\\n    /// @param idPledge the id of the pledge that will be assigned.\\n    /// @param amount Quantity of value this pledge leader would be assigned.\\n    /// @param idReceiver The project this pledge will potentially \\n    ///  be assigned to.\\n    function _proposeAssignProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            idReceiver,\\n            uint64(_getTime() + _maxCommitTime(p)),\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `doTransfer` is designed to allow for pledge amounts to be \\n    ///  shifted around internally.\\n    /// @param from This is the id of the pledge from which value will be transferred.\\n    /// @param to This is the id of the pledge that value will be transferred to.\\n    /// @param _amount The amount of value that will be transferred.\\n    function _doTransfer(uint64 from, uint64 to, uint _amount) internal {\\n        uint amount = _callPlugins(true, from, to, _amount);\\n        if (from == to) {\\n            return;\\n        }\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        Pledge storage pFrom = _findPledge(from);\\n        Pledge storage pTo = _findPledge(to);\\n\\n        require(pFrom.amount >= amount);\\n        pFrom.amount -= amount;\\n        pTo.amount += amount;\\n        require(pTo.amount >= amount);\\n\\n        Transfer(from, to, amount);\\n        _callPlugins(false, from, to, amount);\\n    }\\n\\n    /// @notice A getter to find the longest commitTime out of the owner and all\\n    ///  the delegates for a specified pledge\\n    /// @param p The Pledge being queried\\n    /// @return The maximum commitTime out of the owner and all the delegates\\n    function _maxCommitTime(Pledge p) internal view returns(uint64 commitTime) {\\n        PledgeAdmin storage a = _findAdmin(p.owner);\\n        commitTime = a.commitTime; // start with the owner's commitTime\\n\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            a = _findAdmin(p.delegationChain[i]);\\n\\n            // If a delegate's commitTime is longer, make it the new commitTime\\n            if (a.commitTime > commitTime) {\\n                commitTime = a.commitTime;\\n            }\\n        }\\n    }\\n\\n    /// @notice A getter to find the oldest pledge that hasn't been canceled\\n    /// @param idPledge The starting place to lookup the pledges\\n    /// @return The oldest idPledge that hasn't been canceled (DUH!)\\n    function _getOldestPledgeNotCanceled(\\n        uint64 idPledge\\n    ) internal view returns(uint64)\\n    {\\n        if (idPledge == 0) {\\n            return 0;\\n        }\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage admin = _findAdmin(p.owner);\\n        \\n        if (admin.adminType == PledgeAdminType.Giver) {\\n            return idPledge;\\n        }\\n\\n        assert(admin.adminType == PledgeAdminType.Project);\\n        if (!isProjectCanceled(p.owner)) {\\n            return idPledge;\\n        }\\n\\n        return _getOldestPledgeNotCanceled(p.oldPledge);\\n    }\\n\\n    /// @notice `callPlugin` is used to trigger the general functions in the\\n    ///  plugin for any actions needed before and after a transfer happens.\\n    ///  Specifically what this does in relation to the plugin is something\\n    ///  that largely depends on the functions of that plugin. This function\\n    ///  is generally called in pairs, once before, and once after a transfer.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param adminId This should be the Id of the *trusted* individual\\n    ///  who has control over this plugin.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param context The situation that is triggering the plugin. See plugin\\n    ///  for a full description of contexts.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPlugin(\\n        bool before,\\n        uint64 adminId,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        uint newAmount;\\n        allowedAmount = amount;\\n        PledgeAdmin storage admin = _findAdmin(adminId);\\n\\n        // Checks admin has a plugin assigned and a non-zero amount is requested\\n        if (address(admin.plugin) != 0 && allowedAmount > 0) {\\n            // There are two separate functions called in the plugin.\\n            // One is called before the transfer and one after\\n            if (before) {\\n                newAmount = admin.plugin.beforeTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n                require(newAmount <= allowedAmount);\\n                allowedAmount = newAmount;\\n            } else {\\n                admin.plugin.afterTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice `callPluginsPledge` is used to apply plugin calls to\\n    ///  the delegate chain and the intended project if there is one.\\n    ///  It does so in either a transferring or receiving context based\\n    ///  on the `p` and  `fromPledge` parameters.\\n    /// @param before This toggle determines whether the plugin call is occuring\\n    ///  before or after a transfer.\\n    /// @param idPledge This is the id of the pledge on which this plugin\\n    ///  is being called.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPluginsPledge(\\n        bool before,\\n        uint64 idPledge,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        // Determine if callPlugin is being applied in a receiving\\n        // or transferring context\\n        uint64 offset = idPledge == fromPledge ? 0 : 256;\\n        allowedAmount = amount;\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Always call the plugin on the owner\\n        allowedAmount = _callPlugin(\\n            before,\\n            p.owner,\\n            fromPledge,\\n            toPledge,\\n            offset,\\n            p.token,\\n            allowedAmount\\n        );\\n\\n        // Apply call plugin to all delegates\\n        for (uint64 i = 0; i < p.delegationChain.length; i++) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.delegationChain[i],\\n                fromPledge,\\n                toPledge,\\n                offset + i + 1,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n\\n        // If there is an intended project also call the plugin in\\n        // either a transferring or receiving context based on offset\\n        // on the intended project\\n        if (p.intendedProject > 0) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.intendedProject,\\n                fromPledge,\\n                toPledge,\\n                offset + 255,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice `callPlugins` calls `callPluginsPledge` once for the transfer\\n    ///  context and once for the receiving context. The aggregated \\n    ///  allowed amount is then returned.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param fromPledge This is the Id from which value is being transferred.\\n    /// @param toPledge This is the Id that value is being transferred to.\\n    /// @param amount The amount of value that is being transferred.\\n    function _callPlugins(\\n        bool before,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        allowedAmount = amount;\\n\\n        // Call the plugins in the transfer context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            fromPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n\\n        // Call the plugins in the receive context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            toPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n    }\\n\\n/////////////\\n// Test functions\\n/////////////\\n\\n    /// @notice Basic helper function to return the current time\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n}\\n\",\"keccak256\":\"0xbd10aeb8cd8834c63bb58034f93ed213ee8ed4f38682cc3808bdf1f5c7d79df3\"},\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./LiquidPledgingACLHelpers.sol\\\";\\n\\ncontract LiquidPledgingPlugins is AragonApp, LiquidPledgingStorage, LiquidPledgingACLHelpers {\\n\\n    bytes32 constant public PLUGIN_MANAGER_ROLE = keccak256(\\\"PLUGIN_MANAGER_ROLE\\\");\\n\\n    /**\\n    * @dev adds an instance of a plugin to the whitelist\\n    */\\n    function addValidPluginInstance(address addr) auth(PLUGIN_MANAGER_ROLE) external {\\n        pluginInstanceWhitelist[addr] = true;\\n    }\\n\\n    /**\\n    * @dev add a contract to the plugin whitelist.\\n    * @notice Proxy contracts should never be added using this method. Each individual\\n    *         proxy instance should be added by calling `addValidPluginInstance`\\n    */\\n    function addValidPluginContract(bytes32 contractHash) auth(PLUGIN_MANAGER_ROLE) public {\\n        pluginContractWhitelist[contractHash] = true;\\n    }\\n\\n    function addValidPluginContracts(bytes32[] contractHashes) external auth(PLUGIN_MANAGER_ROLE) {\\n        for (uint8 i = 0; i < contractHashes.length; i++) {\\n            addValidPluginContract(contractHashes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev removes a contract from the plugin whitelist\\n    */\\n    function removeValidPluginContract(bytes32 contractHash) external authP(PLUGIN_MANAGER_ROLE, arr(contractHash)) {\\n        pluginContractWhitelist[contractHash] = false;\\n    }\\n\\n    /**\\n    * @dev removes an instance of a plugin to the whitelist\\n    */\\n    function removeValidPluginInstance(address addr) external authP(PLUGIN_MANAGER_ROLE, arr(addr)) {\\n        pluginInstanceWhitelist[addr] = false;\\n    }\\n\\n    /**\\n    * @dev enable/disable the plugin whitelist.\\n    * @notice you better know what you're doing if you are going to disable it\\n    */\\n    function useWhitelist(bool useWhitelist) external auth(PLUGIN_MANAGER_ROLE) {\\n        whitelistDisabled = !useWhitelist;\\n    }\\n\\n    /**\\n    * check if the contract at the provided address is in the plugin whitelist\\n    */\\n    function isValidPlugin(address addr) public view returns(bool) {\\n        if (whitelistDisabled || addr == 0x0) {\\n            return true;\\n        }\\n\\n        // first check pluginInstances\\n        if (pluginInstanceWhitelist[addr]) {\\n            return true;\\n        }\\n\\n        // if the addr isn't a valid instance, check the contract code\\n        bytes32 contractHash = getCodeHash(addr);\\n\\n        return pluginContractWhitelist[contractHash];\\n    }\\n\\n    /**\\n    * @return the hash of the code for the given address\\n    */\\n    function getCodeHash(address addr) public view returns(bytes32) {\\n        bytes memory o_code;\\n        assembly {\\n            // retrieve the size of the code\\n            let size := extcodesize(addr)\\n            // allocate output byte array\\n            o_code := mload(0x40)\\n            mstore(o_code, size) // store length in memory\\n            // actually retrieve the code\\n            extcodecopy(addr, add(o_code, 0x20), 0, size)\\n        }\\n        return keccak256(o_code);\\n    }\\n}\",\"keccak256\":\"0x109373f81759324d3d39f0b2b8fd02072c2b0e502901c14e1b06ca91a05a5ae2\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"},\"giveth-liquidpledging/contracts/PledgeAdmins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\nimport \\\"./LiquidPledgingPlugins.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\ncontract PledgeAdmins is AragonApp, LiquidPledgingPlugins {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_SUBPROJECT_LEVEL = 20;\\n    uint constant MAX_INTERPROJECT_LEVEL = 20;\\n\\n    // Events\\n    event GiverAdded(uint64 indexed idGiver, string url);\\n    event GiverUpdated(uint64 indexed idGiver, string url);\\n    event DelegateAdded(uint64 indexed idDelegate, string url);\\n    event DelegateUpdated(uint64 indexed idDelegate, string url);\\n    event ProjectAdded(uint64 indexed idProject, string url);\\n    event ProjectUpdated(uint64 indexed idProject, string url);\\n\\n////////////////////\\n// Public functions\\n////////////////////\\n\\n    /// @notice Creates a Giver Admin with the `msg.sender` as the Admin address\\n    /// @param name The name used to identify the Giver\\n    /// @param url The link to the Giver's profile often an IPFS hash\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param plugin This is Giver's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idGiver The id number used to reference this Admin\\n    function addGiver(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idGiver)\\n    {\\n        return addGiver(\\n            msg.sender,\\n            name,\\n            url,\\n            commitTime,\\n            plugin\\n        );\\n    }\\n\\n    function addGiver(\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) public returns (uint64 idGiver)\\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idGiver = uint64(admins.length);\\n\\n        // Save the fields\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Giver,\\n                addr,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        GiverAdded(idGiver, url);\\n    }\\n\\n    /// @notice Updates a Giver's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Giver\\n    /// @param idGiver This is the Admin id number used to specify the Giver\\n    /// @param newAddr The new address that represents this Giver\\n    /// @param newName The new name used to identify the Giver\\n    /// @param newUrl The new link to the Giver's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    function updateGiver(\\n        uint64 idGiver,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage giver = _findAdmin(idGiver);\\n        require(msg.sender == giver.addr);\\n        require(giver.adminType == PledgeAdminType.Giver); // Must be a Giver\\n        giver.addr = newAddr;\\n        giver.name = newName;\\n        giver.url = newUrl;\\n        giver.commitTime = newCommitTime;\\n\\n        GiverUpdated(idGiver, newUrl);\\n    }\\n\\n    /// @notice Creates a Delegate Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Delegate\\n    /// @param url The link to the Delegate's profile often an IPFS hash\\n    /// @param commitTime Sets the length of time in seconds that this delegate\\n    ///  can be vetoed. Whenever this delegate is in a delegate chain the time\\n    ///  allowed to veto any event must be greater than or equal to this time.\\n    /// @param plugin This is Delegate's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idxDelegate The id number used to reference this Delegate within\\n    ///  the PLEDGE_ADMIN array\\n    function addDelegate(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idDelegate) \\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idDelegate = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Delegate,\\n                msg.sender,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        DelegateAdded(idDelegate, url);\\n    }\\n\\n    /// @notice Updates a Delegate's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Delegate\\n    /// @param idDelegate The Admin id number used to specify the Delegate\\n    /// @param newAddr The new address that represents this Delegate\\n    /// @param newName The new name used to identify the Delegate\\n    /// @param newUrl The new link to the Delegate's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds that this\\n    ///  delegate can be vetoed. Whenever this delegate is in a delegate chain\\n    ///  the time allowed to veto any event must be greater than or equal to\\n    ///  this time.\\n    function updateDelegate(\\n        uint64 idDelegate,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        require(msg.sender == delegate.addr);\\n        require(delegate.adminType == PledgeAdminType.Delegate);\\n        delegate.addr = newAddr;\\n        delegate.name = newName;\\n        delegate.url = newUrl;\\n        delegate.commitTime = newCommitTime;\\n\\n        DelegateUpdated(idDelegate, newUrl);\\n    }\\n\\n    /// @notice Creates a Project Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Project\\n    /// @param url The link to the Project's profile often an IPFS hash\\n    /// @param projectAdmin The address for the trusted project manager\\n    /// @param parentProject The Admin id number for the parent project or 0 if\\n    ///  there is no parentProject\\n    /// @param commitTime Sets the length of time in seconds the Project has to\\n    ///   veto when the Project delegates to another Delegate and they pledge\\n    ///   those funds to a project\\n    /// @param plugin This is Project's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idProject The id number used to reference this Admin\\n    function addProject(\\n        string name,\\n        string url,\\n        address projectAdmin,\\n        uint64 parentProject,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idProject) \\n    {\\n        require(isValidPlugin(plugin));\\n\\n        if (parentProject != 0) {\\n            PledgeAdmin storage a = _findAdmin(parentProject);\\n            // getProjectLevel will check that parentProject has a `Project` adminType\\n            require(_getProjectLevel(a) < MAX_SUBPROJECT_LEVEL);\\n        }\\n\\n        idProject = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Project,\\n                projectAdmin,\\n                commitTime,\\n                parentProject,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        ProjectAdded(idProject, url);\\n    }\\n\\n    /// @notice Updates a Project's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin or a parentProject,\\n    ///  and it must be called by the current address of the Project\\n    /// @param idProject The Admin id number used to specify the Project\\n    /// @param newAddr The new address that represents this Project\\n    /// @param newName The new name used to identify the Project\\n    /// @param newUrl The new link to the Project's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Project has\\n    ///  to veto when the Project delegates to a Delegate and they pledge those\\n    ///  funds to a project\\n    function updateProject(\\n        uint64 idProject,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n\\n        require(msg.sender == project.addr);\\n        require(project.adminType == PledgeAdminType.Project);\\n\\n        project.addr = newAddr;\\n        project.name = newName;\\n        project.url = newUrl;\\n        project.commitTime = newCommitTime;\\n\\n        ProjectUpdated(idProject, newUrl);\\n    }\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice A constant getter used to check how many total Admins exist\\n    /// @return The total number of admins (Givers, Delegates and Projects) .\\n    function numberOfPledgeAdmins() external view returns(uint) {\\n        return admins.length - 1;\\n    }\\n\\n    /// @notice A constant getter to check the details of a specified Admin\\n    /// @return addr Account or contract address for admin\\n    /// @return name Name of the pledgeAdmin\\n    /// @return url The link to the Project's profile often an IPFS hash\\n    /// @return commitTime The length of time in seconds the Admin has to veto\\n    ///   when the Admin delegates to a Delegate and that Delegate pledges those\\n    ///   funds to a project\\n    /// @return parentProject The Admin id number for the parent project or 0\\n    ///  if there is no parentProject\\n    /// @return canceled 0 for Delegates & Givers, true if a Project has been\\n    ///  canceled\\n    /// @return plugin This is Project's liquidPledging plugin allowing for\\n    ///  extended functionality\\n    function getPledgeAdmin(uint64 idAdmin) external view returns (\\n        PledgeAdminType adminType,\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        uint64 parentProject,\\n        bool canceled,\\n        address plugin\\n    ) {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        adminType = a.adminType;\\n        addr = a.addr;\\n        name = a.name;\\n        url = a.url;\\n        commitTime = a.commitTime;\\n        parentProject = a.parentProject;\\n        canceled = a.canceled;\\n        plugin = address(a.plugin);\\n    }\\n\\n    /// @notice A getter to find if a specified Project has been canceled\\n    /// @param projectId The Admin id number used to specify the Project\\n    /// @return True if the Project has been canceled\\n    function isProjectCanceled(uint64 projectId)\\n        public view returns (bool)\\n    {\\n        PledgeAdmin storage a = _findAdmin(projectId);\\n\\n        if (a.adminType == PledgeAdminType.Giver) {\\n            return false;\\n        }\\n\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.canceled) {\\n            return true;\\n        }\\n        if (a.parentProject == 0) {\\n            return false;\\n        }\\n\\n        return isProjectCanceled(a.parentProject);\\n    }\\n\\n///////////////////\\n// Internal methods\\n///////////////////\\n\\n    /// @notice A getter to look up a Admin's details\\n    /// @param idAdmin The id for the Admin to lookup\\n    /// @return The PledgeAdmin struct for the specified Admin\\n    function _findAdmin(uint64 idAdmin) internal view returns (PledgeAdmin storage) {\\n        require(idAdmin < admins.length);\\n        return admins[idAdmin];\\n    }\\n\\n    /// @notice Find the level of authority a specific Project has\\n    ///  using a recursive loop\\n    /// @param a The project admin being queried\\n    /// @return The level of authority a specific Project has\\n    function _getProjectLevel(PledgeAdmin a) internal view returns(uint64) {\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.parentProject == 0) {\\n            return(1);\\n        }\\n\\n        PledgeAdmin storage parent = _findAdmin(a.parentProject);\\n        return _getProjectLevel(parent) + 1;\\n    }\\n}\",\"keccak256\":\"0x06bc6171a12d31aaa05dce4217e107555f8289182046a0bd8da615c38faae3f5\"},\"giveth-liquidpledging/contracts/Pledges.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\n\\ncontract Pledges is AragonApp, LiquidPledgingStorage {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_DELEGATES = 10;\\n\\n    // a constant for when a delegate is requested that is not in the system\\n    uint64 constant  NOTFOUND = 0xFFFFFFFFFFFFFFFF;\\n\\n/////////////////////////////\\n// Public constant functions\\n////////////////////////////\\n\\n    /// @notice A constant getter that returns the total number of pledges\\n    /// @return The total number of Pledges in the system\\n    function numberOfPledges() external view returns (uint) {\\n        return pledges.length - 1;\\n    }\\n\\n    /// @notice A getter that returns the details of the specified pledge\\n    /// @param idPledge the id number of the pledge being queried\\n    /// @return the amount, owner, the number of delegates (but not the actual\\n    ///  delegates, the intendedProject (if any), the current commit time and\\n    ///  the previous pledge this pledge was derived from\\n    function getPledge(uint64 idPledge) external view returns(\\n        uint amount,\\n        uint64 owner,\\n        uint64 nDelegates,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState pledgeState\\n    ) {\\n        Pledge memory p = _findPledge(idPledge);\\n        amount = p.amount;\\n        owner = p.owner;\\n        nDelegates = uint64(p.delegationChain.length);\\n        intendedProject = p.intendedProject;\\n        commitTime = p.commitTime;\\n        oldPledge = p.oldPledge;\\n        token = p.token;\\n        pledgeState = p.pledgeState;\\n    }\\n\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice This creates a Pledge with an initial amount of 0 if one is not\\n    ///  created already; otherwise it finds the pledge with the specified\\n    ///  attributes; all pledges technically exist, if the pledge hasn't been\\n    ///  created in this system yet it simply isn't in the hash array\\n    ///  hPledge2idx[] yet\\n    /// @param owner The owner of the pledge being looked up\\n    /// @param delegationChain The list of delegates in order of authority\\n    /// @param intendedProject The project this pledge will Fund after the\\n    ///  commitTime has passed\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param oldPledge This value is used to store the pledge the current\\n    ///  pledge was came from, and in the case a Project is canceled, the Pledge\\n    ///  will revert back to it's previous state\\n    /// @param state The pledge state: Pledged, Paying, or state\\n    /// @return The hPledge2idx index number\\n    function _findOrCreatePledge(\\n        uint64 owner,\\n        uint64[] delegationChain,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState state\\n    ) internal returns (uint64)\\n    {\\n        bytes32 hPledge = keccak256(delegationChain, owner, intendedProject, commitTime, oldPledge, token, state);\\n        uint64 id = hPledge2idx[hPledge];\\n        if (id > 0) {\\n            return id;\\n        }\\n\\n        id = uint64(pledges.length);\\n        hPledge2idx[hPledge] = id;\\n        pledges.push(\\n            Pledge(\\n                0,\\n                delegationChain,\\n                owner,\\n                intendedProject,\\n                commitTime,\\n                oldPledge,\\n                token,\\n                state\\n            )\\n        );\\n        return id;\\n    }\\n\\n    /// @param idPledge the id of the pledge to load from storage\\n    /// @return The Pledge\\n    function _findPledge(uint64 idPledge) internal view returns(Pledge storage) {\\n        require(idPledge < pledges.length);\\n        return pledges[idPledge];\\n    }\\n\\n    /// @notice A getter that searches the delegationChain for the level of\\n    ///  authority a specific delegate has within a Pledge\\n    /// @param p The Pledge that will be searched\\n    /// @param idDelegate The specified delegate that's searched for\\n    /// @return If the delegate chain contains the delegate with the\\n    ///  `admins` array index `idDelegate` this returns that delegates\\n    ///  corresponding index in the delegationChain. Otherwise it returns\\n    ///  the NOTFOUND constant\\n    function _getDelegateIdx(Pledge p, uint64 idDelegate) internal pure returns(uint64) {\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            if (p.delegationChain[i] == idDelegate) {\\n                return uint64(i);\\n            }\\n        }\\n        return NOTFOUND;\\n    }\\n\\n    /// @notice A getter to find how many old \\\"parent\\\" pledges a specific Pledge\\n    ///  had using a self-referential loop\\n    /// @param p The Pledge being queried\\n    /// @return The number of old \\\"parent\\\" pledges a specific Pledge had\\n    function _getPledgeLevel(Pledge p) internal view returns(uint) {\\n        if (p.oldPledge == 0) {\\n            return 0;\\n        }\\n        Pledge storage oldP = _findPledge(p.oldPledge);\\n        return _getPledgeLevel(oldP) + 1; // a loop lookup\\n    }\\n}\\n\",\"keccak256\":\"0x9c7a60dff92f94d518d0c4a40d5434cd23680f79fd364ae855575ae4ca683797\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            }
          }
        }
      }
    },
    "./contracts/LPPCappedMilestoneFactory.sol": {
      "LPPCappedMilestoneFactory": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "MILESTONE_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "LP_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "LP_APP_INSTANCE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "MILESTONE_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "name": "newAppProxyPinned",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "VAULT_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              }
            ],
            "name": "newAppProxy",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "string"
              },
              {
                "name": "_url",
                "type": "string"
              },
              {
                "name": "_parentProject",
                "type": "uint64"
              },
              {
                "name": "_reviewer",
                "type": "address"
              },
              {
                "name": "_recipient",
                "type": "address"
              },
              {
                "name": "_campaignReviewer",
                "type": "address"
              },
              {
                "name": "_milestoneManager",
                "type": "address"
              },
              {
                "name": "_maxAmount",
                "type": "uint256"
              },
              {
                "name": "_acceptedToken",
                "type": "address"
              },
              {
                "name": "_reviewTimeoutSeconds",
                "type": "uint256"
              }
            ],
            "name": "newMilestone",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "name": "newAppProxy",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              }
            ],
            "name": "newAppProxyPinned",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "milestone",
                "type": "address"
              }
            ],
            "name": "DeployMilestone",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "proxy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "isUpgradeable",
                "type": "bool"
              },
              {
                "indexed": false,
                "name": "appId",
                "type": "bytes32"
              }
            ],
            "name": "NewAppProxy",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60405160208061233a83398101604052808051915050600160a060020a038116151561003a57600080fd5b60008054600160a060020a03909216600160a060020a03199092169190911790556122d08061006a6000396000f3006060604052600436106200013d5763ffffffff60e060020a600035041663097207788114620001425780631113ed0d146200016a578063178e607914620001805780632249264214620001965780632501269914620001ac5780633074426714620001c257806332f0a3b514620001d8578063756f6049146200020a5780637e7db6e114620002205780638322fff214620002565780638eab4b59146200026c5780639d4941d81462000282578063a3b4b07f14620002a6578063b1df096c14620002bc578063cbcc65eb14620002d2578063cc473be314620002e8578063d162f8b014620002fe578063d2dd420f1462000366578063d4aae0c4146200037c578063db8a61d41462000392578063e156a8f314620003a8578063ed4e08c914620003cd578063ede658b014620004a8578063ff289fc51462000510575b600080fd5b34156200014e57600080fd5b6200015862000535565b60405190815260200160405180910390f35b34156200017657600080fd5b6200015862000559565b34156200018c57600080fd5b620001586200057d565b3415620001a257600080fd5b62000158620005a1565b3415620001b857600080fd5b62000158620005fc565b3415620001ce57600080fd5b6200015862000620565b3415620001e457600080fd5b620001ee62000654565b604051600160a060020a03909116815260200160405180910390f35b34156200021657600080fd5b62000158620006bd565b34156200022c57600080fd5b62000242600160a060020a0360043516620006e1565b604051901515815260200160405180910390f35b34156200026257600080fd5b620001ee620006e7565b34156200027857600080fd5b62000158620006ec565b34156200028e57600080fd5b620002a4600160a060020a036004351662000758565b005b3415620002b257600080fd5b62000158620008df565b3415620002c857600080fd5b6200015862000903565b3415620002de57600080fd5b6200015862000926565b3415620002f457600080fd5b620001586200094a565b34156200030a57600080fd5b620001ee60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506200096e95505050505050565b34156200037257600080fd5b6200015862000a77565b34156200038857600080fd5b620001ee62000aab565b34156200039e57600080fd5b6200015862000aba565b3415620003b457600080fd5b620001ee600160a060020a036004351660243562000ade565b3415620003d957600080fd5b620002a460046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050833567ffffffffffffffff16936020810135600160a060020a039081169450604082013581169350606082013581169250608082013581169160a08101359160c0820135169060e0013562000b18565b3415620004b457600080fd5b620001ee60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965062000c2f95505050505050565b34156200051c57600080fd5b620001ee600160a060020a036004351660243562000d38565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f6040516000805160206200228583398151915281526014016040518091039020604051918252602082015260409081019051809103902081565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e01604051809103902081565b60008054600160a060020a03166332f0a3b582604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156200069d57600080fd5b6102c65a03f11515620006af57600080fd5b505050604051805191505090565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b50600190565b600081565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e016040518091039020604051918252602082015260409081019051809103902081565b6000806200076683620006e1565b15156200077257600080fd5b6200077c62000654565b9150620007898262000d6b565b15156200079557600080fd5b600160a060020a0383161515620007ea5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515620007e457600080fd5b620008da565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156200084257600080fd5b6102c65a03f115156200085457600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515620008bd57600080fd5b6102c65a03f11515620008cf57600080fd5b505050604051805150505b505050565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b604051600080516020620022858339815191528152601401604051809103902081565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b6000808484846200097e6200118e565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b83811015620009cf578082015183820152602001620009b5565b50505050905090810190601f168015620009fd5780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151562000a1b57600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600086604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b6040517f7661756c740000000000000000000000000000000000000000000000000000008152600501604051809103902081565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b600062000b118383600060405180591062000af65750595b818152601f19601f8301168101602001604052905062000c2f565b9392505050565b600080600062000b2a8d8d8d62000d9a565b92509250925081600160a060020a03166385e5322f8b8a8c8b898c8c8b8a60405160e060020a63ffffffff8c16028152600160a060020a03998a166004820152978916602489015295881660448801529387166064870152608486019290925260a4850152841660c484015290921660e482015267ffffffffffffffff90911661010482015261012401600060405180830381600087803b151562000bce57600080fd5b6102c65a03f1151562000be057600080fd5b5050507fe1fc9e84f147ecbcc43aa6fc3d930156631ba3864862bd21eb067442d180ecb482604051600160a060020a03909116815260200160405180910390a150505050505050505050505050565b60008084848462000c3f6200119f565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101562000c9057808201518382015260200162000c76565b50505050905090810190601f16801562000cbe5780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151562000cdc57600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600186604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b600062000b118383600060405180591062000d505750595b818152601f19601f830116810160200160405290506200096e565b600080600160a060020a038316151562000d89576000915062000d94565b823b90506000811191505b50919050565b60008054819081908190600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f6040516000805160206200228583398151915281526014016040518091039020604051918252602082015260409081019051809103902060006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151562000e4a57600080fd5b6102c65a03f1151562000e5c57600080fd5b5050506040518051915050600160a060020a038116151562000e7d57600080fd5b600054600160a060020a03166342c71f1d7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e016040518091039020604051918252602082015260409081019051809103902060006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151562000f3757600080fd5b6102c65a03f1151562000f4957600080fd5b5050506040518051945050600160a060020a038416151562000f6a57600080fd5b60005462000fa190600160a060020a0316604051600080516020620022858339815191528152601401604051809103902062000ade565b925083600160a060020a03166379f4542e8460405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151562000ff257600080fd5b6102c65a03f115156200100457600080fd5b50505083600160a060020a03166372116e928888868960008960006040516020015260405160e060020a63ffffffff8916028152600160a060020a03808616604483015267ffffffffffffffff808616606484015284166084830152821660a482015260c060048201908152908190602481019060c40189818151815260200191508051906020019080838360005b83811015620010ad57808201518382015260200162001093565b50505050905090810190601f168015620010db5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101562001113578082015183820152602001620010f9565b50505050905090810190601f168015620011415780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15156200116657600080fd5b6102c65a03f115156200117857600080fd5b5050506040518051905091505093509350939050565b60405161086c80620011b183390190565b6040516108688062001a1d8339019056006060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da00296060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a00296c70702d6361707065642d6d696c6573746f6e65000000000000000000000000a165627a7a7230582064fde23eb4e50daa53319fa61864cf615b01aab16d12fe8713946a176ae206560029",
            "sourceMap": "349:2491:1:-;;;779:355;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;1078:14:1;;;;1070:23;;;;;;1103:6;:24;;-1:-1:-1;;;;;1103:24:1;;;-1:-1:-1;;;;;;1103:24:1;;;;;;;;;349:2491;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106200013d5763ffffffff60e060020a600035041663097207788114620001425780631113ed0d146200016a578063178e607914620001805780632249264214620001965780632501269914620001ac5780633074426714620001c257806332f0a3b514620001d8578063756f6049146200020a5780637e7db6e114620002205780638322fff214620002565780638eab4b59146200026c5780639d4941d81462000282578063a3b4b07f14620002a6578063b1df096c14620002bc578063cbcc65eb14620002d2578063cc473be314620002e8578063d162f8b014620002fe578063d2dd420f1462000366578063d4aae0c4146200037c578063db8a61d41462000392578063e156a8f314620003a8578063ed4e08c914620003cd578063ede658b014620004a8578063ff289fc51462000510575b600080fd5b34156200014e57600080fd5b6200015862000535565b60405190815260200160405180910390f35b34156200017657600080fd5b6200015862000559565b34156200018c57600080fd5b620001586200057d565b3415620001a257600080fd5b62000158620005a1565b3415620001b857600080fd5b62000158620005fc565b3415620001ce57600080fd5b6200015862000620565b3415620001e457600080fd5b620001ee62000654565b604051600160a060020a03909116815260200160405180910390f35b34156200021657600080fd5b62000158620006bd565b34156200022c57600080fd5b62000242600160a060020a0360043516620006e1565b604051901515815260200160405180910390f35b34156200026257600080fd5b620001ee620006e7565b34156200027857600080fd5b62000158620006ec565b34156200028e57600080fd5b620002a4600160a060020a036004351662000758565b005b3415620002b257600080fd5b62000158620008df565b3415620002c857600080fd5b6200015862000903565b3415620002de57600080fd5b6200015862000926565b3415620002f457600080fd5b620001586200094a565b34156200030a57600080fd5b620001ee60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506200096e95505050505050565b34156200037257600080fd5b6200015862000a77565b34156200038857600080fd5b620001ee62000aab565b34156200039e57600080fd5b6200015862000aba565b3415620003b457600080fd5b620001ee600160a060020a036004351660243562000ade565b3415620003d957600080fd5b620002a460046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050833567ffffffffffffffff16936020810135600160a060020a039081169450604082013581169350606082013581169250608082013581169160a08101359160c0820135169060e0013562000b18565b3415620004b457600080fd5b620001ee60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965062000c2f95505050505050565b34156200051c57600080fd5b620001ee600160a060020a036004351660243562000d38565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f6040516000805160206200228583398151915281526014016040518091039020604051918252602082015260409081019051809103902081565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e01604051809103902081565b60008054600160a060020a03166332f0a3b582604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156200069d57600080fd5b6102c65a03f11515620006af57600080fd5b505050604051805191505090565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b50600190565b600081565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e016040518091039020604051918252602082015260409081019051809103902081565b6000806200076683620006e1565b15156200077257600080fd5b6200077c62000654565b9150620007898262000d6b565b15156200079557600080fd5b600160a060020a0383161515620007ea5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515620007e457600080fd5b620008da565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156200084257600080fd5b6102c65a03f115156200085457600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515620008bd57600080fd5b6102c65a03f11515620008cf57600080fd5b505050604051805150505b505050565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b604051600080516020620022858339815191528152601401604051809103902081565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b6000808484846200097e6200118e565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b83811015620009cf578082015183820152602001620009b5565b50505050905090810190601f168015620009fd5780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151562000a1b57600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600086604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b6040517f7661756c740000000000000000000000000000000000000000000000000000008152600501604051809103902081565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b600062000b118383600060405180591062000af65750595b818152601f19601f8301168101602001604052905062000c2f565b9392505050565b600080600062000b2a8d8d8d62000d9a565b92509250925081600160a060020a03166385e5322f8b8a8c8b898c8c8b8a60405160e060020a63ffffffff8c16028152600160a060020a03998a166004820152978916602489015295881660448801529387166064870152608486019290925260a4850152841660c484015290921660e482015267ffffffffffffffff90911661010482015261012401600060405180830381600087803b151562000bce57600080fd5b6102c65a03f1151562000be057600080fd5b5050507fe1fc9e84f147ecbcc43aa6fc3d930156631ba3864862bd21eb067442d180ecb482604051600160a060020a03909116815260200160405180910390a150505050505050505050505050565b60008084848462000c3f6200119f565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101562000c9057808201518382015260200162000c76565b50505050905090810190601f16801562000cbe5780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151562000cdc57600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600186604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b600062000b118383600060405180591062000d505750595b818152601f19601f830116810160200160405290506200096e565b600080600160a060020a038316151562000d89576000915062000d94565b823b90506000811191505b50919050565b60008054819081908190600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f6040516000805160206200228583398151915281526014016040518091039020604051918252602082015260409081019051809103902060006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151562000e4a57600080fd5b6102c65a03f1151562000e5c57600080fd5b5050506040518051915050600160a060020a038116151562000e7d57600080fd5b600054600160a060020a03166342c71f1d7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e016040518091039020604051918252602082015260409081019051809103902060006040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151562000f3757600080fd5b6102c65a03f1151562000f4957600080fd5b5050506040518051945050600160a060020a038416151562000f6a57600080fd5b60005462000fa190600160a060020a0316604051600080516020620022858339815191528152601401604051809103902062000ade565b925083600160a060020a03166379f4542e8460405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b151562000ff257600080fd5b6102c65a03f115156200100457600080fd5b50505083600160a060020a03166372116e928888868960008960006040516020015260405160e060020a63ffffffff8916028152600160a060020a03808616604483015267ffffffffffffffff808616606484015284166084830152821660a482015260c060048201908152908190602481019060c40189818151815260200191508051906020019080838360005b83811015620010ad57808201518382015260200162001093565b50505050905090810190601f168015620010db5780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101562001113578082015183820152602001620010f9565b50505050905090810190601f168015620011415780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15156200116657600080fd5b6102c65a03f115156200117857600080fd5b5050506040518051905091505093509350939050565b60405161086c80620011b183390190565b6040516108688062001a1d8339019056006060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da00296060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a00296c70702d6361707065642d6d696c6573746f6e65000000000000000000000000a165627a7a7230582064fde23eb4e50daa53319fa61864cf615b01aab16d12fe8713946a176ae206560029",
            "sourceMap": "349:2491:1:-;;;;;;;;;-1:-1:-1;;;349:2491:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1020:101:23;;;;;;;;;;;;;;;;;;;;;;;;;;;1127:106;;;;;;;;;;;;796:111;;;;;;;;;;;;549:88:1;;;;;;;;;;;;1239:103:23;;;;;;;;;;;;192:63:28;;;;;;;;;;;;1925:107:1;;;;;;;;;;;;;;;-1:-1:-1;;;;;1925:107:1;;;;;;;;;;;;;;565::23;;;;;;;;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;;;;;;;;;;;;;;;;;;185:40:11;;;;;;;;;;;;643:82:1;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;;;1457:100:23;;;;;;;;;;;;467:76:1;;;;;;;;;;;;1348:103:23;;;;;;;;;;;;913:101;;;;;;;;;;;;845:287:20;;;;;;;;;;;;;-1:-1:-1;;;;;845:287:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;845:287:20;;-1:-1:-1;845:287:20;;-1:-1:-1;;;;;;845:287:20;129:57:28;;;;;;;;;;;;440:20:1;;;;;;;;;;;;678:112:23;;;;;;;;;;;;211:157:20;;;;;;;;;;-1:-1:-1;;;;;211:157:20;;;;;;;1140:779:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1140:779:1;;-1:-1:-1;;;1140:779:1;;;;;;;;;-1:-1:-1;;;;;1140:779:1;;;;-1:-1:-1;1140:779:1;;;;;;;-1:-1:-1;1140:779:1;;;;;;;-1:-1:-1;1140:779:1;;;;;;;;;;;;;;;;;;;;;;;374:295:20;;;;;;;;;;;;;-1:-1:-1;;;;;374:295:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;374:295:20;;-1:-1:-1;374:295:20;;-1:-1:-1;;;;;;374:295:20;675:164;;;;;;;;;;-1:-1:-1;;;;;675:164:20;;;;;;;1020:101:23;1055:66;1020:101;:::o;1127:106::-;1167:66;1127:106;:::o;796:111::-;841:66;796:111;:::o;549:88:1:-;724:66:23;510:33:1;;-1:-1:-1;;;;;;;;;;;510:33:1;;;;;;;;;;;589:48;;;;;;;;;;;;;;;;;;;;549:88;:::o;1239:103:23:-;1276:66;1239:103;:::o;192:63:28:-;228:27;;;;;;;;;;;;;;192:63;:::o;1925:107:1:-;1974:7;2000:6;;-1:-1:-1;;;;;2000:6:1;:23;1974:7;2000:25;;;;;;;;;;-1:-1:-1;;;2000:25:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1925:107:1;:::o;565::23:-;606:66;565:107;:::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;185:40:11:-;223:1;185:40;:::o;643:82:1:-;841:66:23;228:27:28;;;;;;;;;;;;;;685:40:1;;;;;;;;;;;;;;;;;;;;643:82;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;1457:100:23:-;1491:66;1457:100;:::o;467:76:1:-;510:33;;-1:-1:-1;;;;;;;;;;;510:33:1;;;;;;;;;;;467:76;:::o;1348:103:23:-;1385:66;1348:103;:::o;913:101::-;948:66;913:101;:::o;845:287:20:-;947:14;973:20;1015:7;1024:6;1032:18;996:55;;:::i;:::-;-1:-1:-1;;;;;996:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;973:78:20;;1061:42;1081:5;1089;1096:6;1061:42;;-1:-1:-1;;;;;1061:42:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:5;845:287;-1:-1:-1;;;;845:287:20:o;129:57:28:-;168:18;;;;;;;;;;;;;;129:57;:::o;440:20:1:-;;;-1:-1:-1;;;;;440:20:1;;:::o;678:112:23:-;724:66;678:112;:::o;211:157:20:-;281:19;319:42;331:7;340:6;358:1;348:12;;;;;;;;;;;;;-1:-1:-1;;348:12:20;;;;;;;;;;;;319:11;:42::i;:::-;312:49;211:157;-1:-1:-1;;;211:157:20:o;1140:779:1:-;1494:14;1510:9;1521;1534:45;1551:5;1558:4;1564:14;1534:16;:45::i;:::-;1489:90;;;;;;1589:9;-1:-1:-1;;;;;1589:20:1;;1623:9;1646:17;1677:10;1701:17;1732:21;1767:10;1791:14;1819;1847:9;1589:277;;-1:-1:-1;;;1589:277:1;;;;;;-1:-1:-1;;;;;1589:277:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1589:277:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1877:35;1901:9;1877:35;;-1:-1:-1;;;;;1877:35:1;;;;;;;;;;;;;;1140:779;;;;;;;;;;;;;:::o;374:295:20:-;470:19;501:25;553:7;562:6;570:18;529:60;;:::i;:::-;-1:-1:-1;;;;;529:60:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;501:88:20;;599:41;619:5;627:4;633:6;599:41;;-1:-1:-1;;;;;599:41:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;657:5;374:295;-1:-1:-1;;;;374:295:20:o;675:164::-;751:14;784:48;802:7;811:6;829:1;819:12;;;;;;;;;;;;;-1:-1:-1;;819:12:20;;;;;;;;;;;;784:17;:48::i;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;2038:800:1:-;2163:29;2281:6;;2163:29;;;;;;-1:-1:-1;;;;;2281:6:1;:13;724:66:23;510:33:1;;-1:-1:-1;;;;;;;;;;;510:33:1;;;;;;;;;;;589:48;;;;;;;;;;;;;;;;;;;;2281:28;;;;;;;;-1:-1:-1;;;2281:28:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;2327:18:1;;;;2319:27;;;;;;2388:6;;-1:-1:-1;;;;;2388:6:1;:13;841:66:23;228:27:28;;;;;;;;;;;;;;685:40:1;;;;;;;;;;;;;;;;;;;;2388:30;;;;;;;;-1:-1:-1;;;2388:30:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;2437:28:1;;;;2429:37;;;;;;2520:6;;2508:37;;-1:-1:-1;;;;;2520:6:1;510:33;;-1:-1:-1;;;;;;;;;;;510:33:1;;;;;;;;;;;2508:11;:37::i;:::-;2477:69;;2556:14;-1:-1:-1;;;;;2556:37:1;;2602:9;2556:57;;-1:-1:-1;;;2556:57:1;;;;;;-1:-1:-1;;;;;2556:57:1;;;;;;;;;-1:-1:-1;2556:57:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2636:14;-1:-1:-1;;;;;2636:25:1;;2675:5;2694:4;2720:9;2744:14;2772:1;2809:9;2636:193;;;;;;;;-1:-1:-1;;;2636:193:1;;;;;;-1:-1:-1;;;;;2636:193:1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2624:205:1;;2038:800;;;;;;;;:::o;349:2491::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1782400",
              "executionCost": "22408",
              "totalCost": "1804808"
            },
            "external": {
              "ACL_APP()": "500",
              "ACL_APP_ID()": "544",
              "APM_NODE()": "236",
              "APP_ADDR_NAMESPACE()": "280",
              "APP_BASES_NAMESPACE()": "654",
              "CORE_NAMESPACE()": "390",
              "ETH()": "512",
              "ETH_NODE()": "566",
              "KERNEL_APP()": "324",
              "KERNEL_APP_ID()": "258",
              "LP_APP_ID()": "418",
              "LP_APP_INSTANCE()": "633",
              "MILESTONE_APP()": "infinite",
              "MILESTONE_APP_ID()": "infinite",
              "VAULT_APP_ID()": "682",
              "allowRecoverability(address)": "501",
              "getRecoveryVault()": "infinite",
              "kernel()": "985",
              "newAppProxy(address,bytes32)": "infinite",
              "newAppProxy(address,bytes32,bytes)": "infinite",
              "newAppProxyPinned(address,bytes32)": "infinite",
              "newAppProxyPinned(address,bytes32,bytes)": "infinite",
              "newMilestone(string,string,uint64,address,address,address,address,uint256,address,uint256)": "infinite",
              "transferToVault(address)": "infinite"
            },
            "internal": {
              "_deployMilestone(string memory,string memory,uint64)": "infinite"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH()": "8322fff2",
            "ETH_NODE()": "cc473be3",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "LP_APP_ID()": "30744267",
            "LP_APP_INSTANCE()": "8eab4b59",
            "MILESTONE_APP()": "22492642",
            "MILESTONE_APP_ID()": "b1df096c",
            "VAULT_APP_ID()": "d2dd420f",
            "allowRecoverability(address)": "7e7db6e1",
            "getRecoveryVault()": "32f0a3b5",
            "kernel()": "d4aae0c4",
            "newAppProxy(address,bytes32)": "e156a8f3",
            "newAppProxy(address,bytes32,bytes)": "ede658b0",
            "newAppProxyPinned(address,bytes32)": "ff289fc5",
            "newAppProxyPinned(address,bytes32,bytes)": "d162f8b0",
            "newMilestone(string,string,uint64,address,address,address,address,uint256,address,uint256)": "ed4e08c9",
            "transferToVault(address)": "9d4941d8"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MILESTONE_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LP_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LP_APP_INSTANCE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MILESTONE_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAULT_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_url\",\"type\":\"string\"},{\"name\":\"_parentProject\",\"type\":\"uint64\"},{\"name\":\"_reviewer\",\"type\":\"address\"},{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_campaignReviewer\",\"type\":\"address\"},{\"name\":\"_milestoneManager\",\"type\":\"address\"},{\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"name\":\"_acceptedToken\",\"type\":\"address\"},{\"name\":\"_reviewTimeoutSeconds\",\"type\":\"uint256\"}],\"name\":\"newMilestone\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"milestone\",\"type\":\"address\"}],\"name\":\"DeployMilestone\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isUpgradeable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"appId\",\"type\":\"bytes32\"}],\"name\":\"NewAppProxy\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"./contracts/LPPCappedMilestoneFactory.sol\":\"LPPCappedMilestoneFactory\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"./contracts/LPPCappedMilestone.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n/*\\n    Copyright 2017\\n    RJ Ewing <perissology@protonmail.com>\\n    S van Heummen <satya.vh@gmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"giveth-liquidpledging/contracts/LiquidPledging.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/kernel/IKernel.sol\\\";\\n\\n\\n/// @title LPPCappedMilestone\\n/// @author RJ Ewing<perissology@protonmail.com>\\n/// @notice The LPPCappedMilestone contract is a plugin contract for liquidPledging,\\n///  extending the functionality of a liquidPledging project. This contract\\n///  prevents withdrawals from any pledges this contract is the owner of.\\n///  This contract has 4 roles. The admin, a reviewer, and a recipient role. \\n///\\n///  1. The admin can cancel the milestone, update the conditions the milestone accepts transfers\\n///  and send a tx as the milestone. \\n///  2. The reviewer can cancel the milestone. \\n///  3. The recipient role will receive the pledge's owned by this milestone. \\n\\ncontract LPPCappedMilestone is AragonApp {\\n    uint constant TO_OWNER = 256;\\n    uint constant TO_INTENDEDPROJECT = 511;\\n\\n    LiquidPledging public liquidPledging;\\n    uint64 public idProject;\\n\\n    address public reviewer;\\n    address public newReviewer;    \\n    address public recipient;\\n    address public newRecipient;\\n    address public campaignReviewer;\\n    address public newCampaignReviewer;\\n    address public milestoneManager;\\n    address public acceptedToken;\\n    uint public maxAmount;\\n    uint public received = 0;\\n    bool public requestComplete;\\n    bool public completed;\\n\\n    // @notice After marking complete, and after this timeout, the recipient can withdraw the money\\n    // even if the milestone was not marked as complete.\\n    // Must be set in seconds.\\n    uint public reviewTimeoutSeconds;\\n    uint public reviewTimeout = 0;\\n\\n    event MilestoneCompleteRequested(address indexed liquidPledging, uint64 indexed idProject);\\n    event MilestoneCompleteRequestRejected(address indexed liquidPledging, uint64 indexed idProject);\\n    event MilestoneCompleteRequestApproved(address indexed liquidPledging, uint64 indexed idProject);\\n\\n    event MilestoneChangeReviewerRequested(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n    event MilestoneReviewerChanged(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n\\n    event MilestoneChangeCampaignReviewerRequested(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n    event MilestoneCampaignReviewerChanged(address indexed liquidPledging, uint64 indexed idProject, address reviewer);\\n\\n    event MilestoneChangeRecipientRequested(address indexed liquidPledging, uint64 indexed idProject, address recipient);\\n    event MilestoneRecipientChanged(address indexed liquidPledging, uint64 indexed idProject, address recipient);\\n\\n    event PaymentCollected(address indexed liquidPledging, uint64 indexed idProject, uint indexed amount);\\n\\n\\n    modifier onlyReviewer() {\\n        require(msg.sender == reviewer);\\n        _;\\n    }\\n\\n    modifier onlyCampaignReviewer() {\\n        require(msg.sender == campaignReviewer);\\n        _;\\n    }\\n\\n    modifier onlyManagerOrRecipient() {\\n        require(msg.sender == milestoneManager || msg.sender == recipient);\\n        _;\\n    }   \\n\\n    modifier checkReviewTimeout() { \\n        if (!completed && reviewTimeout > 0 && now > reviewTimeout) {\\n            completed = true;\\n        }\\n        require(completed);\\n        _; \\n    }\\n    \\n    //== constructor\\n\\n    // @notice we pass in the idProject here because it was throwing stack too deep error\\n    function initialize(\\n        address _reviewer,\\n        address _campaignReviewer,\\n        address _recipient,\\n        address _milestoneManager,\\n        uint _reviewTimeoutSeconds,\\n        uint _maxAmount,\\n        address _acceptedToken,\\n        // if these params are at the beginning, we get a stack too deep error\\n        address _liquidPledging,\\n        uint64 _idProject\\n    ) onlyInit external\\n    {\\n        require(_reviewer != 0);        \\n        require(_campaignReviewer != 0);\\n        require(_recipient != 0);\\n        require(_milestoneManager != 0);\\n        require(_liquidPledging != 0);\\n        initialized();\\n\\n        idProject = _idProject;\\n        liquidPledging = LiquidPledging(_liquidPledging);\\n\\n        var ( , addr, , , , , , plugin) = liquidPledging.getPledgeAdmin(idProject);\\n        require(addr == address(this) && plugin == address(this));\\n\\n        maxAmount = _maxAmount;\\n        acceptedToken = _acceptedToken;\\n        reviewer = _reviewer;        \\n        recipient = _recipient;\\n        reviewTimeoutSeconds = _reviewTimeoutSeconds;\\n        campaignReviewer = _campaignReviewer;\\n        milestoneManager = _milestoneManager;        \\n    }\\n\\n    //== external\\n\\n    // don't allow cancel if the milestone is completed\\n    function isCanceled() public constant returns (bool) {\\n        return liquidPledging.isProjectCanceled(idProject);\\n    }\\n\\n    // @notice Milestone manager can request to mark a milestone as completed\\n    // When he does, the timeout is initiated. So if the reviewer doesn't\\n    // handle the request in time, the recipient can withdraw the funds\\n    function requestMarkAsComplete() onlyManagerOrRecipient external {\\n        require(!isCanceled());\\n        require(!requestComplete);\\n\\n        requestComplete = true;\\n        MilestoneCompleteRequested(liquidPledging, idProject);        \\n        \\n        // start the review timeout\\n        reviewTimeout = now + reviewTimeoutSeconds;    \\n    }\\n\\n    // @notice The reviewer can reject a completion request from the milestone manager\\n    // When he does, the timeout is reset.\\n    function rejectCompleteRequest() onlyReviewer external {\\n        require(!isCanceled());\\n\\n        // reset \\n        completed = false;\\n        requestComplete = false;\\n        reviewTimeout = 0;\\n        MilestoneCompleteRequestRejected(liquidPledging, idProject);\\n    }   \\n\\n    // @notice The reviewer can approve a completion request from the milestone manager\\n    // When he does, the milestone's state is set to completed and the funds can be\\n    // withdrawn by the recipient.\\n    function approveMilestoneCompleted() onlyReviewer external {\\n        require(!isCanceled());\\n\\n        completed = true;\\n        MilestoneCompleteRequestApproved(liquidPledging, idProject);         \\n    }\\n\\n    // @notice The reviewer and the milestone manager can cancel a milestone.\\n    function cancelMilestone() external {\\n        require(msg.sender == milestoneManager || msg.sender == reviewer);\\n        require(!isCanceled());\\n\\n        liquidPledging.cancelProject(idProject);\\n    }    \\n\\n    // @notice The reviewer can request changing a reviewer.\\n    function requestChangeReviewer(address _newReviewer) onlyReviewer external {\\n        newReviewer = _newReviewer;\\n\\n        MilestoneChangeReviewerRequested(liquidPledging, idProject, newReviewer);                 \\n    }    \\n\\n    // @notice The new reviewer needs to accept the request from the old\\n    // reviewer to become the new reviewer.\\n    // @dev There's no point in adding a rejectNewReviewer because as long as\\n    // the new reviewer doesn't accept, the old reviewer remains the reviewer.    \\n    function acceptNewReviewerRequest() external {\\n        require(newReviewer == msg.sender);\\n\\n        reviewer = newReviewer;\\n        newReviewer = 0;\\n\\n        MilestoneReviewerChanged(liquidPledging, idProject, reviewer);         \\n    }  \\n\\n    // @notice The campaign reviewer can request changing a campaign reviewer.\\n    function requestChangeCampaignReviewer(address _newCampaignReviewer) onlyCampaignReviewer external {\\n        newCampaignReviewer = _newCampaignReviewer;\\n\\n        MilestoneChangeCampaignReviewerRequested(liquidPledging, idProject, newReviewer);                 \\n    }    \\n\\n    // @notice The new campaign reviewer needs to accept the request from the old\\n    // campaign reviewer to become the new campaign reviewer.\\n    // @dev There's no point in adding a rejectNewCampaignReviewer because as long as\\n    // the new reviewer doesn't accept, the old reviewer remains the reviewer.    \\n    function acceptNewCampaignReviewerRequest() external {\\n        require(newCampaignReviewer == msg.sender);\\n\\n        campaignReviewer = newCampaignReviewer;\\n        newCampaignReviewer = 0;\\n\\n        MilestoneCampaignReviewerChanged(liquidPledging, idProject, reviewer);         \\n    }  \\n\\n    // @notice The recipient can request changing recipient.\\n    // @dev There's no point in adding a rejectNewRecipient because as long as\\n    // the new recipient doesn't accept, the old recipient remains the recipient.\\n    function requestChangeRecipient(address _newRecipient) onlyReviewer external {\\n        newRecipient = _newRecipient;\\n\\n        MilestoneChangeRecipientRequested(liquidPledging, idProject, newRecipient);                 \\n    }\\n\\n    // @notice The new recipient needs to accept the request from the old\\n    // recipient to become the new recipient.\\n    function acceptNewRecipient() external {\\n        require(newRecipient == msg.sender);\\n\\n        recipient = newRecipient;\\n        newRecipient = 0;\\n\\n        MilestoneRecipientChanged(liquidPledging, idProject, recipient);         \\n\\n    }     \\n\\n    /// @dev this is called by liquidPledging before every transfer to and from\\n    ///      a pledgeAdmin that has this contract as its plugin\\n    /// @dev see ILiquidPledgingPlugin interface for details about context param\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) external returns (uint maxAllowed)\\n    {\\n        require(msg.sender == address(liquidPledging));\\n        \\n        // only accept that token\\n        if (token != acceptedToken) {\\n            return 0;\\n        }\\n\\n        var (, , , fromIntendedProject, , , ,) = liquidPledging.getPledge(pledgeFrom);\\n        var (, toOwner, , , , , ,toPledgeState) = liquidPledging.getPledge(pledgeTo);\\n\\n        // if m is the intendedProject, make sure m is still accepting funds (not completed or canceled)\\n        if (context == TO_INTENDEDPROJECT) {\\n            // don't need to check if canceled b/c lp does this\\n            if (completed) {\\n                return 0;\\n            }\\n        // if the pledge is being transferred to m and is in the Pledged state, make\\n        // sure m is still accepting funds (not completed or canceled)\\n        } else if (context == TO_OWNER &&\\n            (fromIntendedProject != toOwner &&\\n                toPledgeState == LiquidPledgingStorage.PledgeState.Pledged)) {\\n            //TODO what if milestone isn't initialized? should we throw?\\n            // this can happen if someone adds a project through lp with this contracts address as the plugin\\n            // we can require(maxAmount > 0);\\n            // don't need to check if canceled b/c lp does this\\n            if (completed) {\\n                return 0;\\n            }\\n        }\\n        return amount;\\n    }\\n\\n    /// @dev this is called by liquidPledging after every transfer to and from\\n    ///      a pledgeAdmin that has this contract as its plugin\\n    /// @dev see ILiquidPledgingPlugin interface for details about context param\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) external\\n    {\\n        require(msg.sender == address(liquidPledging));\\n\\n        var (, fromOwner, , , , , ,) = liquidPledging.getPledge(pledgeFrom);\\n        var (, toOwner, , , , , , ) = liquidPledging.getPledge(pledgeTo);\\n\\n        if (context == TO_OWNER) {\\n            // If fromOwner != toOwner, the means that a pledge is being committed to\\n            // milestone. We will accept any amount up to m.maxAmount, and return\\n            // the rest\\n            if (fromOwner != toOwner) {\\n                uint returnFunds = 0;\\n                uint newBalance = received + amount;\\n\\n                // milestone is no longer accepting new funds\\n                if (completed) {\\n                    returnFunds = amount;\\n                } else if (newBalance > maxAmount) {\\n                    returnFunds = newBalance - maxAmount;\\n                    received = maxAmount;\\n                } else {\\n                    received = received + amount;\\n                }\\n\\n                // send any exceeding funds back\\n                if (returnFunds > 0) {\\n                    liquidPledging.cancelPledge(pledgeTo, returnFunds);\\n                }\\n            }\\n        }\\n    }\\n\\n    // @notice Allows the recipient or milestoneManager to initiate withdraw from\\n    // the vault to this milestone. If the vault is autoPay, this will disburse the\\n    // payment to the recipient\\n    // Checks if reviewTimeout has passed, if so, sets completed to yes\\n    function mWithdraw(uint[] pledgesAmounts) onlyManagerOrRecipient checkReviewTimeout external {\\n        liquidPledging.mWithdraw(pledgesAmounts);\\n        _disburse();\\n    }\\n\\n    // @notice Allows the recipient or milestoneManager to initiate withdraw of a single pledge, from\\n    // the vault to this milestone. If the vault is autoPay, this will disburse the payment to the\\n    // recipient\\n    // Checks if reviewTimeout has passed, if so, sets completed to yes\\n    function withdraw(uint64 idPledge, uint amount) onlyManagerOrRecipient checkReviewTimeout external {\\n        liquidPledging.withdraw(idPledge, amount);\\n        _disburse();\\n    }\\n\\n    // @notice Allows the recipient or milestoneManager to disburse funds to the recipient\\n    function disburse() onlyManagerOrRecipient checkReviewTimeout external {\\n        _disburse();\\n    }\\n\\n    /**\\n    * @dev By default, AragonApp will allow anyone to call transferToVault\\n    *      We need to blacklist the `acceptedToken`\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return token != acceptedToken;\\n    }\\n\\n\\n    /**\\n    * @notice Pays out the balance of this milestone. Checks for native or ERC20 token\\n    */\\n    function _disburse() internal {\\n        uint amount;\\n\\n        // check for ether or token\\n        if (acceptedToken == ETH) {\\n            amount = this.balance;\\n            require(recipient.send(amount));\\n        } else {\\n            ERC20 milestoneToken = ERC20(acceptedToken);\\n\\n            amount = milestoneToken.balanceOf(this);\\n            require(milestoneToken.transfer(recipient, amount));\\n        }\\n\\n        if (amount > 0) {\\n            PaymentCollected(liquidPledging, idProject, amount);            \\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfcebb28373084bf0fe157000466a303793d03f0abd74af12d4dfd53cbe3539e8\"},\"./contracts/LPPCappedMilestoneFactory.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./LPPCappedMilestone.sol\\\";\\nimport \\\"@aragon/os/contracts/factory/AppProxyFactory.sol\\\";\\nimport \\\"@aragon/os/contracts/kernel/Kernel.sol\\\";\\nimport \\\"@aragon/os/contracts/common/VaultRecoverable.sol\\\";\\nimport \\\"giveth-liquidpledging/contracts/LiquidPledging.sol\\\";\\nimport \\\"giveth-liquidpledging/contracts/LPConstants.sol\\\";\\n\\n\\ncontract LPPCappedMilestoneFactory is LPConstants, VaultRecoverable, AppProxyFactory {\\n    Kernel public kernel;\\n\\n    bytes32 constant public MILESTONE_APP_ID = keccak256(\\\"lpp-capped-milestone\\\");\\n    bytes32 constant public MILESTONE_APP = keccak256(APP_BASES_NAMESPACE, MILESTONE_APP_ID);\\n    bytes32 constant public LP_APP_INSTANCE = keccak256(APP_ADDR_NAMESPACE, LP_APP_ID);\\n\\n    event DeployMilestone(address milestone);\\n\\n    function LPPCappedMilestoneFactory(address _kernel) public {\\n        // note: this contract will need CREATE_PERMISSIONS_ROLE on the ACL\\n        // and the PLUGIN_MANAGER_ROLE on liquidPledging,\\n        // the MILESTONE_APP and LP_APP_INSTANCE need to be registered with the kernel\\n\\n        require(_kernel != 0x0);\\n        kernel = Kernel(_kernel);\\n    }\\n\\n    function newMilestone(\\n        string _name,\\n        string _url,\\n        uint64 _parentProject,\\n        address _reviewer,\\n        address _recipient,\\n        address _campaignReviewer,\\n        address _milestoneManager,\\n        uint _maxAmount,\\n        address _acceptedToken,        \\n        uint _reviewTimeoutSeconds\\n    ) public\\n    {\\n        var (liquidPledging, milestone, idProject) = _deployMilestone(_name, _url, _parentProject);\\n        milestone.initialize(\\n            _reviewer,\\n            _campaignReviewer,\\n            _recipient,\\n            _milestoneManager,\\n            _reviewTimeoutSeconds,\\n            _maxAmount,\\n            _acceptedToken,\\n            liquidPledging,\\n            idProject\\n        );\\n\\n        DeployMilestone(address(milestone));\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        return kernel.getRecoveryVault();\\n    }\\n\\n    function _deployMilestone(\\n        string _name, \\n        string _url, \\n        uint64 _parentProject\\n    ) internal returns(LiquidPledging liquidPledging, LPPCappedMilestone milestone, uint64 idProject) \\n    {\\n        address milestoneBase = kernel.getApp(MILESTONE_APP);\\n        require(milestoneBase != 0);\\n        liquidPledging = LiquidPledging(kernel.getApp(LP_APP_INSTANCE));\\n        require(address(liquidPledging) != 0);\\n\\n        milestone = LPPCappedMilestone(newAppProxy(kernel, MILESTONE_APP_ID));\\n        liquidPledging.addValidPluginInstance(address(milestone));\\n\\n        idProject = liquidPledging.addProject(\\n            _name,\\n            _url,\\n            address(milestone),\\n            _parentProject,\\n            0,\\n            ILiquidPledgingPlugin(milestone)\\n        );  \\n    }\\n}\\n\",\"keccak256\":\"0x4ebab9d5e5c19e23df830c46f1a4459b5b7e8fcdc7be8ff076a525eb8bd3fba8\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelStorage.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        kernel = _kernel;\\n        appId = _appId;\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\\n    }\\n}\\n\",\"keccak256\":\"0xc084b7b69ae72fb0dcbbf426517aa65fd5842309dea77831a993d0f5fff01c10\"},\"@aragon/os/contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n        pinnedCode = getAppBase(appId);\\n        require(pinnedCode != address(0));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode;\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n}\\n\",\"keccak256\":\"0x5a18cba7c2b3f0118516dae74e05ca95ffa7d845353869609db41173660ebdc9\"},\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0x399a61bef2ea0035edf7adc57f731620bc2f6d044e715ac6f894e51e16d3f1b9\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 constant public FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        delegatedFwd(_dst, _calldata, 0);\\n    }\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    * @param _minReturnSize Minimum size the call needs to return, if less than that it will revert\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata, uint256 _minReturnSize) internal {\\n        require(isContract(_dst));\\n        uint256 size;\\n        uint256 result;\\n        uint256 fwd_gas_limit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            size := returndatasize\\n        }\\n\\n        require(size >= _minReturnSize);\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc08eb0dec7d649648c9e15f7d3906fc979f62b6cb7cccc6553d6bf4d2ed2f63a\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () payable public {\\n        // send / transfer\\n        if (msg.gas < FWD_GAS_LIMIT) {\\n            require(msg.value > 0 && msg.data.length == 0);\\n            ProxyDeposit(msg.sender, msg.value);\\n        } else { // all calls except for send or transfer\\n            address target = implementation();\\n            delegatedFwd(target, msg.data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91bf6e5fa17af2d12f5923d5da45a42de8a1b75a54d466705a3140fc3606db18\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/factory/AppProxyFactory.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x472a3f313ca8ecdb36f6c1a0fd7eeb829c2c4d1d7c040edf6808dfa42e104eaf\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/kernel/Kernel.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\n\\n\\ncontract Kernel is IKernel, KernelStorage, Initializable, IsContract, AppProxyFactory, ACLSyntaxSugar, VaultRecoverable {\\n    // Hardocde constant to save gas\\n    //bytes32 constant public APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    //bytes32 constant public DEFAULT_VAULT_ID = keccak256(APP_ADDR_NAMESPACE, apmNamehash(\\\"vault\\\"));\\n    bytes32 constant public APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n    bytes32 constant public DEFAULT_VAULT_ID = 0x4214e5fd6d0170d69ea641b5614f5093ebecc9928af51e95685c87617489800e;\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _baseAcl, address _permissionsCreator) onlyInit public {\\n        initialized();\\n\\n        IACL acl = IACL(newAppProxy(this, ACL_APP_ID));\\n\\n        _setApp(APP_BASES_NAMESPACE, ACL_APP_ID, _baseAcl);\\n        _setApp(APP_ADDR_NAMESPACE, ACL_APP_ID, acl);\\n\\n        acl.initialize(_permissionsCreator);\\n\\n        recoveryVaultId = DEFAULT_VAULT_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        return newAppInstance(_name, _appBase, false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _name, address _appBase, bool _setDefault) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\\n        appProxy = newAppProxy(this, _name);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(APP_ADDR_NAMESPACE, _name, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        return newPinnedAppInstance(_name, _appBase, false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _name, address _appBase, bool _setDefault) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\\n        appProxy = newAppProxyPinned(this, _name);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(APP_ADDR_NAMESPACE, _name, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _name Name of the app\\n    * @param _app Address of the app\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _name, address _app) auth(APP_MANAGER_ROLE, arr(_namespace, _name)) kernelIntegrity public returns (bytes32 id) {\\n        return _setApp(_namespace, _name, _app);\\n    }\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _id App identifier\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _id) public view returns (address) {\\n        return apps[_id];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[recoveryVaultId];\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _name Name of the app\\n    */\\n    function setRecoveryVaultId(bytes32 _name) auth(APP_MANAGER_ROLE, arr(APP_ADDR_NAMESPACE, _name)) public {\\n        recoveryVaultId = keccak256(APP_ADDR_NAMESPACE, _name);\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(ACL_APP));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        return acl().hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\\n        require(isContract(_app));\\n        id = keccak256(_namespace, _name);\\n        apps[id] = _app;\\n        SetApp(_namespace, _name, id, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\\n        require(isContract(_app));\\n\\n        id = keccak256(_namespace, _name);\\n\\n        address app = getApp(id);\\n        if (app != address(0)) {\\n            require(app == _app);\\n        } else {\\n            apps[id] = _app;\\n            SetApp(_namespace, _name, id, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory params) {\\n        bytes memory how;\\n        uint256 byteLength = params.length * 32;\\n        assembly {\\n            how := params // forced casting\\n            mstore(how, byteLength)\\n        }\\n        // Params is invalid from this point fwd\\n        require(hasPermission(msg.sender, address(this), _role, how));\\n        _;\\n    }\\n\\n    modifier kernelIntegrity {\\n        _; // After execution check integrity\\n        address kernel = getApp(KERNEL_APP);\\n        uint256 size;\\n        assembly { size := extcodesize(kernel) }\\n        require(size > 0);\\n    }\\n}\\n\",\"keccak256\":\"0x924bb490f4f12d54806b512aeb107f22443c7138f229b087da06938364ae702b\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ERCProxy {\\n    uint256 constant public FORWARDING = 1;\\n    uint256 constant public UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xba656dc63cdfe99f80d29e0a4e15538e7915aada88ba52967a1de063225611ca\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LPConstants.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"@aragon/os/contracts/kernel/KernelStorage.sol\\\";\\n\\ncontract LPConstants is KernelConstants {\\n    bytes32 constant public VAULT_APP_ID = keccak256(\\\"vault\\\");\\n    bytes32 constant public LP_APP_ID = keccak256(\\\"liquidPledging\\\");\\n}\",\"keccak256\":\"0x558e8800a807b65c952c7d731ca1c5c42539d734df4d545f801ecff0f0cd2314\"},\"giveth-liquidpledging/contracts/LiquidPledging.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n    Arthur Lunn, Satya van Heummen <satya.vh@gmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingBase.sol\\\";\\n\\n/// @dev `LiquidPledging` allows for liquid pledging through the use of\\n///  internal id structures and delegate chaining. All basic operations for\\n///  handling liquid pledging are supplied as well as plugin features\\n///  to allow for expanded functionality.\\ncontract LiquidPledging is LiquidPledgingBase {\\n\\n    /// @notice Make a donation in Ether, basically forwarding to addGiverAndDonate method,\\n    ///  setting msg.sender as the \\\"giver\\\" of this donation\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project    \\n    function addGiverAndDonate(uint64 idReceiver)\\n        public\\n        payable\\n    {\\n        addGiverAndDonate(idReceiver, msg.sender, ETH, msg.value);\\n    }\\n\\n    /// @notice Make a donation in Ether on behalf of another Giver\\n    ///  basically forwarding to addGiverAndDonate method\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param donorAddress The address of the \\\"giver\\\" of this donation    \\n    function addGiverAndDonate(uint64 idReceiver, address donorAddress)\\n        public\\n        payable\\n    {\\n        addGiverAndDonate(idReceiver, donorAddress, ETH, msg.value);\\n    }    \\n\\n    /// Create a \\\"giver\\\" pledge admin for the sender & donate \\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function addGiverAndDonate(uint64 idReceiver, address token, uint amount)\\n        public\\n    {\\n        addGiverAndDonate(idReceiver, msg.sender, token, amount);\\n    }\\n\\n    /// Create a \\\"giver\\\" pledge admin for the given `donorAddress` & donate \\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param donorAddress The address of the \\\"giver\\\" of this donation\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function addGiverAndDonate(uint64 idReceiver, address donorAddress, address token, uint amount)\\n        public\\n    {\\n        require(donorAddress != 0);\\n        // default to a 3 day (259200 seconds) commitTime\\n        uint64 idGiver = addGiver(donorAddress, \\\"\\\", \\\"\\\", 259200, ILiquidPledgingPlugin(0));\\n        donate(idGiver, idReceiver, token, amount);\\n    }\\n\\n    /// @notice Make a donation in Ether, basically forwarding to donate method\\n    ///  setting the msg.sender as the \\\"giver\\\" of the donation\\n    /// @param idGiver The id of the Giver donating\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    function donate(uint64 idGiver, uint64 idReceiver)\\n        public\\n        payable\\n    {\\n        donate(idGiver, idReceiver, ETH, msg.value);\\n    }\\n\\n    /// @notice This is how value enters the system and how pledges are created;\\n    ///  the ether is sent to the vault, a pledge for the Giver is created (or\\n    ///  found), the amount of ETH donated in wei is added to the `amount` in\\n    ///  the Giver's Pledge, and an LP transfer is done to the idReceiver for\\n    ///  the full amount\\n    /// @param idGiver The id of the Giver donating\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function donate(uint64 idGiver, uint64 idReceiver, address token, uint amount)\\n        public\\n    {\\n        require(idGiver > 0); // prevent burning donations. idReceiver is checked in _transfer\\n        require(amount > 0);\\n\\n        PledgeAdmin storage sender = _findAdmin(idGiver);\\n        require(sender.adminType == PledgeAdminType.Giver);\\n\\n        // transfer ether or token to the `vault`\\n        if (token == ETH) {\\n            vault.transfer(amount);\\n        } else {\\n            require(ERC20(token).transferFrom(msg.sender, address(vault), amount));\\n        }\\n\\n        uint64 idPledge = _findOrCreatePledge(\\n            idGiver,\\n            new uint64[](0), // Creates empty array for delegationChain\\n            0,\\n            0,\\n            0,\\n            token,\\n            PledgeState.Pledged\\n        );\\n\\n        Pledge storage pTo = _findPledge(idPledge);\\n        pTo.amount += amount;\\n\\n        Transfer(0, idPledge, amount);\\n\\n        _transfer(idGiver, idPledge, amount, idReceiver);\\n    }\\n\\n    /// @notice Transfers amounts between pledges for internal accounting\\n    /// @param idSender Id of the Admin that is transferring the amount from\\n    ///  Pledge to Pledge; this admin must have permissions to move the value\\n    /// @param idPledge Id of the pledge that's moving the value\\n    /// @param amount Quantity of ETH (in wei) that this pledge is transferring \\n    ///  the authority to withdraw from the vault\\n    /// @param idReceiver Destination of the `amount`, can be a Giver/Project sending\\n    ///  to a Giver, a Delegate or a Project; a Delegate sending to another\\n    ///  Delegate, or a Delegate pre-commiting it to a Project \\n    function transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) public\\n    {\\n        _checkAdminOwner(idSender);\\n        _transfer(idSender, idPledge, amount, idReceiver);\\n    }\\n\\n    /// @notice Authorizes a payment be made from the `vault` can be used by the\\n    ///  Giver to veto a pre-committed donation from a Delegate to an\\n    ///  intendedProject\\n    /// @param idPledge Id of the pledge that is to be redeemed into ether\\n    /// @param amount Quantity of ether (in wei) to be authorized\\n    function withdraw(uint64 idPledge, uint amount) public {\\n        idPledge = normalizePledge(idPledge); // Updates pledge info \\n\\n        Pledge storage p = _findPledge(idPledge);\\n        require(p.pledgeState == PledgeState.Pledged);\\n        _checkAdminOwner(p.owner);\\n\\n        uint64 idNewPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Paying\\n        );\\n\\n        _doTransfer(idPledge, idNewPledge, amount);\\n\\n        PledgeAdmin storage owner = _findAdmin(p.owner);\\n        vault.authorizePayment(bytes32(idNewPledge), owner.addr, p.token, amount);\\n    }\\n\\n    /// @notice `onlyVault` Confirms a withdraw request changing the PledgeState\\n    ///  from Paying to Paid\\n    /// @param idPledge Id of the pledge that is to be withdrawn\\n    /// @param amount Quantity of ether (in wei) to be withdrawn\\n    function confirmPayment(uint64 idPledge, uint amount) public onlyVault {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.pledgeState == PledgeState.Paying);\\n\\n        uint64 idNewPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Paid\\n        );\\n\\n        _doTransfer(idPledge, idNewPledge, amount);\\n    }\\n\\n    /// @notice `onlyVault` Cancels a withdraw request, changing the PledgeState\\n    ///  from Paying back to Pledged\\n    /// @param idPledge Id of the pledge that's withdraw is to be canceled\\n    /// @param amount Quantity of ether (in wei) to be canceled\\n    function cancelPayment(uint64 idPledge, uint amount) public onlyVault {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.pledgeState == PledgeState.Paying);\\n\\n        // When a payment is canceled, never is assigned to a project.\\n        uint64 idOldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n\\n        idOldPledge = normalizePledge(idOldPledge);\\n\\n        _doTransfer(idPledge, idOldPledge, amount);\\n    }\\n\\n    /// @notice Changes the `project.canceled` flag to `true`; cannot be undone\\n    /// @param idProject Id of the project that is to be canceled\\n    function cancelProject(uint64 idProject) public {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n        _checkAdminOwner(idProject);\\n        project.canceled = true;\\n\\n        CancelProject(idProject);\\n    }\\n\\n    /// @notice Transfers `amount` in `idPledge` back to the `oldPledge` that\\n    ///  that sent it there in the first place, a Ctrl-z \\n    /// @param idPledge Id of the pledge that is to be canceled\\n    /// @param amount Quantity of ether (in wei) to be transfered to the \\n    ///  `oldPledge`\\n    function cancelPledge(uint64 idPledge, uint amount) public {\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        require(p.oldPledge != 0);\\n        require(p.pledgeState == PledgeState.Pledged);\\n        _checkAdminOwner(p.owner);\\n\\n        uint64 oldPledge = _getOldestPledgeNotCanceled(p.oldPledge);\\n        _doTransfer(idPledge, oldPledge, amount);\\n    }\\n\\n\\n////////\\n// Multi pledge methods\\n////////\\n\\n    // @dev This set of functions makes moving a lot of pledges around much more\\n    // efficient (saves gas) than calling these functions in series\\n    \\n    \\n    /// @dev Bitmask used for dividing pledge amounts in Multi pledge methods\\n    uint constant D64 = 0x10000000000000000;\\n\\n    /// @notice Transfers multiple amounts within multiple Pledges in an\\n    ///  efficient single call \\n    /// @param idSender Id of the Admin that is transferring the amounts from\\n    ///  all the Pledges; this admin must have permissions to move the value\\n    /// @param pledgesAmounts An array of Pledge amounts and the idPledges with \\n    ///  which the amounts are associated; these are extrapolated using the D64\\n    ///  bitmask\\n    /// @param idReceiver Destination of the `pledesAmounts`, can be a Giver or \\n    ///  Project sending to a Giver, a Delegate or a Project; a Delegate sending\\n    ///  to another Delegate, or a Delegate pre-commiting it to a Project \\n    function mTransfer(\\n        uint64 idSender,\\n        uint[] pledgesAmounts,\\n        uint64 idReceiver\\n    ) public \\n    {\\n        for (uint i = 0; i < pledgesAmounts.length; i++ ) {\\n            uint64 idPledge = uint64(pledgesAmounts[i] & (D64-1));\\n            uint amount = pledgesAmounts[i] / D64;\\n\\n            transfer(idSender, idPledge, amount, idReceiver);\\n        }\\n    }\\n\\n    /// @notice Authorizes multiple amounts within multiple Pledges to be\\n    ///  withdrawn from the `vault` in an efficient single call \\n    /// @param pledgesAmounts An array of Pledge amounts and the idPledges with \\n    ///  which the amounts are associated; these are extrapolated using the D64\\n    ///  bitmask\\n    function mWithdraw(uint[] pledgesAmounts) public {\\n        for (uint i = 0; i < pledgesAmounts.length; i++ ) {\\n            uint64 idPledge = uint64(pledgesAmounts[i] & (D64-1));\\n            uint amount = pledgesAmounts[i] / D64;\\n\\n            withdraw(idPledge, amount);\\n        }\\n    }\\n\\n    /// @notice `mNormalizePledge` allows for multiple pledges to be\\n    ///  normalized efficiently\\n    /// @param pledges An array of pledge IDs\\n    function mNormalizePledge(uint64[] pledges) public {\\n        for (uint i = 0; i < pledges.length; i++ ) {\\n            normalizePledge(pledges[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa549270fe2f164f902b91543b5f3e0c41f1cf97a65f6a307a387534b900777e6\"},\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"},\"giveth-liquidpledging/contracts/LiquidPledgingBase.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./PledgeAdmins.sol\\\";\\nimport \\\"./Pledges.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\n/// @dev `LiquidPledgingBase` is the base level contract used to carry out\\n///  liquidPledging's most basic functions, mostly handling and searching the\\n///  data structures\\ncontract LiquidPledgingBase is AragonApp, LiquidPledgingStorage, PledgeAdmins, Pledges {\\n\\n    event Transfer(uint indexed from, uint indexed to, uint amount);\\n    event CancelProject(uint indexed idProject);\\n\\n/////////////\\n// Modifiers\\n/////////////\\n\\n    /// @dev The `vault`is the only addresses that can call a function with this\\n    ///  modifier\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault));\\n        _;\\n    }\\n\\n///////////////\\n// Constructor\\n///////////////\\n\\n    /// @param _vault The vault where the ETH backing the pledges is stored\\n    function initialize(address _vault) onlyInit public {\\n        require(_vault != 0x0);\\n        initialized();\\n\\n        vault = ILPVault(_vault);\\n\\n        admins.length = 1; // we reserve the 0 admin\\n        pledges.length = 1; // we reserve the 0 pledge\\n    }\\n\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice Getter to find Delegate w/ the Pledge ID & the Delegate index\\n    /// @param idPledge The id number representing the pledge being queried\\n    /// @param idxDelegate The index number for the delegate in this Pledge \\n    function getPledgeDelegate(uint64 idPledge, uint64 idxDelegate) external view returns(\\n        uint64 idDelegate,\\n        address addr,\\n        string name\\n    ) {\\n        Pledge storage p = _findPledge(idPledge);\\n        idDelegate = p.delegationChain[idxDelegate - 1];\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        addr = delegate.addr;\\n        name = delegate.name;\\n    }\\n\\n///////////////////\\n// Public functions\\n///////////////////\\n\\n    /// @notice Only affects pledges with the Pledged PledgeState for 2 things:\\n    ///   #1: Checks if the pledge should be committed. This means that\\n    ///       if the pledge has an intendedProject and it is past the\\n    ///       commitTime, it changes the owner to be the proposed project\\n    ///       (The UI will have to read the commit time and manually do what\\n    ///       this function does to the pledge for the end user\\n    ///       at the expiration of the commitTime)\\n    ///\\n    ///   #2: Checks to make sure that if there has been a cancellation in the\\n    ///       chain of projects, the pledge's owner has been changed\\n    ///       appropriately.\\n    ///\\n    /// This function can be called by anybody at anytime on any pledge.\\n    ///  In general it can be called to force the calls of the affected \\n    ///  plugins, which also need to be predicted by the UI\\n    /// @param idPledge This is the id of the pledge that will be normalized\\n    /// @return The normalized Pledge!\\n    function normalizePledge(uint64 idPledge) public returns(uint64) {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Check to make sure this pledge hasn't already been used \\n        // or is in the process of being used\\n        if (p.pledgeState != PledgeState.Pledged) {\\n            return idPledge;\\n        }\\n\\n        // First send to a project if it's proposed and committed\\n        if ((p.intendedProject > 0) && ( _getTime() > p.commitTime)) {\\n            uint64 oldPledge = _findOrCreatePledge(\\n                p.owner,\\n                p.delegationChain,\\n                0,\\n                0,\\n                p.oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            uint64 toPledge = _findOrCreatePledge(\\n                p.intendedProject,\\n                new uint64[](0),\\n                0,\\n                0,\\n                oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            _doTransfer(idPledge, toPledge, p.amount);\\n            idPledge = toPledge;\\n            p = _findPledge(idPledge);\\n        }\\n\\n        toPledge = _getOldestPledgeNotCanceled(idPledge);\\n        if (toPledge != idPledge) {\\n            _doTransfer(idPledge, toPledge, p.amount);\\n        }\\n\\n        return toPledge;\\n    }\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice A check to see if the msg.sender is the owner or the\\n    ///  plugin contract for a specific Admin\\n    /// @param idAdmin The id of the admin being checked\\n    function _checkAdminOwner(uint64 idAdmin) internal view {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        require(msg.sender == address(a.plugin) || msg.sender == a.addr);\\n    }\\n\\n    function _transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal\\n    {\\n        require(idReceiver > 0); // prevent burning value\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage receiver = _findAdmin(idReceiver);\\n\\n        require(p.pledgeState == PledgeState.Pledged);\\n\\n        // If the sender is the owner of the Pledge\\n        if (p.owner == idSender) {\\n\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                _transferOwnershipToGiver(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Project) {\\n                _transferOwnershipToProject(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Delegate) {\\n\\n                uint recieverDIdx = _getDelegateIdx(p, idReceiver);\\n                if (p.intendedProject > 0 && recieverDIdx != NOTFOUND) {\\n                    // if there is an intendedProject and the receiver is in the delegationChain,\\n                    // then we want to preserve the delegationChain as this is a veto of the\\n                    // intendedProject by the owner\\n\\n                    if (recieverDIdx == p.delegationChain.length - 1) {\\n                        uint64 toPledge = _findOrCreatePledge(\\n                            p.owner,\\n                            p.delegationChain,\\n                            0,\\n                            0,\\n                            p.oldPledge,\\n                            p.token,\\n                            PledgeState.Pledged);\\n                        _doTransfer(idPledge, toPledge, amount);\\n                        return;\\n                    }\\n\\n                    _undelegate(idPledge, amount, p.delegationChain.length - receiverDIdx - 1);\\n                    return;\\n                }\\n                // owner is not vetoing an intendedProject and is transferring the pledge to a delegate,\\n                // so we want to reset the delegationChain\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length\\n                );\\n                _appendDelegate(idPledge, amount, idReceiver);\\n                return;\\n            }\\n\\n            // This should never be reached as the receiver.adminType\\n            // should always be either a Giver, Project, or Delegate\\n            assert(false);\\n        }\\n\\n        // If the sender is a Delegate\\n        uint senderDIdx = _getDelegateIdx(p, idSender);\\n        if (senderDIdx != NOTFOUND) {\\n\\n            // And the receiver is another Giver\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                // Only transfer to the Giver who owns the pledge\\n                assert(p.owner == idReceiver);\\n                _undelegate(idPledge, amount, p.delegationChain.length);\\n                return;\\n            }\\n\\n            // And the receiver is another Delegate\\n            if (receiver.adminType == PledgeAdminType.Delegate) {\\n                uint receiverDIdx = _getDelegateIdx(p, idReceiver);\\n\\n                // And not in the delegationChain or part of the delegationChain\\n                // is after the sender, then all of the other delegates after \\n                // the sender are removed and the receiver is appended at the \\n                // end of the delegationChain\\n                if (receiverDIdx == NOTFOUND || receiverDIdx > senderDIdx) {\\n                    idPledge = _undelegate(\\n                        idPledge,\\n                        amount,\\n                        p.delegationChain.length - senderDIdx - 1\\n                    );\\n                    _appendDelegate(idPledge, amount, idReceiver);\\n                    return;\\n                }\\n\\n                // And is already part of the delegate chain but is before the\\n                //  sender, then the sender and all of the other delegates after\\n                //  the RECEIVER are removed from the delegationChain\\n                _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - receiverDIdx - 1\\n                );\\n                return;\\n            }\\n\\n            // And the receiver is a Project, all the delegates after the sender\\n            //  are removed and the amount is pre-committed to the project\\n            if (receiver.adminType == PledgeAdminType.Project) {\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - senderDIdx - 1\\n                );\\n                _proposeAssignProject(idPledge, amount, idReceiver);\\n                return;\\n            }\\n        }\\n        assert(false);  // When the sender is not an owner or a delegate\\n    }\\n\\n    /// @notice `transferOwnershipToProject` allows for the transfer of\\n    ///  ownership to the project, but it can also be called by a project\\n    ///  to un-delegate everyone by setting one's own id for the idReceiver\\n    /// @param idPledge the id of the pledge to be transfered.\\n    /// @param amount Quantity of value that's being transfered\\n    /// @param idReceiver The new owner of the project (or self to un-delegate)\\n    function _transferOwnershipToProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Ensure that the pledge is not already at max pledge depth\\n        // and the project has not been canceled\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 oldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,                     // Set the new owner\\n            new uint64[](0),                // clear the delegation chain\\n            0,\\n            0,\\n            oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }   \\n\\n\\n    /// @notice `transferOwnershipToGiver` allows for the transfer of\\n    ///  value back to the Giver, value is placed in a pledged state\\n    ///  without being attached to a project, delegation chain, or time line.\\n    /// @param idPledge the id of the pledge to be transferred.\\n    /// @param amount Quantity of value that's being transferred\\n    /// @param idReceiver The new owner of the pledge\\n    function _transferOwnershipToGiver(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,\\n            new uint64[](0),\\n            0,\\n            0,\\n            0,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's being chained.\\n    /// @param idReceiver The delegate to be added at the end of the chain\\n    function _appendDelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.delegationChain.length < MAX_DELEGATES);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length + 1\\n        );\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n\\n        // Make the last item in the array the idReceiver\\n        newDelegationChain[p.delegationChain.length] = idReceiver;\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's shifted from delegates.\\n    /// @param q Number (or depth) of delegates to remove\\n    /// @return toPledge The id for the pledge being adjusted or created\\n    function _undelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint q\\n    ) internal returns (uint64 toPledge)\\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length - q\\n        );\\n\\n        for (uint i = 0; i < p.delegationChain.length - q; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n        toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `proposeAssignProject` proposes the assignment of a pledge\\n    ///  to a specific project.\\n    /// @dev This function should potentially be named more specifically.\\n    /// @param idPledge the id of the pledge that will be assigned.\\n    /// @param amount Quantity of value this pledge leader would be assigned.\\n    /// @param idReceiver The project this pledge will potentially \\n    ///  be assigned to.\\n    function _proposeAssignProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            idReceiver,\\n            uint64(_getTime() + _maxCommitTime(p)),\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `doTransfer` is designed to allow for pledge amounts to be \\n    ///  shifted around internally.\\n    /// @param from This is the id of the pledge from which value will be transferred.\\n    /// @param to This is the id of the pledge that value will be transferred to.\\n    /// @param _amount The amount of value that will be transferred.\\n    function _doTransfer(uint64 from, uint64 to, uint _amount) internal {\\n        uint amount = _callPlugins(true, from, to, _amount);\\n        if (from == to) {\\n            return;\\n        }\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        Pledge storage pFrom = _findPledge(from);\\n        Pledge storage pTo = _findPledge(to);\\n\\n        require(pFrom.amount >= amount);\\n        pFrom.amount -= amount;\\n        pTo.amount += amount;\\n        require(pTo.amount >= amount);\\n\\n        Transfer(from, to, amount);\\n        _callPlugins(false, from, to, amount);\\n    }\\n\\n    /// @notice A getter to find the longest commitTime out of the owner and all\\n    ///  the delegates for a specified pledge\\n    /// @param p The Pledge being queried\\n    /// @return The maximum commitTime out of the owner and all the delegates\\n    function _maxCommitTime(Pledge p) internal view returns(uint64 commitTime) {\\n        PledgeAdmin storage a = _findAdmin(p.owner);\\n        commitTime = a.commitTime; // start with the owner's commitTime\\n\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            a = _findAdmin(p.delegationChain[i]);\\n\\n            // If a delegate's commitTime is longer, make it the new commitTime\\n            if (a.commitTime > commitTime) {\\n                commitTime = a.commitTime;\\n            }\\n        }\\n    }\\n\\n    /// @notice A getter to find the oldest pledge that hasn't been canceled\\n    /// @param idPledge The starting place to lookup the pledges\\n    /// @return The oldest idPledge that hasn't been canceled (DUH!)\\n    function _getOldestPledgeNotCanceled(\\n        uint64 idPledge\\n    ) internal view returns(uint64)\\n    {\\n        if (idPledge == 0) {\\n            return 0;\\n        }\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage admin = _findAdmin(p.owner);\\n        \\n        if (admin.adminType == PledgeAdminType.Giver) {\\n            return idPledge;\\n        }\\n\\n        assert(admin.adminType == PledgeAdminType.Project);\\n        if (!isProjectCanceled(p.owner)) {\\n            return idPledge;\\n        }\\n\\n        return _getOldestPledgeNotCanceled(p.oldPledge);\\n    }\\n\\n    /// @notice `callPlugin` is used to trigger the general functions in the\\n    ///  plugin for any actions needed before and after a transfer happens.\\n    ///  Specifically what this does in relation to the plugin is something\\n    ///  that largely depends on the functions of that plugin. This function\\n    ///  is generally called in pairs, once before, and once after a transfer.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param adminId This should be the Id of the *trusted* individual\\n    ///  who has control over this plugin.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param context The situation that is triggering the plugin. See plugin\\n    ///  for a full description of contexts.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPlugin(\\n        bool before,\\n        uint64 adminId,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        uint newAmount;\\n        allowedAmount = amount;\\n        PledgeAdmin storage admin = _findAdmin(adminId);\\n\\n        // Checks admin has a plugin assigned and a non-zero amount is requested\\n        if (address(admin.plugin) != 0 && allowedAmount > 0) {\\n            // There are two separate functions called in the plugin.\\n            // One is called before the transfer and one after\\n            if (before) {\\n                newAmount = admin.plugin.beforeTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n                require(newAmount <= allowedAmount);\\n                allowedAmount = newAmount;\\n            } else {\\n                admin.plugin.afterTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice `callPluginsPledge` is used to apply plugin calls to\\n    ///  the delegate chain and the intended project if there is one.\\n    ///  It does so in either a transferring or receiving context based\\n    ///  on the `p` and  `fromPledge` parameters.\\n    /// @param before This toggle determines whether the plugin call is occuring\\n    ///  before or after a transfer.\\n    /// @param idPledge This is the id of the pledge on which this plugin\\n    ///  is being called.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPluginsPledge(\\n        bool before,\\n        uint64 idPledge,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        // Determine if callPlugin is being applied in a receiving\\n        // or transferring context\\n        uint64 offset = idPledge == fromPledge ? 0 : 256;\\n        allowedAmount = amount;\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Always call the plugin on the owner\\n        allowedAmount = _callPlugin(\\n            before,\\n            p.owner,\\n            fromPledge,\\n            toPledge,\\n            offset,\\n            p.token,\\n            allowedAmount\\n        );\\n\\n        // Apply call plugin to all delegates\\n        for (uint64 i = 0; i < p.delegationChain.length; i++) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.delegationChain[i],\\n                fromPledge,\\n                toPledge,\\n                offset + i + 1,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n\\n        // If there is an intended project also call the plugin in\\n        // either a transferring or receiving context based on offset\\n        // on the intended project\\n        if (p.intendedProject > 0) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.intendedProject,\\n                fromPledge,\\n                toPledge,\\n                offset + 255,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice `callPlugins` calls `callPluginsPledge` once for the transfer\\n    ///  context and once for the receiving context. The aggregated \\n    ///  allowed amount is then returned.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param fromPledge This is the Id from which value is being transferred.\\n    /// @param toPledge This is the Id that value is being transferred to.\\n    /// @param amount The amount of value that is being transferred.\\n    function _callPlugins(\\n        bool before,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        allowedAmount = amount;\\n\\n        // Call the plugins in the transfer context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            fromPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n\\n        // Call the plugins in the receive context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            toPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n    }\\n\\n/////////////\\n// Test functions\\n/////////////\\n\\n    /// @notice Basic helper function to return the current time\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n}\\n\",\"keccak256\":\"0xbd10aeb8cd8834c63bb58034f93ed213ee8ed4f38682cc3808bdf1f5c7d79df3\"},\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./LiquidPledgingACLHelpers.sol\\\";\\n\\ncontract LiquidPledgingPlugins is AragonApp, LiquidPledgingStorage, LiquidPledgingACLHelpers {\\n\\n    bytes32 constant public PLUGIN_MANAGER_ROLE = keccak256(\\\"PLUGIN_MANAGER_ROLE\\\");\\n\\n    /**\\n    * @dev adds an instance of a plugin to the whitelist\\n    */\\n    function addValidPluginInstance(address addr) auth(PLUGIN_MANAGER_ROLE) external {\\n        pluginInstanceWhitelist[addr] = true;\\n    }\\n\\n    /**\\n    * @dev add a contract to the plugin whitelist.\\n    * @notice Proxy contracts should never be added using this method. Each individual\\n    *         proxy instance should be added by calling `addValidPluginInstance`\\n    */\\n    function addValidPluginContract(bytes32 contractHash) auth(PLUGIN_MANAGER_ROLE) public {\\n        pluginContractWhitelist[contractHash] = true;\\n    }\\n\\n    function addValidPluginContracts(bytes32[] contractHashes) external auth(PLUGIN_MANAGER_ROLE) {\\n        for (uint8 i = 0; i < contractHashes.length; i++) {\\n            addValidPluginContract(contractHashes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev removes a contract from the plugin whitelist\\n    */\\n    function removeValidPluginContract(bytes32 contractHash) external authP(PLUGIN_MANAGER_ROLE, arr(contractHash)) {\\n        pluginContractWhitelist[contractHash] = false;\\n    }\\n\\n    /**\\n    * @dev removes an instance of a plugin to the whitelist\\n    */\\n    function removeValidPluginInstance(address addr) external authP(PLUGIN_MANAGER_ROLE, arr(addr)) {\\n        pluginInstanceWhitelist[addr] = false;\\n    }\\n\\n    /**\\n    * @dev enable/disable the plugin whitelist.\\n    * @notice you better know what you're doing if you are going to disable it\\n    */\\n    function useWhitelist(bool useWhitelist) external auth(PLUGIN_MANAGER_ROLE) {\\n        whitelistDisabled = !useWhitelist;\\n    }\\n\\n    /**\\n    * check if the contract at the provided address is in the plugin whitelist\\n    */\\n    function isValidPlugin(address addr) public view returns(bool) {\\n        if (whitelistDisabled || addr == 0x0) {\\n            return true;\\n        }\\n\\n        // first check pluginInstances\\n        if (pluginInstanceWhitelist[addr]) {\\n            return true;\\n        }\\n\\n        // if the addr isn't a valid instance, check the contract code\\n        bytes32 contractHash = getCodeHash(addr);\\n\\n        return pluginContractWhitelist[contractHash];\\n    }\\n\\n    /**\\n    * @return the hash of the code for the given address\\n    */\\n    function getCodeHash(address addr) public view returns(bytes32) {\\n        bytes memory o_code;\\n        assembly {\\n            // retrieve the size of the code\\n            let size := extcodesize(addr)\\n            // allocate output byte array\\n            o_code := mload(0x40)\\n            mstore(o_code, size) // store length in memory\\n            // actually retrieve the code\\n            extcodecopy(addr, add(o_code, 0x20), 0, size)\\n        }\\n        return keccak256(o_code);\\n    }\\n}\",\"keccak256\":\"0x109373f81759324d3d39f0b2b8fd02072c2b0e502901c14e1b06ca91a05a5ae2\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"},\"giveth-liquidpledging/contracts/PledgeAdmins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\nimport \\\"./LiquidPledgingPlugins.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\ncontract PledgeAdmins is AragonApp, LiquidPledgingPlugins {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_SUBPROJECT_LEVEL = 20;\\n    uint constant MAX_INTERPROJECT_LEVEL = 20;\\n\\n    // Events\\n    event GiverAdded(uint64 indexed idGiver, string url);\\n    event GiverUpdated(uint64 indexed idGiver, string url);\\n    event DelegateAdded(uint64 indexed idDelegate, string url);\\n    event DelegateUpdated(uint64 indexed idDelegate, string url);\\n    event ProjectAdded(uint64 indexed idProject, string url);\\n    event ProjectUpdated(uint64 indexed idProject, string url);\\n\\n////////////////////\\n// Public functions\\n////////////////////\\n\\n    /// @notice Creates a Giver Admin with the `msg.sender` as the Admin address\\n    /// @param name The name used to identify the Giver\\n    /// @param url The link to the Giver's profile often an IPFS hash\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param plugin This is Giver's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idGiver The id number used to reference this Admin\\n    function addGiver(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idGiver)\\n    {\\n        return addGiver(\\n            msg.sender,\\n            name,\\n            url,\\n            commitTime,\\n            plugin\\n        );\\n    }\\n\\n    function addGiver(\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) public returns (uint64 idGiver)\\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idGiver = uint64(admins.length);\\n\\n        // Save the fields\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Giver,\\n                addr,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        GiverAdded(idGiver, url);\\n    }\\n\\n    /// @notice Updates a Giver's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Giver\\n    /// @param idGiver This is the Admin id number used to specify the Giver\\n    /// @param newAddr The new address that represents this Giver\\n    /// @param newName The new name used to identify the Giver\\n    /// @param newUrl The new link to the Giver's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    function updateGiver(\\n        uint64 idGiver,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage giver = _findAdmin(idGiver);\\n        require(msg.sender == giver.addr);\\n        require(giver.adminType == PledgeAdminType.Giver); // Must be a Giver\\n        giver.addr = newAddr;\\n        giver.name = newName;\\n        giver.url = newUrl;\\n        giver.commitTime = newCommitTime;\\n\\n        GiverUpdated(idGiver, newUrl);\\n    }\\n\\n    /// @notice Creates a Delegate Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Delegate\\n    /// @param url The link to the Delegate's profile often an IPFS hash\\n    /// @param commitTime Sets the length of time in seconds that this delegate\\n    ///  can be vetoed. Whenever this delegate is in a delegate chain the time\\n    ///  allowed to veto any event must be greater than or equal to this time.\\n    /// @param plugin This is Delegate's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idxDelegate The id number used to reference this Delegate within\\n    ///  the PLEDGE_ADMIN array\\n    function addDelegate(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idDelegate) \\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idDelegate = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Delegate,\\n                msg.sender,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        DelegateAdded(idDelegate, url);\\n    }\\n\\n    /// @notice Updates a Delegate's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Delegate\\n    /// @param idDelegate The Admin id number used to specify the Delegate\\n    /// @param newAddr The new address that represents this Delegate\\n    /// @param newName The new name used to identify the Delegate\\n    /// @param newUrl The new link to the Delegate's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds that this\\n    ///  delegate can be vetoed. Whenever this delegate is in a delegate chain\\n    ///  the time allowed to veto any event must be greater than or equal to\\n    ///  this time.\\n    function updateDelegate(\\n        uint64 idDelegate,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        require(msg.sender == delegate.addr);\\n        require(delegate.adminType == PledgeAdminType.Delegate);\\n        delegate.addr = newAddr;\\n        delegate.name = newName;\\n        delegate.url = newUrl;\\n        delegate.commitTime = newCommitTime;\\n\\n        DelegateUpdated(idDelegate, newUrl);\\n    }\\n\\n    /// @notice Creates a Project Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Project\\n    /// @param url The link to the Project's profile often an IPFS hash\\n    /// @param projectAdmin The address for the trusted project manager\\n    /// @param parentProject The Admin id number for the parent project or 0 if\\n    ///  there is no parentProject\\n    /// @param commitTime Sets the length of time in seconds the Project has to\\n    ///   veto when the Project delegates to another Delegate and they pledge\\n    ///   those funds to a project\\n    /// @param plugin This is Project's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idProject The id number used to reference this Admin\\n    function addProject(\\n        string name,\\n        string url,\\n        address projectAdmin,\\n        uint64 parentProject,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idProject) \\n    {\\n        require(isValidPlugin(plugin));\\n\\n        if (parentProject != 0) {\\n            PledgeAdmin storage a = _findAdmin(parentProject);\\n            // getProjectLevel will check that parentProject has a `Project` adminType\\n            require(_getProjectLevel(a) < MAX_SUBPROJECT_LEVEL);\\n        }\\n\\n        idProject = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Project,\\n                projectAdmin,\\n                commitTime,\\n                parentProject,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        ProjectAdded(idProject, url);\\n    }\\n\\n    /// @notice Updates a Project's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin or a parentProject,\\n    ///  and it must be called by the current address of the Project\\n    /// @param idProject The Admin id number used to specify the Project\\n    /// @param newAddr The new address that represents this Project\\n    /// @param newName The new name used to identify the Project\\n    /// @param newUrl The new link to the Project's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Project has\\n    ///  to veto when the Project delegates to a Delegate and they pledge those\\n    ///  funds to a project\\n    function updateProject(\\n        uint64 idProject,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n\\n        require(msg.sender == project.addr);\\n        require(project.adminType == PledgeAdminType.Project);\\n\\n        project.addr = newAddr;\\n        project.name = newName;\\n        project.url = newUrl;\\n        project.commitTime = newCommitTime;\\n\\n        ProjectUpdated(idProject, newUrl);\\n    }\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice A constant getter used to check how many total Admins exist\\n    /// @return The total number of admins (Givers, Delegates and Projects) .\\n    function numberOfPledgeAdmins() external view returns(uint) {\\n        return admins.length - 1;\\n    }\\n\\n    /// @notice A constant getter to check the details of a specified Admin\\n    /// @return addr Account or contract address for admin\\n    /// @return name Name of the pledgeAdmin\\n    /// @return url The link to the Project's profile often an IPFS hash\\n    /// @return commitTime The length of time in seconds the Admin has to veto\\n    ///   when the Admin delegates to a Delegate and that Delegate pledges those\\n    ///   funds to a project\\n    /// @return parentProject The Admin id number for the parent project or 0\\n    ///  if there is no parentProject\\n    /// @return canceled 0 for Delegates & Givers, true if a Project has been\\n    ///  canceled\\n    /// @return plugin This is Project's liquidPledging plugin allowing for\\n    ///  extended functionality\\n    function getPledgeAdmin(uint64 idAdmin) external view returns (\\n        PledgeAdminType adminType,\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        uint64 parentProject,\\n        bool canceled,\\n        address plugin\\n    ) {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        adminType = a.adminType;\\n        addr = a.addr;\\n        name = a.name;\\n        url = a.url;\\n        commitTime = a.commitTime;\\n        parentProject = a.parentProject;\\n        canceled = a.canceled;\\n        plugin = address(a.plugin);\\n    }\\n\\n    /// @notice A getter to find if a specified Project has been canceled\\n    /// @param projectId The Admin id number used to specify the Project\\n    /// @return True if the Project has been canceled\\n    function isProjectCanceled(uint64 projectId)\\n        public view returns (bool)\\n    {\\n        PledgeAdmin storage a = _findAdmin(projectId);\\n\\n        if (a.adminType == PledgeAdminType.Giver) {\\n            return false;\\n        }\\n\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.canceled) {\\n            return true;\\n        }\\n        if (a.parentProject == 0) {\\n            return false;\\n        }\\n\\n        return isProjectCanceled(a.parentProject);\\n    }\\n\\n///////////////////\\n// Internal methods\\n///////////////////\\n\\n    /// @notice A getter to look up a Admin's details\\n    /// @param idAdmin The id for the Admin to lookup\\n    /// @return The PledgeAdmin struct for the specified Admin\\n    function _findAdmin(uint64 idAdmin) internal view returns (PledgeAdmin storage) {\\n        require(idAdmin < admins.length);\\n        return admins[idAdmin];\\n    }\\n\\n    /// @notice Find the level of authority a specific Project has\\n    ///  using a recursive loop\\n    /// @param a The project admin being queried\\n    /// @return The level of authority a specific Project has\\n    function _getProjectLevel(PledgeAdmin a) internal view returns(uint64) {\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.parentProject == 0) {\\n            return(1);\\n        }\\n\\n        PledgeAdmin storage parent = _findAdmin(a.parentProject);\\n        return _getProjectLevel(parent) + 1;\\n    }\\n}\",\"keccak256\":\"0x06bc6171a12d31aaa05dce4217e107555f8289182046a0bd8da615c38faae3f5\"},\"giveth-liquidpledging/contracts/Pledges.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\n\\ncontract Pledges is AragonApp, LiquidPledgingStorage {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_DELEGATES = 10;\\n\\n    // a constant for when a delegate is requested that is not in the system\\n    uint64 constant  NOTFOUND = 0xFFFFFFFFFFFFFFFF;\\n\\n/////////////////////////////\\n// Public constant functions\\n////////////////////////////\\n\\n    /// @notice A constant getter that returns the total number of pledges\\n    /// @return The total number of Pledges in the system\\n    function numberOfPledges() external view returns (uint) {\\n        return pledges.length - 1;\\n    }\\n\\n    /// @notice A getter that returns the details of the specified pledge\\n    /// @param idPledge the id number of the pledge being queried\\n    /// @return the amount, owner, the number of delegates (but not the actual\\n    ///  delegates, the intendedProject (if any), the current commit time and\\n    ///  the previous pledge this pledge was derived from\\n    function getPledge(uint64 idPledge) external view returns(\\n        uint amount,\\n        uint64 owner,\\n        uint64 nDelegates,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState pledgeState\\n    ) {\\n        Pledge memory p = _findPledge(idPledge);\\n        amount = p.amount;\\n        owner = p.owner;\\n        nDelegates = uint64(p.delegationChain.length);\\n        intendedProject = p.intendedProject;\\n        commitTime = p.commitTime;\\n        oldPledge = p.oldPledge;\\n        token = p.token;\\n        pledgeState = p.pledgeState;\\n    }\\n\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice This creates a Pledge with an initial amount of 0 if one is not\\n    ///  created already; otherwise it finds the pledge with the specified\\n    ///  attributes; all pledges technically exist, if the pledge hasn't been\\n    ///  created in this system yet it simply isn't in the hash array\\n    ///  hPledge2idx[] yet\\n    /// @param owner The owner of the pledge being looked up\\n    /// @param delegationChain The list of delegates in order of authority\\n    /// @param intendedProject The project this pledge will Fund after the\\n    ///  commitTime has passed\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param oldPledge This value is used to store the pledge the current\\n    ///  pledge was came from, and in the case a Project is canceled, the Pledge\\n    ///  will revert back to it's previous state\\n    /// @param state The pledge state: Pledged, Paying, or state\\n    /// @return The hPledge2idx index number\\n    function _findOrCreatePledge(\\n        uint64 owner,\\n        uint64[] delegationChain,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState state\\n    ) internal returns (uint64)\\n    {\\n        bytes32 hPledge = keccak256(delegationChain, owner, intendedProject, commitTime, oldPledge, token, state);\\n        uint64 id = hPledge2idx[hPledge];\\n        if (id > 0) {\\n            return id;\\n        }\\n\\n        id = uint64(pledges.length);\\n        hPledge2idx[hPledge] = id;\\n        pledges.push(\\n            Pledge(\\n                0,\\n                delegationChain,\\n                owner,\\n                intendedProject,\\n                commitTime,\\n                oldPledge,\\n                token,\\n                state\\n            )\\n        );\\n        return id;\\n    }\\n\\n    /// @param idPledge the id of the pledge to load from storage\\n    /// @return The Pledge\\n    function _findPledge(uint64 idPledge) internal view returns(Pledge storage) {\\n        require(idPledge < pledges.length);\\n        return pledges[idPledge];\\n    }\\n\\n    /// @notice A getter that searches the delegationChain for the level of\\n    ///  authority a specific delegate has within a Pledge\\n    /// @param p The Pledge that will be searched\\n    /// @param idDelegate The specified delegate that's searched for\\n    /// @return If the delegate chain contains the delegate with the\\n    ///  `admins` array index `idDelegate` this returns that delegates\\n    ///  corresponding index in the delegationChain. Otherwise it returns\\n    ///  the NOTFOUND constant\\n    function _getDelegateIdx(Pledge p, uint64 idDelegate) internal pure returns(uint64) {\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            if (p.delegationChain[i] == idDelegate) {\\n                return uint64(i);\\n            }\\n        }\\n        return NOTFOUND;\\n    }\\n\\n    /// @notice A getter to find how many old \\\"parent\\\" pledges a specific Pledge\\n    ///  had using a self-referential loop\\n    /// @param p The Pledge being queried\\n    /// @return The number of old \\\"parent\\\" pledges a specific Pledge had\\n    function _getPledgeLevel(Pledge p) internal view returns(uint) {\\n        if (p.oldPledge == 0) {\\n            return 0;\\n        }\\n        Pledge storage oldP = _findPledge(p.oldPledge);\\n        return _getPledgeLevel(oldP) + 1; // a loop lookup\\n    }\\n}\\n\",\"keccak256\":\"0x9c7a60dff92f94d518d0c4a40d5434cd23680f79fd364ae855575ae4ca683797\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            }
          }
        }
      }
    },
    "@aragon/os/contracts/acl/ACLSyntaxSugar.sol": {
      "ACLHelpers": {
        "abi": [],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a72305820f6ead060b5271b44b9e7f74332823d8f67e3ba85d10763bdbc27d2ec01e827f90029",
            "sourceMap": "2283:456:2:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600080fd00a165627a7a72305820f6ead060b5271b44b9e7f74332823d8f67e3ba85d10763bdbc27d2ec01e827f90029",
            "sourceMap": "2283:456:2:-;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "10600",
              "executionCost": "61",
              "totalCost": "10661"
            },
            "internal": {
              "decodeParamId(uint256)": "infinite",
              "decodeParamOp(uint256)": "infinite",
              "decodeParamsList(uint256)": "infinite"
            }
          },
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":\"ACLHelpers\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      },
      "ACLSyntaxSugar": {
        "abi": [],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a72305820a703a0afe278e6821c4572b1ac35652f7e0d3179ed8bcfbb54c96ec93a712af10029",
            "sourceMap": "27:2253:2:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600080fd00a165627a7a72305820a703a0afe278e6821c4572b1ac35652f7e0d3179ed8bcfbb54c96ec93a712af10029",
            "sourceMap": "27:2253:2:-;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "10600",
              "executionCost": "61",
              "totalCost": "10661"
            },
            "internal": {
              "arr()": "infinite",
              "arr(address)": "infinite",
              "arr(address,address)": "infinite",
              "arr(address,address,address)": "infinite",
              "arr(address,address,uint256)": "infinite",
              "arr(address,address,uint256,uint256,uint256)": "infinite",
              "arr(address,uint256)": "infinite",
              "arr(address,uint256,uint256)": "infinite",
              "arr(bytes32)": "infinite",
              "arr(bytes32,bytes32)": "infinite",
              "arr(uint256)": "infinite",
              "arr(uint256,uint256)": "infinite",
              "arr(uint256,uint256,uint256)": "infinite",
              "arr(uint256,uint256,uint256,uint256)": "infinite",
              "arr(uint256,uint256,uint256,uint256,uint256)": "infinite"
            }
          },
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":\"ACLSyntaxSugar\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/acl/IACL.sol": {
      "IACL": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "permissionsCreator",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "who",
                "type": "address"
              },
              {
                "name": "where",
                "type": "address"
              },
              {
                "name": "what",
                "type": "bytes32"
              },
              {
                "name": "how",
                "type": "bytes"
              }
            ],
            "name": "hasPermission",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "hasPermission(address,address,bytes32,bytes)": "fdef9106",
            "initialize(address)": "c4d66de8"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/apps/AppProxyBase.sol": {
      "AppProxyBase": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FWD_GAS_LIMIT",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FORWARDING",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "proxyType",
            "outputs": [
              {
                "name": "proxyTypeId",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "name": "codeAddr",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "UPGRADEABLE",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "ProxyDeposit",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH_NODE()": "cc473be3",
            "FORWARDING()": "2b2584f6",
            "FWD_GAS_LIMIT()": "0ceafa2a",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "UPGRADEABLE()": "7e84a4ff",
            "appId()": "80afdea8",
            "implementation()": "5c60da1b",
            "kernel()": "d4aae0c4",
            "proxyType()": "4555d5c9"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/apps/AppProxyPinned.sol": {
      "AppProxyPinned": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FWD_GAS_LIMIT",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FORWARDING",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "proxyType",
            "outputs": [
              {
                "name": "proxyTypeId",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "UPGRADEABLE",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "ProxyDeposit",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "implementation()": {
              "details": "ERC897, the address the proxy would delegate calls to"
            },
            "proxyType()": {
              "details": "ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy"
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da0029",
            "sourceMap": "56:954:5:-;;;385:247;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;885:15:4;561:16;;-1:-1:-1;;;;;;561:16:4;-1:-1:-1;;;;;561:16:4;;;;;-1:-1:-1;587:14:4;;;385:247:5;;;561:16:4;;-1:-1:-1;587:14:4;;385:247:5;;903:17:4;587:14;903:10;;;;;;:17;:::i;:::-;885:35;;1029:1;1001:18;:25;:29;997:307;;;1054:19;1065:7;1054:10;;;;;;:19;:::i;:::-;1046:28;;;;;;;;1252:7;-1:-1:-1;;;;;1252:20:4;1273:18;1252:40;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1244:49:4;;;;;;;;463:847;;;;565:17:5;576:5;;565:10;;;;;:17;;;:::i;:::-;552:10;:30;;-1:-1:-1;;;;;;552:30:5;-1:-1:-1;;;;;552:30:5;;;;;;;;600:10;:24;;592:33;;;;;;385:247;;;56:954;;1316:145:4;1375:7;1401:6;;-1:-1:-1;;;;;1401:6:4;:13;724:66:23;1446:6:4;1415:38;;;;;;;;;;;;;;;;;;;;1401:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1316:145;-1:-1:-1;;;1316:145:4:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;56:954:5:-;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da0029",
            "sourceMap": "56:954:5:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;444:14:10;190:5:9;238:7:10;:23;234:298;;;297:1;285:9;:13;:37;;;;-1:-1:-1;302:8:10;:20;285:37;277:46;;;;;;;;337:35;350:10;362:9;337:35;;-1:-1:-1;;;;;337:35:10;;;;;;;;;;;;;;;;;;;;;234:298;;;461:16;:14;:16::i;:::-;444:33;;491:30;504:6;512:8;;491:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;491:12:10;;-1:-1:-1;;;;;491:30:10:i;:::-;170:368;56:954:5;1020:101:23;;;;;;;;;;;;;;;;;;;;;;;;;;;150:45:9;;;;;;;;;;;;1127:106:23;;;;;;;;;;;;796:111;;;;;;;;;;;;1239:103;;;;;;;;;;;;51:38:24;;;;;;;;;;;;911:97:5;;;;;;;;;;;;720:90;;;;;;;;;;;;;;;-1:-1:-1;;;;;720:90:5;;;;;;;;;;;;;;;565:107:23;;;;;;;;;;;;95:39:24;;;;;;;;;;;;113:20:7;;;;;;;;;;;;1457:100:23;;;;;;;;;;;;1348:103;;;;;;;;;;;;913:101;;;;;;;;;;;;86:21:7;;;;;;;;;;;;678:112:23;;;;;;;;;;;;720:90:5;793:10;;-1:-1:-1;;;;;793:10:5;;720:90::o;458:111:9:-;530:32;543:4;549:9;560:1;530:12;:32::i;:::-;458:111;;:::o;1020:101:23:-;1055:66;1020:101;:::o;150:45:9:-;190:5;150:45;:::o;1127:106:23:-;1167:66;1127:106;:::o;796:111::-;841:66;796:111;:::o;1239:103::-;1276:66;1239:103;:::o;51:38:24:-;88:1;51:38;:::o;911:97:5:-;88:1:24;911:97:5;:::o;565:107:23:-;606:66;565:107;:::o;95:39:24:-;133:1;95:39;:::o;113:20:7:-;;;;:::o;1457:100:23:-;1491:66;1457:100;:::o;1348:103::-;1385:66;1348:103;:::o;913:101::-;948:66;913:101;:::o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;678:112:23:-;724:66;678:112;:::o;931:817:9:-;1062:12;1084:14;1108:21;1035:16;1046:4;1035:10;:16::i;:::-;1027:25;;;;;;;;-1:-1:-1;190:5:9;1276:1;;1261:9;1255:5;1248:4;1237:9;1233:3;1227:4;1211:13;1206:3;1202;1189:12;1299:14;;-1:-1:-1;1179:99:9;-1:-1:-1;1341:22:9;;;;1333:31;;;;;;1415:4;1409:5;1456:4;1453:1;1448:3;1433:14;1655:6;1662:28;;;;1725:4;1720:3;1713:6;1662:28;1683:4;1678:3;1671:6;53:244:14;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;1316:145:4:-;1375:7;1401:6;;-1:-1:-1;;;;;1401:6:4;:13;724:66:23;1446:6:4;1415:38;;;;;;;;;;;;;;;;;;;;1401:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1316:145;-1:-1:-1;;;1316:145:4:o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "305000",
              "executionCost": "infinite",
              "totalCost": "infinite"
            },
            "external": {
              "": "infinite",
              "ACL_APP()": "infinite",
              "ACL_APP_ID()": "infinite",
              "APM_NODE()": "infinite",
              "APP_ADDR_NAMESPACE()": "infinite",
              "APP_BASES_NAMESPACE()": "infinite",
              "CORE_NAMESPACE()": "infinite",
              "ETH_NODE()": "infinite",
              "FORWARDING()": "infinite",
              "FWD_GAS_LIMIT()": "infinite",
              "KERNEL_APP()": "infinite",
              "KERNEL_APP_ID()": "infinite",
              "UPGRADEABLE()": "infinite",
              "appId()": "infinite",
              "implementation()": "infinite",
              "kernel()": "infinite",
              "proxyType()": "infinite"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH_NODE()": "cc473be3",
            "FORWARDING()": "2b2584f6",
            "FWD_GAS_LIMIT()": "0ceafa2a",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "UPGRADEABLE()": "7e84a4ff",
            "appId()": "80afdea8",
            "implementation()": "5c60da1b",
            "kernel()": "d4aae0c4",
            "proxyType()": "4555d5c9"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FWD_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FORWARDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPGRADEABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposit\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"implementation()\":{\"details\":\"ERC897, the address the proxy would delegate calls to\"},\"proxyType()\":{\"details\":\"ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/apps/AppProxyPinned.sol\":\"AppProxyPinned\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelStorage.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        kernel = _kernel;\\n        appId = _appId;\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\\n    }\\n}\\n\",\"keccak256\":\"0xc084b7b69ae72fb0dcbbf426517aa65fd5842309dea77831a993d0f5fff01c10\"},\"@aragon/os/contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n        pinnedCode = getAppBase(appId);\\n        require(pinnedCode != address(0));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode;\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n}\\n\",\"keccak256\":\"0x5a18cba7c2b3f0118516dae74e05ca95ffa7d845353869609db41173660ebdc9\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 constant public FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        delegatedFwd(_dst, _calldata, 0);\\n    }\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    * @param _minReturnSize Minimum size the call needs to return, if less than that it will revert\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata, uint256 _minReturnSize) internal {\\n        require(isContract(_dst));\\n        uint256 size;\\n        uint256 result;\\n        uint256 fwd_gas_limit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            size := returndatasize\\n        }\\n\\n        require(size >= _minReturnSize);\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc08eb0dec7d649648c9e15f7d3906fc979f62b6cb7cccc6553d6bf4d2ed2f63a\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () payable public {\\n        // send / transfer\\n        if (msg.gas < FWD_GAS_LIMIT) {\\n            require(msg.value > 0 && msg.data.length == 0);\\n            ProxyDeposit(msg.sender, msg.value);\\n        } else { // all calls except for send or transfer\\n            address target = implementation();\\n            delegatedFwd(target, msg.data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91bf6e5fa17af2d12f5923d5da45a42de8a1b75a54d466705a3140fc3606db18\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ERCProxy {\\n    uint256 constant public FORWARDING = 1;\\n    uint256 constant public UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xba656dc63cdfe99f80d29e0a4e15538e7915aada88ba52967a1de063225611ca\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/apps/AppProxyUpgradeable.sol": {
      "AppProxyUpgradeable": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FWD_GAS_LIMIT",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FORWARDING",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "proxyType",
            "outputs": [
              {
                "name": "proxyTypeId",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "UPGRADEABLE",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "ProxyDeposit",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "implementation()": {
              "details": "ERC897, the address the proxy would delegate calls to"
            },
            "proxyType()": {
              "details": "ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy"
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a0029",
            "sourceMap": "56:892:6:-;;;392:170;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;885:15:4;561:16;;-1:-1:-1;;;;;;561:16:4;-1:-1:-1;;;;;561:16:4;;;;;-1:-1:-1;587:14:4;;;392:170:6;;;561:16:4;;-1:-1:-1;587:14:4;;392:170:6;;903:17:4;587:14;903:10;;;;;;:17;:::i;:::-;885:35;;1029:1;1001:18;:25;:29;997:307;;;1054:19;1065:7;1054:10;;;;;;:19;:::i;:::-;1046:28;;;;;;;;1252:7;-1:-1:-1;;;;;1252:20:4;1273:18;1252:40;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1244:49:4;;;;;;;;463:847;;;;392:170:6;;;56:892;;1316:145:4;1375:7;1401:6;;-1:-1:-1;;;;;1401:6:4;:13;724:66:23;1446:6:4;1415:38;;;;;;;;;;;;;;;;;;;;1401:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1316:145;-1:-1:-1;;;1316:145:4:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;56:892:6:-;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a0029",
            "sourceMap": "56:892:6:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;444:14:10;190:5:9;238:7:10;:23;234:298;;;297:1;285:9;:13;:37;;;;-1:-1:-1;302:8:10;:20;285:37;277:46;;;;;;;;337:35;350:10;362:9;337:35;;;;;;;;;;;;;;;;;;;;;;;234:298;;;461:16;:14;:16::i;:::-;444:33;;491:30;504:6;512:8;;491:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;491:12:10;;-1:-1:-1;;;;;491:30:10:i;:::-;170:368;56:892:6;1020:101:23;;;;;;;;;;;;;;;;;;;;;;;;;;;150:45:9;;;;;;;;;;;;1127:106:23;;;;;;;;;;;;796:111;;;;;;;;;;;;1239:103;;;;;;;;;;;;51:38:24;;;;;;;;;;;;848:98:6;;;;;;;;;;;;650:97;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;565:107:23;;;;;;;;;;;;95:39:24;;;;;;;;;;;;113:20:7;;;;;;;;;;;;1457:100:23;;;;;;;;;;;;1348:103;;;;;;;;;;;;913:101;;;;;;;;;;;;86:21:7;;;;;;;;;;;;678:112:23;;;;;;;;;;;;650:97:6;697:7;723:17;734:5;;723:10;:17::i;:::-;716:24;;650:97;:::o;458:111:9:-;530:32;543:4;549:9;560:1;530:12;:32::i;:::-;458:111;;:::o;1020:101:23:-;1055:66;1020:101;:::o;150:45:9:-;190:5;150:45;:::o;1127:106:23:-;1167:66;1127:106;:::o;796:111::-;841:66;796:111;:::o;1239:103::-;1276:66;1239:103;:::o;51:38:24:-;88:1;51:38;:::o;848:98:6:-;133:1:24;848:98:6;:::o;565:107:23:-;606:66;565:107;:::o;95:39:24:-;133:1;95:39;:::o;113:20:7:-;;;;:::o;1457:100:23:-;1491:66;1457:100;:::o;1348:103::-;1385:66;1348:103;:::o;913:101::-;948:66;913:101;:::o;86:21:7:-;;;;;;:::o;678:112:23:-;724:66;678:112;:::o;1316:145:4:-;1375:7;1401:6;;;;:13;724:66:23;1446:6:4;1415:38;;;;;;;;;;;;;;;;;;;;1401:53;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1316:145;-1:-1:-1;;;1316:145:4:o;931:817:9:-;1062:12;1084:14;1108:21;1035:16;1046:4;1035:10;:16::i;:::-;1027:25;;;;;;;;-1:-1:-1;190:5:9;1276:1;;1261:9;1255:5;1248:4;1237:9;1233:3;1227:4;1211:13;1206:3;1202;1189:12;1299:14;;-1:-1:-1;1179:99:9;-1:-1:-1;1341:22:9;;;;1333:31;;;;;;1415:4;1409:5;1456:4;1453:1;1448:3;1433:14;1655:6;1662:28;;;;1725:4;1720:3;1713:6;1662:28;1683:4;1678:3;1671:6;53:244:14;113:4;;133:21;;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "318600",
              "executionCost": "infinite",
              "totalCost": "infinite"
            },
            "external": {
              "": "infinite",
              "ACL_APP()": "infinite",
              "ACL_APP_ID()": "infinite",
              "APM_NODE()": "infinite",
              "APP_ADDR_NAMESPACE()": "infinite",
              "APP_BASES_NAMESPACE()": "infinite",
              "CORE_NAMESPACE()": "infinite",
              "ETH_NODE()": "infinite",
              "FORWARDING()": "infinite",
              "FWD_GAS_LIMIT()": "infinite",
              "KERNEL_APP()": "infinite",
              "KERNEL_APP_ID()": "infinite",
              "UPGRADEABLE()": "infinite",
              "appId()": "infinite",
              "implementation()": "infinite",
              "kernel()": "infinite",
              "proxyType()": "infinite"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH_NODE()": "cc473be3",
            "FORWARDING()": "2b2584f6",
            "FWD_GAS_LIMIT()": "0ceafa2a",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "UPGRADEABLE()": "7e84a4ff",
            "appId()": "80afdea8",
            "implementation()": "5c60da1b",
            "kernel()": "d4aae0c4",
            "proxyType()": "4555d5c9"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FWD_GAS_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FORWARDING\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"proxyType\",\"outputs\":[{\"name\":\"proxyTypeId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"UPGRADEABLE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ProxyDeposit\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"implementation()\":{\"details\":\"ERC897, the address the proxy would delegate calls to\"},\"proxyType()\":{\"details\":\"ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":\"AppProxyUpgradeable\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelStorage.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        kernel = _kernel;\\n        appId = _appId;\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\\n    }\\n}\\n\",\"keccak256\":\"0xc084b7b69ae72fb0dcbbf426517aa65fd5842309dea77831a993d0f5fff01c10\"},\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0x399a61bef2ea0035edf7adc57f731620bc2f6d044e715ac6f894e51e16d3f1b9\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 constant public FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        delegatedFwd(_dst, _calldata, 0);\\n    }\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    * @param _minReturnSize Minimum size the call needs to return, if less than that it will revert\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata, uint256 _minReturnSize) internal {\\n        require(isContract(_dst));\\n        uint256 size;\\n        uint256 result;\\n        uint256 fwd_gas_limit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            size := returndatasize\\n        }\\n\\n        require(size >= _minReturnSize);\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc08eb0dec7d649648c9e15f7d3906fc979f62b6cb7cccc6553d6bf4d2ed2f63a\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () payable public {\\n        // send / transfer\\n        if (msg.gas < FWD_GAS_LIMIT) {\\n            require(msg.value > 0 && msg.data.length == 0);\\n            ProxyDeposit(msg.sender, msg.value);\\n        } else { // all calls except for send or transfer\\n            address target = implementation();\\n            delegatedFwd(target, msg.data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91bf6e5fa17af2d12f5923d5da45a42de8a1b75a54d466705a3140fc3606db18\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ERCProxy {\\n    uint256 constant public FORWARDING = 1;\\n    uint256 constant public UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xba656dc63cdfe99f80d29e0a4e15538e7915aada88ba52967a1de063225611ca\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/apps/AppStorage.sol": {
      "AppStorage": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60f68061001d6000396000f30060606040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166380afdea88114604d578063d4aae0c414606f575b600080fd5b3415605757600080fd5b605d60a8565b60405190815260200160405180910390f35b3415607957600080fd5b607f60ae565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820d340912912f206d4a4aadc7662a51f688138c10011623269918e608fe12a7dc60029",
            "sourceMap": "60:317:7:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166380afdea88114604d578063d4aae0c414606f575b600080fd5b3415605757600080fd5b605d60a8565b60405190815260200160405180910390f35b3415607957600080fd5b607f60ae565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015481565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820d340912912f206d4a4aadc7662a51f688138c10011623269918e608fe12a7dc60029",
            "sourceMap": "60:317:7:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;113:20;;;;;;;;;;;;;;;;;;;;;;;;;;;86:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;113:20;;;;:::o;86:21::-;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "49200",
              "executionCost": "94",
              "totalCost": "49294"
            },
            "external": {
              "appId()": "373",
              "kernel()": "410"
            }
          },
          "methodIdentifiers": {
            "appId()": "80afdea8",
            "kernel()": "d4aae0c4"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/apps/AppStorage.sol\":\"AppStorage\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/apps/AragonApp.sol": {
      "AragonApp": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6107f58061001e6000396000f3006060604052600436106100a05763ffffffff60e060020a600035041663178e607981146100a557806332f0a3b5146100ca57806360b1e057146100f95780637e7db6e11461010c57806380afdea81461013f5780638322fff2146101525780638b3dd749146101655780639b3fdf4c146101785780639d4941d81461018b578063a1658fad146101ac578063d4aae0c41461020f578063f92a79ff14610222575b600080fd5b34156100b057600080fd5b6100b8610273565b60405190815260200160405180910390f35b34156100d557600080fd5b6100dd610297565b604051600160a060020a03909116815260200160405180910390f35b341561010457600080fd5b6100b8610317565b341561011757600080fd5b61012b600160a060020a036004351661033b565b604051901515815260200160405180910390f35b341561014a57600080fd5b6100b8610341565b341561015d57600080fd5b6100dd610347565b341561017057600080fd5b6100b861034c565b341561018357600080fd5b6100b8610352565b341561019657600080fd5b6101aa600160a060020a0360043516610376565b005b34156101b757600080fd5b61012b60048035600160a060020a03169060248035919060649060443590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506104ee95505050505050565b341561021a57600080fd5b6100dd61062c565b341561022d57600080fd5b6100dd60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061063b95505050505050565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60008054600160a060020a031615156102af57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156102f857600080fd5b6102c65a03f1151561030957600080fd5b505050604051805191505090565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b50600190565b60015481565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b6000806103828361033b565b151561038d57600080fd5b610395610297565b91506103a082610717565b15156103ab57600080fd5b600160a060020a03831615156103fd5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156103f857600080fd5b6104e9565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561045457600080fd5b6102c65a03f1151561046557600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104cd57600080fd5b6102c65a03f115156104de57600080fd5b505050604051805150505b505050565b60006104f86107b7565b6000808451111561051157835160200290508391508082525b600054600160a060020a03161580610622575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156105b85780820151838201526020016105a0565b50505050905090810190601f1680156105e55780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b151561060657600080fd5b6102c65a03f1151561061757600080fd5b505050604051805190505b9695505050505050565b600054600160a060020a031681565b6000610645610744565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106ac578082015183820152602001610694565b50505050905090810190601f1680156106d95780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156106f757600080fd5b6102c65a03f1151561070857600080fd5b50505060405180519392505050565b600080600160a060020a0383161515610733576000915061073e565b823b90506000811191505b50919050565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156106f757600080fd5b602060405190810160405260008152905600a165627a7a72305820e57b4c1411d8741339e8eb1b5edcc3e362c761ff7d8047a8fe96ca28044f884f0029",
            "sourceMap": "374:1080:8:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100a05763ffffffff60e060020a600035041663178e607981146100a557806332f0a3b5146100ca57806360b1e057146100f95780637e7db6e11461010c57806380afdea81461013f5780638322fff2146101525780638b3dd749146101655780639b3fdf4c146101785780639d4941d81461018b578063a1658fad146101ac578063d4aae0c41461020f578063f92a79ff14610222575b600080fd5b34156100b057600080fd5b6100b8610273565b60405190815260200160405180910390f35b34156100d557600080fd5b6100dd610297565b604051600160a060020a03909116815260200160405180910390f35b341561010457600080fd5b6100b8610317565b341561011757600080fd5b61012b600160a060020a036004351661033b565b604051901515815260200160405180910390f35b341561014a57600080fd5b6100b8610341565b341561015d57600080fd5b6100dd610347565b341561017057600080fd5b6100b861034c565b341561018357600080fd5b6100b8610352565b341561019657600080fd5b6101aa600160a060020a0360043516610376565b005b34156101b757600080fd5b61012b60048035600160a060020a03169060248035919060649060443590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506104ee95505050505050565b341561021a57600080fd5b6100dd61062c565b341561022d57600080fd5b6100dd60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061063b95505050505050565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60008054600160a060020a031615156102af57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b15156102f857600080fd5b6102c65a03f1151561030957600080fd5b505050604051805191505090565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b50600190565b60015481565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b6000806103828361033b565b151561038d57600080fd5b610395610297565b91506103a082610717565b15156103ab57600080fd5b600160a060020a03831615156103fd5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156103f857600080fd5b6104e9565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561045457600080fd5b6102c65a03f1151561046557600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156104cd57600080fd5b6102c65a03f115156104de57600080fd5b505050604051805150505b505050565b60006104f86107b7565b6000808451111561051157835160200290508391508082525b600054600160a060020a03161580610622575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156105b85780820151838201526020016105a0565b50505050905090810190601f1680156105e55780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b151561060657600080fd5b6102c65a03f1151561061757600080fd5b505050604051805190505b9695505050505050565b600054600160a060020a031681565b6000610645610744565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156106ac578082015183820152602001610694565b50505050905090810190601f1680156106d95780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156106f757600080fd5b6102c65a03f1151561070857600080fd5b50505060405180519392505050565b600080600160a060020a0383161515610733576000915061073e565b823b90506000811191505b50919050565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156106f757600080fd5b602060405190810160405260008152905600a165627a7a72305820e57b4c1411d8741339e8eb1b5edcc3e362c761ff7d8047a8fe96ca28044f884f0029",
            "sourceMap": "374:1080:8:-;;;;;;;;;-1:-1:-1;;;374:1080:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;1226:226:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1226:226:8;;;;;;;;;;;;;;565:118:18;;;;;;;;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;;;;;;;;;;;;;;;;;;113:20:7;;;;;;;;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;689:115:18;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;86:21:7;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;448:111:18;493:66;448:111;:::o;1226:226:8:-;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1226:226:8;:::o;565:118:18:-;617:66;565:118;:::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;113:20:7:-;;;;:::o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;689:115:18:-;738:66;689:115;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;374:1080:8;;;;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "407400",
              "executionCost": "438",
              "totalCost": "407838"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "236",
              "ETH()": "424",
              "EVMSCRIPT_REGISTRY_APP()": "390",
              "EVMSCRIPT_REGISTRY_APP_ID()": "280",
              "allowRecoverability(address)": "391",
              "appId()": "524",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "568",
              "getRecoveryVault()": "infinite",
              "kernel()": "809",
              "transferToVault(address)": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getRecoveryVault()": "32f0a3b5",
            "kernel()": "d4aae0c4",
            "transferToVault(address)": "9d4941d8"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/apps/AragonApp.sol\":\"AragonApp\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            }
          }
        }
      }
    },
    "@aragon/os/contracts/common/DelegateProxy.sol": {
      "DelegateProxy": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "FWD_GAS_LIMIT",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FORWARDING",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "proxyType",
            "outputs": [
              {
                "name": "proxyTypeId",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "name": "codeAddr",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "UPGRADEABLE",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "FORWARDING()": "2b2584f6",
            "FWD_GAS_LIMIT()": "0ceafa2a",
            "UPGRADEABLE()": "7e84a4ff",
            "implementation()": "5c60da1b",
            "proxyType()": "4555d5c9"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/common/DepositableDelegateProxy.sol": {
      "DepositableDelegateProxy": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "FWD_GAS_LIMIT",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "FORWARDING",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "proxyType",
            "outputs": [
              {
                "name": "proxyTypeId",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "name": "codeAddr",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "UPGRADEABLE",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "sender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "ProxyDeposit",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "FORWARDING()": "2b2584f6",
            "FWD_GAS_LIMIT()": "0ceafa2a",
            "UPGRADEABLE()": "7e84a4ff",
            "implementation()": "5c60da1b",
            "proxyType()": "4555d5c9"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/common/EtherTokenConstant.sol": {
      "EtherTokenConstant": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b60ad8061001d6000396000f300606060405260043610603e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638322fff281146043575b600080fd5b3415604d57600080fd5b6053607c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000815600a165627a7a7230582097c1cba04a9e521a6eecc97234a36b1379a93802dfaa3ff399124bc1138b2f1c0029",
            "sourceMap": "151:77:11:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "606060405260043610603e5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416638322fff281146043575b600080fd5b3415604d57600080fd5b6053607c565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6000815600a165627a7a7230582097c1cba04a9e521a6eecc97234a36b1379a93802dfaa3ff399124bc1138b2f1c0029",
            "sourceMap": "151:77:11:-;;;;;;;;;;;;;;;;;;;;;;;185:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;223:1;185:40;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "34600",
              "executionCost": "82",
              "totalCost": "34682"
            },
            "external": {
              "ETH()": "182"
            }
          },
          "methodIdentifiers": {
            "ETH()": "8322fff2"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/common/EtherTokenConstant.sol\":\"EtherTokenConstant\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/common/IVaultRecoverable.sol": {
      "IVaultRecoverable": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "allowRecoverability(address)": "7e7db6e1",
            "getRecoveryVault()": "32f0a3b5",
            "transferToVault(address)": "9d4941d8"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/common/Initializable.sol": {
      "Initializable": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6101168061001e6000396000f30060606040526004361060525763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166380afdea8811460575780638b3dd749146079578063d4aae0c4146089575b600080fd5b3415606157600080fd5b606760c2565b60405190815260200160405180910390f35b3415608357600080fd5b606760c8565b3415609357600080fd5b609960ce565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015481565b60035490565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820d2c4ee13261e126241fe0e432b820e0eca8cc2036f1a1b64e928551baaf01a580029",
            "sourceMap": "61:891:13:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361060525763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166380afdea8811460575780638b3dd749146079578063d4aae0c4146089575b600080fd5b3415606157600080fd5b606760c2565b60405190815260200160405180910390f35b3415608357600080fd5b606760c8565b3415609357600080fd5b609960ce565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60015481565b60035490565b60005473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820d2c4ee13261e126241fe0e432b820e0eca8cc2036f1a1b64e928551baaf01a580029",
            "sourceMap": "61:891:13:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;113:20:7;;;;;;;;;;;;;;;;;;;;;;;;;;;358:107:13;;;;;;;;;;;;86:21:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;113:20;;;;:::o;358:107:13:-;439:19;;358:107;:::o;86:21:7:-;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "55600",
              "executionCost": "100",
              "totalCost": "55700"
            },
            "external": {
              "appId()": "373",
              "getInitializationBlock()": "395",
              "kernel()": "432"
            },
            "internal": {
              "getBlockNumber()": "infinite",
              "initialized()": "infinite"
            }
          },
          "methodIdentifiers": {
            "appId()": "80afdea8",
            "getInitializationBlock()": "8b3dd749",
            "kernel()": "d4aae0c4"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/common/Initializable.sol\":\"Initializable\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/common/IsContract.sol": {
      "IsContract": {
        "abi": [],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a723058208637c91021dd63a338d48419020c1bfa3ada5c1f6d50e9aff5062ec5badda1e00029",
            "sourceMap": "27:272:14:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600080fd00a165627a7a723058208637c91021dd63a338d48419020c1bfa3ada5c1f6d50e9aff5062ec5badda1e00029",
            "sourceMap": "27:272:14:-;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "10600",
              "executionCost": "61",
              "totalCost": "10661"
            },
            "internal": {
              "isContract(address)": "infinite"
            }
          },
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/common/IsContract.sol\":\"IsContract\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/common/VaultRecoverable.sol": {
      "VaultRecoverable": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "ETH()": "8322fff2",
            "allowRecoverability(address)": "7e7db6e1",
            "getRecoveryVault()": "32f0a3b5",
            "transferToVault(address)": "9d4941d8"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            }
          }
        }
      }
    },
    "@aragon/os/contracts/evmscript/EVMScriptRunner.sol": {
      "EVMScriptRunner": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6103718061001e6000396000f30060606040526004361061005e5763ffffffff60e060020a600035041663178e6079811461006357806360b1e0571461008857806380afdea81461009b5780639b3fdf4c146100ae578063d4aae0c4146100c1578063f92a79ff146100fd575b600080fd5b341561006e57600080fd5b61007661014e565b60405190815260200160405180910390f35b341561009357600080fd5b610076610172565b34156100a657600080fd5b610076610196565b34156100b957600080fd5b61007661019c565b34156100cc57600080fd5b6100d46101c0565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561010857600080fd5b6100d460046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506101dc95505050505050565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b60015481565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60006101e66102c5565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561025a578082015183820152602001610242565b50505050905090810190601f1680156102875780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156102a557600080fd5b6102c65a03f115156102b657600080fd5b50505060405180519392505050565b60008054819073ffffffffffffffffffffffffffffffffffffffff166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156102a557600080fd00a165627a7a723058209a2ae52b5cabbba3f0a0373d371e6a9f3f5edf2cfc9108531b18a6e16018b03f0029",
            "sourceMap": "162:1873:16:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361061005e5763ffffffff60e060020a600035041663178e6079811461006357806360b1e0571461008857806380afdea81461009b5780639b3fdf4c146100ae578063d4aae0c4146100c1578063f92a79ff146100fd575b600080fd5b341561006e57600080fd5b61007661014e565b60405190815260200160405180910390f35b341561009357600080fd5b610076610172565b34156100a657600080fd5b610076610196565b34156100b957600080fd5b61007661019c565b34156100cc57600080fd5b6100d46101c0565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561010857600080fd5b6100d460046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506101dc95505050505050565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b60015481565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b60006101e66102c5565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561025a578082015183820152602001610242565b50505050905090810190601f1680156102875780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156102a557600080fd5b6102c65a03f115156102b657600080fd5b50505060405180519392505050565b60008054819073ffffffffffffffffffffffffffffffffffffffff166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156102a557600080fd00a165627a7a723058209a2ae52b5cabbba3f0a0373d371e6a9f3f5edf2cfc9108531b18a6e16018b03f0029",
            "sourceMap": "162:1873:16:-;;;;;;;;;-1:-1:-1;;;162:1873:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;565:118;;;;;;;;;;;;113:20:7;;;;;;;;;;;;689:115:18;;;;;;;;;;;;86:21:7;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;448:111:18;493:66;448:111;:::o;565:118::-;617:66;565:118;:::o;113:20:7:-;;;;:::o;689:115:18:-;738:66;689:115;:::o;86:21:7:-;;;;;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;:39;;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;1088:200::-;1142:18;1195:6;;1142:18;;1195:6;;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "176200",
              "executionCost": "215",
              "totalCost": "176415"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "236",
              "EVMSCRIPT_REGISTRY_APP()": "302",
              "EVMSCRIPT_REGISTRY_APP_ID()": "258",
              "appId()": "480",
              "getExecutor(bytes)": "infinite",
              "kernel()": "539"
            },
            "internal": {
              "getExecutorRegistry()": "infinite",
              "returnedDataDecoded()": "infinite",
              "runScript(bytes memory,bytes memory,address[] memory)": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "appId()": "80afdea8",
            "getExecutor(bytes)": "f92a79ff",
            "kernel()": "d4aae0c4"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":\"EVMScriptRunner\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol": {
      "IEVMScriptExecutor": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "script",
                "type": "bytes"
              },
              {
                "name": "input",
                "type": "bytes"
              },
              {
                "name": "blacklist",
                "type": "address[]"
              }
            ],
            "name": "execScript",
            "outputs": [
              {
                "name": "",
                "type": "bytes"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "execScript(bytes,bytes,address[])": "279cea35"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol": {
      "EVMScriptRegistryConstants": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b61013e8061001e6000396000f3006060604052600436106100565763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663178e6079811461005b57806360b1e057146100805780639b3fdf4c14610093575b600080fd5b341561006657600080fd5b61006e6100a6565b60405190815260200160405180910390f35b341561008b57600080fd5b61006e6100ca565b341561009e57600080fd5b61006e6100ee565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871815600a165627a7a72305820fc8e0066407dc2190246ae8dd488469dd63943c20cc56c4b7262b8b4ea3665bd0029",
            "sourceMap": "27:780:18:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100565763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663178e6079811461005b57806360b1e057146100805780639b3fdf4c14610093575b600080fd5b341561006657600080fd5b61006e6100a6565b60405190815260200160405180910390f35b341561008b57600080fd5b61006e6100ca565b341561009e57600080fd5b61006e6100ee565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871815600a165627a7a72305820fc8e0066407dc2190246ae8dd488469dd63943c20cc56c4b7262b8b4ea3665bd0029",
            "sourceMap": "27:780:18:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111;;;;;;;;;;;;;;;;;;;;;;;;;;;565:118;;;;;;;;;;;;689:115;;;;;;;;;;;;448:111;493:66;448:111;:::o;565:118::-;617:66;565:118;:::o;689:115::-;738:66;689:115;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "63600",
              "executionCost": "106",
              "totalCost": "63706"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "173",
              "EVMSCRIPT_REGISTRY_APP()": "217",
              "EVMSCRIPT_REGISTRY_APP_ID()": "195"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":\"EVMScriptRegistryConstants\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      },
      "IEVMScriptRegistry": {
        "abi": [
          {
            "constant": true,
            "inputs": [
              {
                "name": "script",
                "type": "bytes"
              }
            ],
            "name": "getScriptExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "executorId",
                "type": "uint256"
              }
            ],
            "name": "disableScriptExecutor",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "executor",
                "type": "address"
              }
            ],
            "name": "addScriptExecutor",
            "outputs": [
              {
                "name": "id",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "addScriptExecutor(address)": "87a16f12",
            "disableScriptExecutor(uint256)": "5ca4d4bb",
            "getScriptExecutor(bytes)": "04bf2a7f"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/evmscript/ScriptHelpers.sol": {
      "ScriptHelpers": {
        "abi": [
          {
            "constant": true,
            "inputs": [
              {
                "name": "_a",
                "type": "bytes"
              },
              {
                "name": "_b",
                "type": "bytes"
              },
              {
                "name": "_c",
                "type": "address[]"
              }
            ],
            "name": "abiEncode",
            "outputs": [
              {
                "name": "d",
                "type": "bytes"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6103538061001e6000396000f3006060604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663137d70268114610045575b600080fd5b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061018495505050505050565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610149578082015183820152602001610131565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61018c610315565b61019784848461019f565b949350505050565b6101a7610315565b6060600080806101b688610261565b602002840192506101c687610261565b602002830191506101d68661029c565b60200282019050806040518059106101eb5750595b818152601f19601f830116810160200160405290509450836020860152826040860152816060860152610229856102218a6102a9565b868b516102ac565b61023e85610236896102a9565b858a516102ac565b6102568561024b886102a9565b8489516020026102ac565b505050509392505050565b6000806020835181151561027157fe5b061161027e576000610281565b60015b60ff166020835181151561029157fe5b040160010192915050565b6000815160010192915050565b90565b600082602086010190506102c48185846020016102cb565b5050505050565b81838260005b602082106102f3578351835260209384019390920191601f19909101906102d1565b6001826020036101000a03905080198451168184511617909252505050505050565b602060405190810160405260008152905600a165627a7a72305820c4e019c24e05ab0272f25b7d6de2ce6867754b49cef0849d19b6c55e9bd8b36d0029",
            "sourceMap": "27:4453:19:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100405763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663137d70268114610045575b600080fd5b61010d60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050919080359060200190820180359060200190808060200260200160405190810160405280939291908181526020018383602002808284375094965061018495505050505050565b60405160208082528190810183818151815260200191508051906020019080838360005b83811015610149578082015183820152602001610131565b50505050905090810190601f1680156101765780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61018c610315565b61019784848461019f565b949350505050565b6101a7610315565b6060600080806101b688610261565b602002840192506101c687610261565b602002830191506101d68661029c565b60200282019050806040518059106101eb5750595b818152601f19601f830116810160200160405290509450836020860152826040860152816060860152610229856102218a6102a9565b868b516102ac565b61023e85610236896102a9565b858a516102ac565b6102568561024b886102a9565b8489516020026102ac565b505050509392505050565b6000806020835181151561027157fe5b061161027e576000610281565b60015b60ff166020835181151561029157fe5b040160010192915050565b6000815160010192915050565b90565b600082602086010190506102c48185846020016102cb565b5050505050565b81838260005b602082106102f3578351835260209384019390920191601f19909101906102d1565b6001826020036101000a03905080198451168184511617909252505050505050565b602060405190810160405260008152905600a165627a7a72305820c4e019c24e05ab0272f25b7d6de2ce6867754b49cef0849d19b6c55e9bd8b36d0029",
            "sourceMap": "27:4453:19:-;;;;;;;;;;;;;;;;;;;;;;;598:125;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;598:125:19;;-1:-1:-1;598:125:19;;-1:-1:-1;;;;;;598:125:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;598:125:19;672:7;;:::i;:::-;698:18;705:2;709;713;698:6;:18::i;:::-;691:25;598:125;-1:-1:-1;;;;598:125:19:o;729:830::-;823:14;;:::i;:::-;923:4;903:17;;;974:13;984:2;974:9;:13::i;:::-;969:2;:18;957:9;:30;937:50;;1034:13;1044:2;1034:9;:13::i;:::-;1029:2;:18;1017:9;:30;997:50;;1091:13;1101:2;1091:9;:13::i;:::-;1086:2;:18;1074:9;:30;1057:47;;1129:6;1119:17;;;;;;;;;;;;;-1:-1:-1;;1119:17:19;;;;;;;;;;;;1115:21;;1221:9;1214:4;1211:1;1207:3;1200:6;1265:9;1258:4;1255:1;1251:3;1244:6;1309:9;1302:4;1299:1;1295:3;1288:6;1382:41;1387:1;1390:10;1397:2;1390:6;:10::i;:::-;1402:9;1413:2;:9;1382:4;:41::i;:::-;1433;1438:1;1441:10;1448:2;1441:6;:10::i;:::-;1453:9;1464:2;:9;1433:4;:41::i;:::-;1484:46;1489:1;1492:10;1499:2;1492:6;:10::i;:::-;1504:9;1515:2;:9;1527:2;1515:14;1484:4;:46::i;:::-;729:830;;;;;;;;;:::o;1565:236::-;1624:7;1784:1;1779:2;1767;:9;:14;;;;;;;;:18;:26;;1792:1;1767:26;;;1788:1;1767:26;1743:51;;1760:2;1748;:9;:14;;;;;;;;1743:51;:1;:51;;1565:236;-1:-1:-1;;1565:236:19:o;1807:139::-;1863:7;1930:2;:9;1926:1;:13;;1807:139;-1:-1:-1;;1807:139:19:o;2183:127::-;2292:2;2271:33::o;1952:225::-;2045:9;2114:4;2107;2103:2;2099:3;2095;2087:32;;2138;2145:4;2151;2157:7;2167:2;2157:12;2138:6;:32::i;:::-;1952:225;;;;;:::o;3838:640::-;3926:4;3955:5;3984:4;3912:11;4049:165;4063:2;4056:9;;4049:165;;4138:3;4132:5;4119:6;;4178:2;4194:9;;;;4170:10;;;;-1:-1:-1;;4067:9:19;;;;4049:165;;;4288:1;4281:3;4276:2;:8;4268:3;:17;:21;4256:33;;4357:4;4353:3;4347;4341:5;4337:3;4409:4;4402;4396:5;4392:3;4440:2;4427:6;;;-1:-1:-1;;;;;;4308:164:19:o;27:4453::-;;;;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "170200",
              "executionCost": "209",
              "totalCost": "170409"
            },
            "external": {
              "abiEncode(bytes,bytes,address[])": "infinite"
            },
            "internal": {
              "abiLength(address[] memory)": "infinite",
              "abiLength(bytes memory)": "infinite",
              "addressAt(bytes memory,uint256)": "infinite",
              "copy(bytes memory,uint256,uint256,uint256)": "infinite",
              "encode(bytes memory,bytes memory,address[] memory)": "infinite",
              "getPtr(address[] memory)": "infinite",
              "getPtr(bytes memory)": "12",
              "getSpecId(bytes memory)": "infinite",
              "locationOf(bytes memory,uint256)": "infinite",
              "memcpy(uint256,uint256,uint256)": "infinite",
              "toBytes(bytes4)": "infinite",
              "uint256At(bytes memory,uint256)": "infinite",
              "uint32At(bytes memory,uint256)": "infinite"
            }
          },
          "methodIdentifiers": {
            "abiEncode(bytes,bytes,address[])": "137d7026"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_a\",\"type\":\"bytes\"},{\"name\":\"_b\",\"type\":\"bytes\"},{\"name\":\"_c\",\"type\":\"address[]\"}],\"name\":\"abiEncode\",\"outputs\":[{\"name\":\"d\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":\"ScriptHelpers\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/factory/AppProxyFactory.sol": {
      "AppProxyFactory": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "name": "newAppProxyPinned",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              }
            ],
            "name": "newAppProxy",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "name": "newAppProxy",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              }
            ],
            "name": "newAppProxyPinned",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "proxy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "isUpgradeable",
                "type": "bool"
              },
              {
                "indexed": false,
                "name": "appId",
                "type": "bytes32"
              }
            ],
            "name": "NewAppProxy",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b61151d8061001e6000396000f3006060604052600436106100615763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d162f8b08114610066578063e156a8f3146100e7578063ede658b014610109578063ff289fc51461016e575b600080fd5b341561007157600080fd5b6100cb60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061019095505050505050565b604051600160a060020a03909116815260200160405180910390f35b34156100f257600080fd5b6100cb600160a060020a0360043516602435610293565b341561011457600080fd5b6100cb60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506102ca95505050505050565b341561017957600080fd5b6100cb600160a060020a03600435166024356103cd565b60008084848461019e6103fd565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b838110156101ed5780820151838201526020016101d5565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151561023757600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600086604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b60006102c3838360006040518059106102a95750595b818152601f19601f830116810160200160405290506102ca565b9392505050565b6000808484846102d861040d565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101561032757808201518382015260200161030f565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151561037157600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600186604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b60006102c3838360006040518059106103e35750595b818152601f19601f83011681016020016040529050610190565b60405161086c8061041e83390190565b60405161086880610c8a8339019056006060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da00296060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a0029a165627a7a72305820591b14e2b57c85ec5500274332ee4c06c0460bf4d62ed2c157c1c7cf8f4605ed0029",
            "sourceMap": "106:1028:20:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100615763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663d162f8b08114610066578063e156a8f3146100e7578063ede658b014610109578063ff289fc51461016e575b600080fd5b341561007157600080fd5b6100cb60048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061019095505050505050565b604051600160a060020a03909116815260200160405180910390f35b34156100f257600080fd5b6100cb600160a060020a0360043516602435610293565b341561011457600080fd5b6100cb60048035600160a060020a03169060248035919060649060443590810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506102ca95505050505050565b341561017957600080fd5b6100cb600160a060020a03600435166024356103cd565b60008084848461019e6103fd565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b838110156101ed5780820151838201526020016101d5565b50505050905090810190601f16801561021a5780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151561023757600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600086604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b60006102c3838360006040518059106102a95750595b818152601f19601f830116810160200160405290506102ca565b9392505050565b6000808484846102d861040d565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101561032757808201518382015260200161030f565b50505050905090810190601f1680156103545780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151561037157600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600186604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b60006102c3838360006040518059106103e35750595b818152601f19601f83011681016020016040529050610190565b60405161086c8061041e83390190565b60405161086880610c8a8339019056006060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da00296060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a0029a165627a7a72305820591b14e2b57c85ec5500274332ee4c06c0460bf4d62ed2c157c1c7cf8f4605ed0029",
            "sourceMap": "106:1028:20:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;845:287;;;;;;;;;;;;;-1:-1:-1;;;;;845:287:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;845:287:20;;-1:-1:-1;845:287:20;;-1:-1:-1;;;;;;845:287:20;;;;-1:-1:-1;;;;;845:287:20;;;;;;;;;;;;;;211:157;;;;;;;;;;-1:-1:-1;;;;;211:157:20;;;;;;;374:295;;;;;;;;;;;;;-1:-1:-1;;;;;374:295:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;374:295:20;;-1:-1:-1;374:295:20;;-1:-1:-1;;;;;;374:295:20;675:164;;;;;;;;;;-1:-1:-1;;;;;675:164:20;;;;;;;845:287;947:14;973:20;1015:7;1024:6;1032:18;996:55;;:::i;:::-;-1:-1:-1;;;;;996:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;973:78:20;;1061:42;1081:5;1089;1096:6;1061:42;;-1:-1:-1;;;;;1061:42:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:5;845:287;-1:-1:-1;;;;845:287:20:o;211:157::-;281:19;319:42;331:7;340:6;358:1;348:12;;;;;;;;;;;;;-1:-1:-1;;348:12:20;;;;;;;;;;;;319:11;:42::i;:::-;312:49;211:157;-1:-1:-1;;;211:157:20:o;374:295::-;470:19;501:25;553:7;562:6;570:18;529:60;;:::i;:::-;-1:-1:-1;;;;;529:60:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;501:88:20;;599:41;619:5;627:4;633:6;599:41;;-1:-1:-1;;;;;599:41:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;657:5;374:295;-1:-1:-1;;;;374:295:20:o;675:164::-;751:14;784:48;802:7;811:6;829:1;819:12;;;;;;;;;;;;;-1:-1:-1;;819:12:20;;;;;;;;;;;;784:17;:48::i;106:1028::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1081000",
              "executionCost": "1115",
              "totalCost": "1082115"
            },
            "external": {
              "newAppProxy(address,bytes32)": "infinite",
              "newAppProxy(address,bytes32,bytes)": "infinite",
              "newAppProxyPinned(address,bytes32)": "infinite",
              "newAppProxyPinned(address,bytes32,bytes)": "infinite"
            }
          },
          "methodIdentifiers": {
            "newAppProxy(address,bytes32)": "e156a8f3",
            "newAppProxy(address,bytes32,bytes)": "ede658b0",
            "newAppProxyPinned(address,bytes32)": "ff289fc5",
            "newAppProxyPinned(address,bytes32,bytes)": "d162f8b0"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isUpgradeable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"appId\",\"type\":\"bytes32\"}],\"name\":\"NewAppProxy\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/factory/AppProxyFactory.sol\":\"AppProxyFactory\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelStorage.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        kernel = _kernel;\\n        appId = _appId;\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\\n    }\\n}\\n\",\"keccak256\":\"0xc084b7b69ae72fb0dcbbf426517aa65fd5842309dea77831a993d0f5fff01c10\"},\"@aragon/os/contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n        pinnedCode = getAppBase(appId);\\n        require(pinnedCode != address(0));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode;\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n}\\n\",\"keccak256\":\"0x5a18cba7c2b3f0118516dae74e05ca95ffa7d845353869609db41173660ebdc9\"},\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0x399a61bef2ea0035edf7adc57f731620bc2f6d044e715ac6f894e51e16d3f1b9\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 constant public FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        delegatedFwd(_dst, _calldata, 0);\\n    }\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    * @param _minReturnSize Minimum size the call needs to return, if less than that it will revert\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata, uint256 _minReturnSize) internal {\\n        require(isContract(_dst));\\n        uint256 size;\\n        uint256 result;\\n        uint256 fwd_gas_limit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            size := returndatasize\\n        }\\n\\n        require(size >= _minReturnSize);\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc08eb0dec7d649648c9e15f7d3906fc979f62b6cb7cccc6553d6bf4d2ed2f63a\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () payable public {\\n        // send / transfer\\n        if (msg.gas < FWD_GAS_LIMIT) {\\n            require(msg.value > 0 && msg.data.length == 0);\\n            ProxyDeposit(msg.sender, msg.value);\\n        } else { // all calls except for send or transfer\\n            address target = implementation();\\n            delegatedFwd(target, msg.data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91bf6e5fa17af2d12f5923d5da45a42de8a1b75a54d466705a3140fc3606db18\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/factory/AppProxyFactory.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x472a3f313ca8ecdb36f6c1a0fd7eeb829c2c4d1d7c040edf6808dfa42e104eaf\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ERCProxy {\\n    uint256 constant public FORWARDING = 1;\\n    uint256 constant public UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xba656dc63cdfe99f80d29e0a4e15538e7915aada88ba52967a1de063225611ca\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/kernel/IKernel.sol": {
      "IKernel": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "id",
                "type": "bytes32"
              }
            ],
            "name": "getApp",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "namespace",
                "type": "bytes32"
              },
              {
                "name": "name",
                "type": "bytes32"
              },
              {
                "name": "app",
                "type": "address"
              }
            ],
            "name": "setApp",
            "outputs": [
              {
                "name": "id",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "acl",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "who",
                "type": "address"
              },
              {
                "name": "where",
                "type": "address"
              },
              {
                "name": "what",
                "type": "bytes32"
              },
              {
                "name": "how",
                "type": "bytes"
              }
            ],
            "name": "hasPermission",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "namespace",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "name": "name",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "name": "id",
                "type": "bytes32"
              },
              {
                "indexed": false,
                "name": "app",
                "type": "address"
              }
            ],
            "name": "SetApp",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "acl()": "de287359",
            "allowRecoverability(address)": "7e7db6e1",
            "getApp(bytes32)": "42c71f1d",
            "getRecoveryVault()": "32f0a3b5",
            "hasPermission(address,address,bytes32,bytes)": "fdef9106",
            "setApp(bytes32,bytes32,address)": "ae5b2540",
            "transferToVault(address)": "9d4941d8"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/kernel/Kernel.sol": {
      "Kernel": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "bytes32"
              }
            ],
            "name": "setRecoveryVaultId",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "name": "apps",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_id",
                "type": "bytes32"
              }
            ],
            "name": "getApp",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_baseAcl",
                "type": "address"
              },
              {
                "name": "_permissionsCreator",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "bytes32"
              },
              {
                "name": "_appBase",
                "type": "address"
              }
            ],
            "name": "newAppInstance",
            "outputs": [
              {
                "name": "appProxy",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_MANAGER_ROLE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "bytes32"
              },
              {
                "name": "_appBase",
                "type": "address"
              }
            ],
            "name": "newPinnedAppInstance",
            "outputs": [
              {
                "name": "appProxy",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_namespace",
                "type": "bytes32"
              },
              {
                "name": "_name",
                "type": "bytes32"
              },
              {
                "name": "_app",
                "type": "address"
              }
            ],
            "name": "setApp",
            "outputs": [
              {
                "name": "id",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "DEFAULT_VAULT_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "name": "newAppProxyPinned",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "recoveryVaultId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "acl",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              }
            ],
            "name": "newAppProxy",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "bytes32"
              },
              {
                "name": "_appBase",
                "type": "address"
              },
              {
                "name": "_setDefault",
                "type": "bool"
              }
            ],
            "name": "newAppInstance",
            "outputs": [
              {
                "name": "appProxy",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              },
              {
                "name": "_initializePayload",
                "type": "bytes"
              }
            ],
            "name": "newAppProxy",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_name",
                "type": "bytes32"
              },
              {
                "name": "_appBase",
                "type": "address"
              },
              {
                "name": "_setDefault",
                "type": "bool"
              }
            ],
            "name": "newPinnedAppInstance",
            "outputs": [
              {
                "name": "appProxy",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_who",
                "type": "address"
              },
              {
                "name": "_where",
                "type": "address"
              },
              {
                "name": "_what",
                "type": "bytes32"
              },
              {
                "name": "_how",
                "type": "bytes"
              }
            ],
            "name": "hasPermission",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_kernel",
                "type": "address"
              },
              {
                "name": "_appId",
                "type": "bytes32"
              }
            ],
            "name": "newAppProxyPinned",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": false,
                "name": "proxy",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "isUpgradeable",
                "type": "bool"
              },
              {
                "indexed": false,
                "name": "appId",
                "type": "bytes32"
              }
            ],
            "name": "NewAppProxy",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "namespace",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "name": "name",
                "type": "bytes32"
              },
              {
                "indexed": true,
                "name": "id",
                "type": "bytes32"
              },
              {
                "indexed": false,
                "name": "app",
                "type": "address"
              }
            ],
            "name": "SetApp",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "acl()": {
              "details": "Get the installed ACL app",
              "return": "ACL app"
            },
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "getApp(bytes32)": {
              "details": "Get the address of an app instance or base implementation",
              "params": {
                "_id": "App identifier"
              },
              "return": "Address of the app"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "getRecoveryVault()": {
              "details": "Get the address of the recovery Vault instance (to recover funds)",
              "return": "Address of the Vault"
            },
            "hasPermission(address,address,bytes32,bytes)": {
              "details": "Function called by apps to check ACL on kernel or to check permission status",
              "params": {
                "_how": "Extra data for ACL auth",
                "_what": "Identifier for a group of actions in app",
                "_where": "Address of the app",
                "_who": "Sender of the original call"
              },
              "return": "boolean indicating whether the ACL allows the role or not"
            },
            "initialize(address,address)": {
              "details": "Initialize can only be called once. It saves the block number in which it was initialized.",
              "params": {
                "_baseAcl": "Address of base ACL app",
                "_permissionsCreator": "Entity that will be given permission over createPermission"
              }
            },
            "newAppInstance(bytes32,address)": {
              "details": "Create a new instance of an app linked to this kernel",
              "params": {
                "_appBase": "Address of the app's base implementation",
                "_name": "Name of the app"
              },
              "return": "AppProxy instance"
            },
            "newAppInstance(bytes32,address,bool)": {
              "details": "Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set",
              "params": {
                "_appBase": "Address of the app's base implementation",
                "_name": "Name of the app",
                "_setDefault": "Whether the app proxy app is the default one.       Useful when the Kernel needs to know of an instance of a particular app,       like Vault for escape hatch mechanism."
              },
              "return": "AppProxy instance"
            },
            "newPinnedAppInstance(bytes32,address)": {
              "details": "Create a new pinned instance of an app linked to this kernel",
              "params": {
                "_appBase": "Address of the app's base implementation",
                "_name": "Name of the app"
              },
              "return": "AppProxy instance"
            },
            "newPinnedAppInstance(bytes32,address,bool)": {
              "details": "Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set",
              "params": {
                "_appBase": "Address of the app's base implementation",
                "_name": "Name of the app",
                "_setDefault": "Whether the app proxy app is the default one.       Useful when the Kernel needs to know of an instance of a particular app,       like Vault for escape hatch mechanism."
              },
              "return": "AppProxy instance"
            },
            "setApp(bytes32,bytes32,address)": {
              "details": "Set the resolving address of an app instance or base implementation",
              "params": {
                "_app": "Address of the app",
                "_name": "Name of the app",
                "_namespace": "App namespace to use"
              },
              "return": "ID of app"
            },
            "setRecoveryVaultId(bytes32)": {
              "details": "Set the default vault id for the escape hatch mechanism",
              "params": {
                "_name": "Name of the app"
              }
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6126508061001e6000396000f300606060405260043610620001b55763ffffffff60e060020a600035041663097207788114620001ba5780631113ed0d14620001e2578063178e607914620001f857806325012699146200020e5780632c2333cd146200022457806332f0a3b5146200023f57806338bb6def146200027157806342c71f1d146200028a578063485cc95514620002a3578063756f604914620002cb5780637e7db6e114620002e157806380afdea8146200031757806380cd5ac3146200032d5780638322fff214620003525780638b3dd74914620003685780638ea8dc9d146200037e578063958fde8214620003945780639d4941d814620003b9578063a3b4b07f14620003db578063ae5b254014620003f1578063b7c529ab1462000419578063cbcc65eb146200042f578063cc473be31462000445578063d162f8b0146200045b578063d4aae0c414620004c3578063dabca01914620004d9578063db8a61d414620004ef578063de2873591462000505578063e156a8f3146200051b578063e943d1e61462000540578063ede658b0146200056a578063f8c7fa1e14620005d2578063fdef910614620005fc578063ff289fc5146200066b575b600080fd5b3415620001c657600080fd5b620001d062000690565b60405190815260200160405180910390f35b3415620001ee57600080fd5b620001d0620006b4565b34156200020457600080fd5b620001d0620006d8565b34156200021a57600080fd5b620001d0620006eb565b34156200023057600080fd5b6200023d6004356200070f565b005b34156200024b57600080fd5b62000255620007a0565b604051600160a060020a03909116815260200160405180910390f35b34156200027d57600080fd5b62000255600435620007be565b34156200029657600080fd5b62000255600435620007d9565b3415620002af57600080fd5b6200023d600160a060020a0360043581169060243516620007f4565b3415620002d757600080fd5b620001d062000911565b3415620002ed57600080fd5b62000303600160a060020a036004351662000935565b604051901515815260200160405180910390f35b34156200032357600080fd5b620001d06200093b565b34156200033957600080fd5b62000255600435600160a060020a036024351662000941565b34156200035e57600080fd5b62000255620009ba565b34156200037457600080fd5b620001d0620009bf565b34156200038a57600080fd5b620001d0620009c5565b3415620003a057600080fd5b62000255600435600160a060020a0360243516620009d8565b3415620003c557600080fd5b6200023d600160a060020a036004351662000a46565b3415620003e757600080fd5b620001d062000bcd565b3415620003fd57600080fd5b620001d0600435602435600160a060020a036044351662000bf1565b34156200042557600080fd5b620001d062000c9f565b34156200043b57600080fd5b620001d062000cc3565b34156200045157600080fd5b620001d062000cd6565b34156200046757600080fd5b6200025560048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965062000cfa95505050505050565b3415620004cf57600080fd5b6200025562000e07565b3415620004e557600080fd5b620001d062000e16565b3415620004fb57600080fd5b620001d062000e1c565b34156200051157600080fd5b6200025562000e2f565b34156200052757600080fd5b62000255600160a060020a036004351660243562000e61565b34156200054c57600080fd5b62000255600435600160a060020a0360243516604435151562000e9b565b34156200057657600080fd5b6200025560048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965062000f5695505050505050565b3415620005de57600080fd5b62000255600435600160a060020a036024351660443515156200105f565b34156200060857600080fd5b62000303600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650620010e895505050505050565b34156200067757600080fd5b62000255600160a060020a0360043516602435620011f6565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b6000805160206200260583398151915281565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600080516020620025a58339815191526200073a600080516020620026058339815191528362001229565b620007446200149c565b6000825160200290508291508082526200076133308685620010e8565b15156200076d57600080fd5b60008051602062002605833981519152856040519182526020820152604090810190519081900390206001555050505050565b600154600090815260208190526040902054600160a060020a031690565b600060208190529081526040902054600160a060020a031681565b600090815260208190526040902054600160a060020a031690565b600554600090156200080557600080fd5b6200080f6200123f565b6200082a30600080516020620025e583398151915262000e61565b905062000857600080516020620025c5833981519152600080516020620025e5833981519152856200125c565b506200088360008051602062002605833981519152600080516020620025e5833981519152836200125c565b5080600160a060020a031663c4d66de88360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515620008d357600080fd5b6102c65a03f11515620008e557600080fd5b50507f4214e5fd6d0170d69ea641b5614f5093ebecc9928af51e95685c87617489800e60015550505050565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b50600190565b60035481565b6000600080516020620025a58339815191526200096e600080516020620025c58339815191528562001229565b620009786200149c565b6000825160200290508291508082526200099533308685620010e8565b1515620009a157600080fd5b620009af8787600062000e9b565b979650505050505050565b600081565b60055490565b600080516020620025a583398151915281565b6000600080516020620025a583398151915262000a05600080516020620025c58339815191528562001229565b62000a0f6200149c565b60008251602002905082915080825262000a2c33308685620010e8565b151562000a3857600080fd5b620009af878760006200105f565b60008062000a548362000935565b151562000a6057600080fd5b62000a6a620007a0565b915062000a778262001312565b151562000a8357600080fd5b600160a060020a038316151562000ad85781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151562000ad257600080fd5b62000bc8565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151562000b3057600080fd5b6102c65a03f1151562000b4257600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151562000bab57600080fd5b6102c65a03f1151562000bbd57600080fd5b505050604051805150505b505050565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b6000600080516020620025a583398151915262000c0f858562001229565b62000c196200149c565b60008251602002905082915080825262000c3633308685620010e8565b151562000c4257600080fd5b60008062000c528a8a8a6200125c565b965062000c7f7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb620007d9565b915050803b6000811162000c9257600080fd5b5050505050509392505050565b7f4214e5fd6d0170d69ea641b5614f5093ebecc9928af51e95685c87617489800e81565b600080516020620025e583398151915281565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60008084848462000d0a620014ae565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101562000d5b57808201518382015260200162000d41565b50505050905090810190601f16801562000d895780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151562000da757600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600086604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a18091505b509392505050565b600254600160a060020a031681565b60015481565b600080516020620025c583398151915281565b600062000e5c7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a620007d9565b905090565b600062000e948383600060405180591062000e795750595b818152601f19601f8301168101602001604052905062000f56565b9392505050565b6000600080516020620025a583398151915262000ec8600080516020620025c58339815191528662001229565b62000ed26200149c565b60008251602002905082915080825262000eef33308685620010e8565b151562000efb57600080fd5b62000f17600080516020620025c5833981519152898962001341565b5062000f24308962000e61565b9450851562000f4b5762000f4960008051602062002605833981519152898762000bf1565b505b505050509392505050565b60008084848462000f66620014bf565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101562000fb757808201518382015260200162000f9d565b50505050905090810190601f16801562000fe55780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015156200100357600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600186604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b6000600080516020620025a58339815191526200108c600080516020620025c58339815191528662001229565b620010966200149c565b600082516020029050829150808252620010b333308685620010e8565b1515620010bf57600080fd5b620010db600080516020620025c5833981519152898962001341565b5062000f243089620011f6565b6000620010f462000e2f565b600160a060020a031663fdef91068686868660006040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156200118257808201518382015260200162001168565b50505050905090810190601f168015620011b05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515620011d257600080fd5b6102c65a03f11515620011e457600080fd5b50505060405180519695505050505050565b600062000e94838360006040518059106200120e5750595b818152601f19601f8301168101602001604052905062000cfa565b620012336200149c565b62000e94838362001433565b600554156200124d57600080fd5b6200125762001498565b600555565b6000620012698262001312565b15156200127557600080fd5b838360405191825260208201526040908101905190819003902060008181526020819052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790559091508190849086907fe944a7cdbc6cbd4bfe4713501567365bd379a9df5fd376422712b066d6e6b52290869051600160a060020a03909116815260200160405180910390a49392505050565b600080600160a060020a03831615156200133057600091506200133b565b823b90506000811191505b50919050565b6000806200134f8362001312565b15156200135b57600080fd5b8484604051918252602082015260409081019051809103902091506200138182620007d9565b9050600160a060020a03811615620013b257600160a060020a0381811690841614620013ac57600080fd5b62000dff565b60008281526020819052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790558290859087907fe944a7cdbc6cbd4bfe4713501567365bd379a9df5fd376422712b066d6e6b52290879051600160a060020a03909116815260200160405180910390a4509392505050565b6200143d6200149c565b60026040518059106200144d5750595b9080825280602002602001820160405250905082816000815181106200146f57fe5b6020908102909101015281816001815181106200148857fe5b6020908102909101015292915050565b4390565b60206040519081016040526000815290565b60405161086c80620014d183390190565b6040516108688062001d3d8339019056006060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da00296060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a0029b6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0f1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6ad6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fba165627a7a72305820916cf798e7b0d8464e1766da3aad0abc4449ca3bfe06070490608835e3955ab30029",
            "sourceMap": "307:7592:22:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "606060405260043610620001b55763ffffffff60e060020a600035041663097207788114620001ba5780631113ed0d14620001e2578063178e607914620001f857806325012699146200020e5780632c2333cd146200022457806332f0a3b5146200023f57806338bb6def146200027157806342c71f1d146200028a578063485cc95514620002a3578063756f604914620002cb5780637e7db6e114620002e157806380afdea8146200031757806380cd5ac3146200032d5780638322fff214620003525780638b3dd74914620003685780638ea8dc9d146200037e578063958fde8214620003945780639d4941d814620003b9578063a3b4b07f14620003db578063ae5b254014620003f1578063b7c529ab1462000419578063cbcc65eb146200042f578063cc473be31462000445578063d162f8b0146200045b578063d4aae0c414620004c3578063dabca01914620004d9578063db8a61d414620004ef578063de2873591462000505578063e156a8f3146200051b578063e943d1e61462000540578063ede658b0146200056a578063f8c7fa1e14620005d2578063fdef910614620005fc578063ff289fc5146200066b575b600080fd5b3415620001c657600080fd5b620001d062000690565b60405190815260200160405180910390f35b3415620001ee57600080fd5b620001d0620006b4565b34156200020457600080fd5b620001d0620006d8565b34156200021a57600080fd5b620001d0620006eb565b34156200023057600080fd5b6200023d6004356200070f565b005b34156200024b57600080fd5b62000255620007a0565b604051600160a060020a03909116815260200160405180910390f35b34156200027d57600080fd5b62000255600435620007be565b34156200029657600080fd5b62000255600435620007d9565b3415620002af57600080fd5b6200023d600160a060020a0360043581169060243516620007f4565b3415620002d757600080fd5b620001d062000911565b3415620002ed57600080fd5b62000303600160a060020a036004351662000935565b604051901515815260200160405180910390f35b34156200032357600080fd5b620001d06200093b565b34156200033957600080fd5b62000255600435600160a060020a036024351662000941565b34156200035e57600080fd5b62000255620009ba565b34156200037457600080fd5b620001d0620009bf565b34156200038a57600080fd5b620001d0620009c5565b3415620003a057600080fd5b62000255600435600160a060020a0360243516620009d8565b3415620003c557600080fd5b6200023d600160a060020a036004351662000a46565b3415620003e757600080fd5b620001d062000bcd565b3415620003fd57600080fd5b620001d0600435602435600160a060020a036044351662000bf1565b34156200042557600080fd5b620001d062000c9f565b34156200043b57600080fd5b620001d062000cc3565b34156200045157600080fd5b620001d062000cd6565b34156200046757600080fd5b6200025560048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965062000cfa95505050505050565b3415620004cf57600080fd5b6200025562000e07565b3415620004e557600080fd5b620001d062000e16565b3415620004fb57600080fd5b620001d062000e1c565b34156200051157600080fd5b6200025562000e2f565b34156200052757600080fd5b62000255600160a060020a036004351660243562000e61565b34156200054c57600080fd5b62000255600435600160a060020a0360243516604435151562000e9b565b34156200057657600080fd5b6200025560048035600160a060020a03169060248035919060649060443590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965062000f5695505050505050565b3415620005de57600080fd5b62000255600435600160a060020a036024351660443515156200105f565b34156200060857600080fd5b62000303600160a060020a036004803582169160248035909116916044359160849060643590810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650620010e895505050505050565b34156200067757600080fd5b62000255600160a060020a0360043516602435620011f6565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b6000805160206200260583398151915281565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600080516020620025a58339815191526200073a600080516020620026058339815191528362001229565b620007446200149c565b6000825160200290508291508082526200076133308685620010e8565b15156200076d57600080fd5b60008051602062002605833981519152856040519182526020820152604090810190519081900390206001555050505050565b600154600090815260208190526040902054600160a060020a031690565b600060208190529081526040902054600160a060020a031681565b600090815260208190526040902054600160a060020a031690565b600554600090156200080557600080fd5b6200080f6200123f565b6200082a30600080516020620025e583398151915262000e61565b905062000857600080516020620025c5833981519152600080516020620025e5833981519152856200125c565b506200088360008051602062002605833981519152600080516020620025e5833981519152836200125c565b5080600160a060020a031663c4d66de88360405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401600060405180830381600087803b1515620008d357600080fd5b6102c65a03f11515620008e557600080fd5b50507f4214e5fd6d0170d69ea641b5614f5093ebecc9928af51e95685c87617489800e60015550505050565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b50600190565b60035481565b6000600080516020620025a58339815191526200096e600080516020620025c58339815191528562001229565b620009786200149c565b6000825160200290508291508082526200099533308685620010e8565b1515620009a157600080fd5b620009af8787600062000e9b565b979650505050505050565b600081565b60055490565b600080516020620025a583398151915281565b6000600080516020620025a583398151915262000a05600080516020620025c58339815191528562001229565b62000a0f6200149c565b60008251602002905082915080825262000a2c33308685620010e8565b151562000a3857600080fd5b620009af878760006200105f565b60008062000a548362000935565b151562000a6057600080fd5b62000a6a620007a0565b915062000a778262001312565b151562000a8357600080fd5b600160a060020a038316151562000ad85781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151562000ad257600080fd5b62000bc8565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151562000b3057600080fd5b6102c65a03f1151562000b4257600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151562000bab57600080fd5b6102c65a03f1151562000bbd57600080fd5b505050604051805150505b505050565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b6000600080516020620025a583398151915262000c0f858562001229565b62000c196200149c565b60008251602002905082915080825262000c3633308685620010e8565b151562000c4257600080fd5b60008062000c528a8a8a6200125c565b965062000c7f7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb620007d9565b915050803b6000811162000c9257600080fd5b5050505050509392505050565b7f4214e5fd6d0170d69ea641b5614f5093ebecc9928af51e95685c87617489800e81565b600080516020620025e583398151915281565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60008084848462000d0a620014ae565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101562000d5b57808201518382015260200162000d41565b50505050905090810190601f16801562000d895780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f080151562000da757600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600086604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a18091505b509392505050565b600254600160a060020a031681565b60015481565b600080516020620025c583398151915281565b600062000e5c7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a620007d9565b905090565b600062000e948383600060405180591062000e795750595b818152601f19601f8301168101602001604052905062000f56565b9392505050565b6000600080516020620025a583398151915262000ec8600080516020620025c58339815191528662001229565b62000ed26200149c565b60008251602002905082915080825262000eef33308685620010e8565b151562000efb57600080fd5b62000f17600080516020620025c5833981519152898962001341565b5062000f24308962000e61565b9450851562000f4b5762000f4960008051602062002605833981519152898762000bf1565b505b505050509392505050565b60008084848462000f66620014bf565b600160a060020a03841681526020810183905260606040820181815290820183818151815260200191508051906020019080838360005b8381101562000fb757808201518382015260200162000f9d565b50505050905090810190601f16801562000fe55780820380516001836020036101000a031916815260200191505b50945050505050604051809103906000f08015156200100357600080fd5b90507fd880e726dced8808d727f02dd0e6fdd3a945b24bfee77e13367bcbe61ddbaf4781600186604051600160a060020a03909316835290151560208301526040808301919091526060909101905180910390a1949350505050565b6000600080516020620025a58339815191526200108c600080516020620025c58339815191528662001229565b620010966200149c565b600082516020029050829150808252620010b333308685620010e8565b1515620010bf57600080fd5b620010db600080516020620025c5833981519152898962001341565b5062000f243089620011f6565b6000620010f462000e2f565b600160a060020a031663fdef91068686868660006040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156200118257808201518382015260200162001168565b50505050905090810190601f168015620011b05780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515620011d257600080fd5b6102c65a03f11515620011e457600080fd5b50505060405180519695505050505050565b600062000e94838360006040518059106200120e5750595b818152601f19601f8301168101602001604052905062000cfa565b620012336200149c565b62000e94838362001433565b600554156200124d57600080fd5b6200125762001498565b600555565b6000620012698262001312565b15156200127557600080fd5b838360405191825260208201526040908101905190819003902060008181526020819052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790559091508190849086907fe944a7cdbc6cbd4bfe4713501567365bd379a9df5fd376422712b066d6e6b52290869051600160a060020a03909116815260200160405180910390a49392505050565b600080600160a060020a03831615156200133057600091506200133b565b823b90506000811191505b50919050565b6000806200134f8362001312565b15156200135b57600080fd5b8484604051918252602082015260409081019051809103902091506200138182620007d9565b9050600160a060020a03811615620013b257600160a060020a0381811690841614620013ac57600080fd5b62000dff565b60008281526020819052604090819020805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0386161790558290859087907fe944a7cdbc6cbd4bfe4713501567365bd379a9df5fd376422712b066d6e6b52290879051600160a060020a03909116815260200160405180910390a4509392505050565b6200143d6200149c565b60026040518059106200144d5750595b9080825280602002602001820160405250905082816000815181106200146f57fe5b6020908102909101015281816001815181106200148857fe5b6020908102909101015292915050565b4390565b60206040519081016040526000815290565b60405161086c80620014d183390190565b6040516108688062001d3d8339019056006060604052341561000f57600080fd5b60405161086c38038061086c83398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061017881026105061704565b905060008251111561012457610095816401000000006104d961023b82021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b5050505061014660015461017864010000000002610506176401000000009004565b60028054600160a060020a031916600160a060020a03928316179081905516151561017057600080fd5b505050610268565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561021b57600080fd5b6102c65a03f1151561022c57600080fd5b50505060405180519392505050565b600080600160a060020a03831615156102575760009150610262565b823b90506000811191505b50919050565b6105f5806102776000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461019a5780630ceafa2a146101bf5780631113ed0d146101d2578063178e6079146101e557806325012699146101f85780632b2584f61461020b5780634555d5c91461021e5780635c60da1b14610231578063756f6049146102605780637e84a4ff1461027357806380afdea814610286578063a3b4b07f14610299578063cbcc65eb146102ac578063cc473be3146102bf578063d4aae0c4146102d2578063db8a61d4146102e5575b60006127105a1015610153576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee13334604051600160a060020a03909216825260208201526040908101905180910390a1610197565b61015b6102f8565b9050610197816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610307945050505050565b50005b34156101a557600080fd5b6101ad610317565b60405190815260200160405180910390f35b34156101ca57600080fd5b6101ad61033b565b34156101dd57600080fd5b6101ad610341565b34156101f057600080fd5b6101ad610365565b341561020357600080fd5b6101ad610389565b341561021657600080fd5b6101ad6103ad565b341561022957600080fd5b6101ad6103b2565b341561023c57600080fd5b6102446102f8565b604051600160a060020a03909116815260200160405180910390f35b341561026b57600080fd5b6101ad6103b7565b341561027e57600080fd5b6101ad6103db565b341561029157600080fd5b6101ad6103e0565b34156102a457600080fd5b6101ad6103e6565b34156102b757600080fd5b6101ad61040a565b34156102ca57600080fd5b6101ad61042e565b34156102dd57600080fd5b610244610452565b34156102f057600080fd5b6101ad610461565b600254600160a060020a031690565b61031382826000610485565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600190565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b600054600160a060020a031681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000806000610493866104d9565b151561049e57600080fd5b5061271060008086516020880189855a03f43d93509150838310156104c257600080fd5b604051836000823e8280156104d5578482f35b8482fd5b600080600160a060020a03831615156104f55760009150610500565b823b90506000811191505b50919050565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156105a957600080fd5b6102c65a03f115156105ba57600080fd5b505050604051805193925050505600a165627a7a723058202eab0453a4a77f432a5a2f69782ea59ff68fef179836c3250afe44c92413d4da00296060604052341561000f57600080fd5b60405161086838038061086883398101604052808051919060200180519190602001805160008054600160a060020a031916600160a060020a0387161781556001859055920191849150839083906100738364010000000061013081026104af1704565b905060008251111561012457610095816401000000006105d36101f382021704565b15156100a057600080fd5b80600160a060020a03168260405180828051906020019080838360005b838110156100d55780820151838201526020016100bd565b50505050905090810190601f1680156101025780820380516001836020036101000a031916815260200191505b509150506000604051808303818561646e5a03f4915050151561012457600080fd5b50505050505050610220565b60008054600160a060020a03166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b15156101d357600080fd5b6102c65a03f115156101e457600080fd5b50505060405180519392505050565b600080600160a060020a038316151561020f576000915061021a565b823b90506000811191505b50919050565b6106398061022f6000396000f3006060604052600436106100e55763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146101a75780630ceafa2a146101cc5780631113ed0d146101df578063178e6079146101f257806325012699146102055780632b2584f6146102185780634555d5c91461022b5780635c60da1b1461023e578063756f60491461027a5780637e84a4ff1461028d57806380afdea8146102a0578063a3b4b07f146102b3578063cbcc65eb146102c6578063cc473be3146102d9578063d4aae0c4146102ec578063db8a61d4146102ff575b60006127105a1015610160576000341180156100ff575036155b151561010a57600080fd5b7f15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1333460405173ffffffffffffffffffffffffffffffffffffffff909216825260208201526040908101905180910390a16101a4565b610168610312565b90506101a4816000368080601f016020809104026020016040519081016040528181529291906020840183838082843750610324945050505050565b50005b34156101b257600080fd5b6101ba610334565b60405190815260200160405180910390f35b34156101d757600080fd5b6101ba610358565b34156101ea57600080fd5b6101ba61035e565b34156101fd57600080fd5b6101ba610382565b341561021057600080fd5b6101ba6103a6565b341561022357600080fd5b6101ba6103ca565b341561023657600080fd5b6101ba6103cf565b341561024957600080fd5b610251610312565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561028557600080fd5b6101ba6103d4565b341561029857600080fd5b6101ba6103f8565b34156102ab57600080fd5b6101ba6103fd565b34156102be57600080fd5b6101ba610403565b34156102d157600080fd5b6101ba610427565b34156102e457600080fd5b6101ba61044b565b34156102f757600080fd5b61025161046f565b341561030a57600080fd5b6101ba61048b565b600061031f6001546104af565b905090565b6103308282600061057f565b5050565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b61271081565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b600181565b600290565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b600281565b60015481565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f81565b6000805473ffffffffffffffffffffffffffffffffffffffff166342c71f1d7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f8460405191825260208201526040908101905180910390206000604051602001526040517c010000000000000000000000000000000000000000000000000000000063ffffffff84160281526004810191909152602401602060405180830381600087803b151561055f57600080fd5b6102c65a03f1151561057057600080fd5b50505060405180519392505050565b600080600061058d866105d3565b151561059857600080fd5b5061271060008086516020880189855a03f43d93509150838310156105bc57600080fd5b604051836000823e8280156105cf578482f35b8482fd5b60008073ffffffffffffffffffffffffffffffffffffffff831615156105fc5760009150610607565b823b90506000811191505b509190505600a165627a7a72305820d0cd8cb891027e727a3a5e23391e7accbccc4ac28afa8d6178613fa9206fd58a0029b6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0f1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6ad6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fba165627a7a72305820916cf798e7b0d8464e1766da3aad0abc4449ca3bfe06070490608835e3955ab30029",
            "sourceMap": "307:7592:22:-;;;;;;;;;-1:-1:-1;;;307:7592:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1020:101:23;;;;;;;;;;;;;;;;;;;;;;;;;;;1127:106;;;;;;;;;;;;796:111;;;;;;;;;;;;1239:103;;;;;;;;;;;;5743:176:22;;;;;;;;;;;;;;;;5517:103;;;;;;;;;;;;;;;-1:-1:-1;;;;;5517:103:22;;;;;;;;;;;;;;1612:40:23;;;;;;;;;;;;;;5292:92:22;;;;;;;;;;;;;;1280:376;;;;;;;;;;-1:-1:-1;;;;;1280:376:22;;;;;;;;;;565:107:23;;;;;;;;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;;;;;;;;;;;;;;;;;;113:20:7;;;;;;;;;;;;1872:210:22;;;;;;;;;;;;-1:-1:-1;;;;;1872:210:22;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;652:109:22;;;;;;;;;;;;3374:222;;;;;;;;;;;;-1:-1:-1;;;;;3374:222:22;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;1457:100:23;;;;;;;;;;;;4925:212:22;;;;;;;;;;;;;;-1:-1:-1;;;;;4925:212:22;;;;;767:109;;;;;;;;;;;;1348:103:23;;;;;;;;;;;;913:101;;;;;;;;;;;;845:287:20;;;;;;;;;;;;;-1:-1:-1;;;;;845:287:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;845:287:20;;-1:-1:-1;845:287:20;;-1:-1:-1;;;;;;845:287:20;86:21:7;;;;;;;;;;;;1658:30:23;;;;;;;;;;;;678:112;;;;;;;;;;;;5999:87:22;;;;;;;;;;;;211:157:20;;;;;;;;;;-1:-1:-1;;;;;211:157:20;;;;;;;2576:575:22;;;;;;;;;;;;-1:-1:-1;;;;;2576:575:22;;;;;;;;;374:295:20;;;;;;;;;;;;;-1:-1:-1;;;;;374:295:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;374:295:20;;-1:-1:-1;374:295:20;;-1:-1:-1;;;;;;374:295:20;4097:587:22;;;;;;;;;;;;-1:-1:-1;;;;;4097:587:22;;;;;;;;;6454:177;;;;;;;;;;-1:-1:-1;;;;;6454:177:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6454:177:22;;-1:-1:-1;6454:177:22;;-1:-1:-1;;;;;;6454:177:22;675:164:20;;;;;;;;;;-1:-1:-1;;;;;675:164:20;;;;;;;1020:101:23;1055:66;1020:101;:::o;1127:106::-;1167:66;1127:106;:::o;796:111::-;-1:-1:-1;;;;;;;;;;;796:111:23;:::o;1239:103::-;1276:66;1239:103;:::o;5743:176:22:-;-1:-1:-1;;;;;;;;;;;5809:30:22;-1:-1:-1;;;;;;;;;;;5833:5:22;5809:3;:30::i;:::-;7358:16;;:::i;:::-;7384:18;7405:6;:13;7421:2;7405:18;7384:39;;7463:6;7456:13;;7512:10;7507:3;7500:6;7599:52;7613:10;7633:4;7640:5;7647:3;7599:13;:52::i;:::-;7591:61;;;;;;;;-1:-1:-1;;;;;;;;;;;5906:5:22;5876:36;;;;;;;;;;;;;;;;;;;;;5858:15;:54;-1:-1:-1;;;;;5743:176:22:o;5517:103::-;5597:15;;5566:7;5592:21;;;;;;;;;;;-1:-1:-1;;;;;5592:21:22;5517:103;:::o;1612:40:23:-;;;;;;;;;;;;;-1:-1:-1;;;;;1612:40:23;;:::o;5292:92:22:-;5342:7;5368:9;;;;;;;;;;;-1:-1:-1;;;;;5368:9:22;;5292:92::o;1280:376::-;140:19:13;;1397:8:22;;140:24:13;132:33;;;;;;1373:13:22;:11;:13::i;:::-;1413:29;1425:4;-1:-1:-1;;;;;;;;;;;1413:11:22;:29::i;:::-;1397:46;-1:-1:-1;1454:50:22;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1495:8:22;1454:7;:50::i;:::-;-1:-1:-1;1514:44:22;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;1554:3:22;1514:7;:44::i;:::-;;1569:3;-1:-1:-1;;;;;1569:14:22;;1584:19;1569:35;;-1:-1:-1;;;1569:35:22;;;;;;-1:-1:-1;;;;;1569:35:22;;;;;;;;;-1:-1:-1;1569:35:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;810:66:22;1633:16;1615:34;-1:-1:-1;;;;1280:376:22:o;565:107:23:-;606:66;565:107;:::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;113:20:7:-;;;;:::o;1872:210:22:-;2001:17;-1:-1:-1;;;;;;;;;;;1952:31:22;-1:-1:-1;;;;;;;;;;;1977:5:22;1952:3;:31::i;:::-;7358:16;;:::i;:::-;7384:18;7405:6;:13;7421:2;7405:18;7384:39;;7463:6;7456:13;;7512:10;7507:3;7500:6;7599:52;7613:10;7633:4;7640:5;7647:3;7599:13;:52::i;:::-;7591:61;;;;;;;;2037:38;2052:5;2059:8;2069:5;2037:14;:38::i;:::-;2030:45;1872:210;-1:-1:-1;;;;;;;1872:210:22:o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;652:109:22:-;-1:-1:-1;;;;;;;;;;;652:109:22;:::o;3374:222::-;3509:17;-1:-1:-1;;;;;;;;;;;3460:31:22;-1:-1:-1;;;;;;;;;;;3485:5:22;3460:3;:31::i;:::-;7358:16;;:::i;:::-;7384:18;7405:6;:13;7421:2;7405:18;7384:39;;7463:6;7456:13;;7512:10;7507:3;7500:6;7599:52;7613:10;7633:4;7640:5;7647:3;7599:13;:52::i;:::-;7591:61;;;;;;;;3545:44;3566:5;3573:8;3583:5;3545:20;:44::i;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;1457:100:23:-;1491:66;1457:100;:::o;4925:212:22:-;5069:10;-1:-1:-1;;;;;;;;;;;5013:22:22;5017:10;5029:5;5013:3;:22::i;:::-;7358:16;;:::i;:::-;7384:18;7405:6;:13;7421:2;7405:18;7384:39;;7463:6;7456:13;;7512:10;7507:3;7500:6;7599:52;7613:10;7633:4;7640:5;7647:3;7599:13;:52::i;:::-;7591:61;;;;;;;;7757:14;7802:12;5098:32;5106:10;5118:5;5125:4;5098:7;:32::i;:::-;5091:39;;7774:18;1276:66:23;7774:6:22;:18::i;:::-;7757:35;-1:-1:-1;;7843:11:22;;7888:1;7881:8;;7873:17;;;;;;7662:1;;4925:212;;;;;;;;;:::o;767:109::-;810:66;767:109;:::o;1348:103:23:-;-1:-1:-1;;;;;;;;;;;1348:103:23;:::o;913:101::-;948:66;913:101;:::o;845:287:20:-;947:14;973:20;1015:7;1024:6;1032:18;996:55;;:::i;:::-;-1:-1:-1;;;;;996:55:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;973:78:20;;1061:42;1081:5;1089;1096:6;1061:42;;-1:-1:-1;;;;;1061:42:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1120:5;1113:12;;845:287;;;;;;;:::o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;1658:30:23:-;;;;:::o;678:112::-;-1:-1:-1;;;;;;;;;;;678:112:23;:::o;5999:87:22:-;6035:4;6063:15;1491:66:23;6063:6:22;:15::i;:::-;6051:28;;5999:87;:::o;211:157:20:-;281:19;319:42;331:7;340:6;358:1;348:12;;;;;;;;;;;;;-1:-1:-1;;348:12:20;;;;;;;;;;;;319:11;:42::i;:::-;312:49;211:157;-1:-1:-1;;;211:157:20:o;2576:575:22:-;2723:17;-1:-1:-1;;;;;;;;;;;2674:31:22;-1:-1:-1;;;;;;;;;;;2699:5:22;2674:3;:31::i;:::-;7358:16;;:::i;:::-;7384:18;7405:6;:13;7421:2;7405:18;7384:39;;7463:6;7456:13;;7512:10;7507:3;7500:6;7599:52;7613:10;7633:4;7640:5;7647:3;7599:13;:52::i;:::-;7591:61;;;;;;;;2752:50;-1:-1:-1;;;;;;;;;;;2786:5:22;2793:8;2752:12;:50::i;:::-;;2823:24;2835:4;2841:5;2823:11;:24::i;:::-;2812:35;;3064:11;3060:85;;;3091:43;-1:-1:-1;;;;;;;;;;;3118:5:22;3125:8;3091:6;:43::i;:::-;;3060:85;2576:575;;;;;;;;;:::o;374:295:20:-;470:19;501:25;553:7;562:6;570:18;529:60;;:::i;:::-;-1:-1:-1;;;;;529:60:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;501:88:20;;599:41;619:5;627:4;633:6;599:41;;-1:-1:-1;;;;;599:41:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;657:5;374:295;-1:-1:-1;;;;374:295:20:o;4097:587:22:-;4250:17;-1:-1:-1;;;;;;;;;;;4201:31:22;-1:-1:-1;;;;;;;;;;;4226:5:22;4201:3;:31::i;:::-;7358:16;;:::i;:::-;7384:18;7405:6;:13;7421:2;7405:18;7384:39;;7463:6;7456:13;;7512:10;7507:3;7500:6;7599:52;7613:10;7633:4;7640:5;7647:3;7599:13;:52::i;:::-;7591:61;;;;;;;;4279:50;-1:-1:-1;;;;;;;;;;;4313:5:22;4320:8;4279:12;:50::i;:::-;;4350:30;4368:4;4374:5;4350:17;:30::i;6454:177::-;6555:4;6578:5;:3;:5::i;:::-;-1:-1:-1;;;;;6578:19:22;;6598:4;6604:6;6612:5;6619:4;6578:46;;;;;;;;-1:-1:-1;;;6578:46:22;;;;;;-1:-1:-1;;;;;6578:46:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6454:177:22;-1:-1:-1;;;;;;6454:177:22:o;675:164:20:-;751:14;784:48;802:7;811:6;829:1;819:12;;;;;;;;;;;;;-1:-1:-1;;819:12:20;;;;;;;;;;;;784:17;:48::i;223:126:2:-;283:11;;:::i;:::-;313:29;325:2;338;313:3;:29::i;576:96:13:-;140:19;;:24;132:33;;;;;;649:16;:14;:16::i;:::-;627:19;:38;576:96::o;6637:251:22:-;6721:10;6751:16;6762:4;6751:10;:16::i;:::-;6743:25;;;;;;;;6793:10;6805:5;6783:28;;;;;;;;;;;;;;;;;;;;;6821:4;:8;;;;;;;;;;;;:15;;-1:-1:-1;;6821:15:22;-1:-1:-1;;;;;6821:15:22;;;;;6783:28;;-1:-1:-1;6783:28:22;;6865:5;;6853:10;;6846:35;;6821:15;;6846:35;-1:-1:-1;;;;;6846:35:22;;;;;;;;;;;;;;6637:251;;;;;:::o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;6894:394:22:-;6983:10;7085:11;7013:16;7024:4;7013:10;:16::i;:::-;7005:25;;;;;;;;7056:10;7068:5;7046:28;;;;;;;;;;;;;;;;;;;;7041:33;;7099:10;7106:2;7099:6;:10::i;:::-;7085:24;-1:-1:-1;;;;;;7123:17:22;;;7119:163;;-1:-1:-1;;;;;7164:11:22;;;;;;;7156:20;;;;;;7119:163;;;7207:4;:8;;;;;;;;;;;;:15;;-1:-1:-1;;7207:15:22;-1:-1:-1;;;;;7207:15:22;;;;;:8;;7255:5;;7243:10;;7236:35;;7207:15;;7236:35;-1:-1:-1;;;;;7236:35:22;;;;;;;;;;;;;;6894:394;;;;;;:::o;1482:148:2:-;1542:11;;:::i;:::-;1583:1;1569:16;;;;;;;;;;;;;;;;;;;;;;;;1565:20;;1602:2;1595:1;1597;1595:4;;;;;;;;;;;;;;;;:9;1621:2;1614:1;1616;1614;:4;;;;;;;;;;;;;;;:9;1482:148;;-1:-1:-1;;1482:148:2:o;856:94:13:-;931:12;856:94;:::o;307:7592:22:-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o;:::-;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1961600",
              "executionCost": "2072",
              "totalCost": "1963672"
            },
            "external": {
              "ACL_APP()": "632",
              "ACL_APP_ID()": "infinite",
              "APM_NODE()": "236",
              "APP_ADDR_NAMESPACE()": "infinite",
              "APP_BASES_NAMESPACE()": "infinite",
              "APP_MANAGER_ROLE()": "infinite",
              "CORE_NAMESPACE()": "434",
              "DEFAULT_VAULT_ID()": "676",
              "ETH()": "600",
              "ETH_NODE()": "720",
              "KERNEL_APP()": "302",
              "KERNEL_APP_ID()": "258",
              "acl()": "1290",
              "allowRecoverability(address)": "545",
              "appId()": "678",
              "apps(bytes32)": "796",
              "getApp(bytes32)": "818",
              "getInitializationBlock()": "744",
              "getRecoveryVault()": "971",
              "hasPermission(address,address,bytes32,bytes)": "infinite",
              "initialize(address,address)": "infinite",
              "kernel()": "1117",
              "newAppInstance(bytes32,address)": "infinite",
              "newAppInstance(bytes32,address,bool)": "infinite",
              "newAppProxy(address,bytes32)": "infinite",
              "newAppProxy(address,bytes32,bytes)": "infinite",
              "newAppProxyPinned(address,bytes32)": "infinite",
              "newAppProxyPinned(address,bytes32,bytes)": "infinite",
              "newPinnedAppInstance(bytes32,address)": "infinite",
              "newPinnedAppInstance(bytes32,address,bool)": "infinite",
              "recoveryVaultId()": "986",
              "setApp(bytes32,bytes32,address)": "infinite",
              "setRecoveryVaultId(bytes32)": "infinite",
              "transferToVault(address)": "infinite"
            },
            "internal": {
              "_setApp(bytes32,bytes32,address)": "infinite",
              "_setAppIfNew(bytes32,bytes32,address)": "infinite"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "APP_MANAGER_ROLE()": "8ea8dc9d",
            "CORE_NAMESPACE()": "756f6049",
            "DEFAULT_VAULT_ID()": "b7c529ab",
            "ETH()": "8322fff2",
            "ETH_NODE()": "cc473be3",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "acl()": "de287359",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "apps(bytes32)": "38bb6def",
            "getApp(bytes32)": "42c71f1d",
            "getInitializationBlock()": "8b3dd749",
            "getRecoveryVault()": "32f0a3b5",
            "hasPermission(address,address,bytes32,bytes)": "fdef9106",
            "initialize(address,address)": "485cc955",
            "kernel()": "d4aae0c4",
            "newAppInstance(bytes32,address)": "80cd5ac3",
            "newAppInstance(bytes32,address,bool)": "e943d1e6",
            "newAppProxy(address,bytes32)": "e156a8f3",
            "newAppProxy(address,bytes32,bytes)": "ede658b0",
            "newAppProxyPinned(address,bytes32)": "ff289fc5",
            "newAppProxyPinned(address,bytes32,bytes)": "d162f8b0",
            "newPinnedAppInstance(bytes32,address)": "958fde82",
            "newPinnedAppInstance(bytes32,address,bool)": "f8c7fa1e",
            "recoveryVaultId()": "dabca019",
            "setApp(bytes32,bytes32,address)": "ae5b2540",
            "setRecoveryVaultId(bytes32)": "2c2333cd",
            "transferToVault(address)": "9d4941d8"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"}],\"name\":\"setRecoveryVaultId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"apps\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"bytes32\"}],\"name\":\"getApp\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_baseAcl\",\"type\":\"address\"},{\"name\":\"_permissionsCreator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_appBase\",\"type\":\"address\"}],\"name\":\"newAppInstance\",\"outputs\":[{\"name\":\"appProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_appBase\",\"type\":\"address\"}],\"name\":\"newPinnedAppInstance\",\"outputs\":[{\"name\":\"appProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_namespace\",\"type\":\"bytes32\"},{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_app\",\"type\":\"address\"}],\"name\":\"setApp\",\"outputs\":[{\"name\":\"id\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DEFAULT_VAULT_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoveryVaultId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"acl\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_appBase\",\"type\":\"address\"},{\"name\":\"_setDefault\",\"type\":\"bool\"}],\"name\":\"newAppInstance\",\"outputs\":[{\"name\":\"appProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"},{\"name\":\"_initializePayload\",\"type\":\"bytes\"}],\"name\":\"newAppProxy\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_name\",\"type\":\"bytes32\"},{\"name\":\"_appBase\",\"type\":\"address\"},{\"name\":\"_setDefault\",\"type\":\"bool\"}],\"name\":\"newPinnedAppInstance\",\"outputs\":[{\"name\":\"appProxy\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"bytes\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_kernel\",\"type\":\"address\"},{\"name\":\"_appId\",\"type\":\"bytes32\"}],\"name\":\"newAppProxyPinned\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"proxy\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"isUpgradeable\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"appId\",\"type\":\"bytes32\"}],\"name\":\"NewAppProxy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"namespace\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"app\",\"type\":\"address\"}],\"name\":\"SetApp\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"acl()\":{\"details\":\"Get the installed ACL app\",\"return\":\"ACL app\"},\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"getApp(bytes32)\":{\"details\":\"Get the address of an app instance or base implementation\",\"params\":{\"_id\":\"App identifier\"},\"return\":\"Address of the app\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the address of the recovery Vault instance (to recover funds)\",\"return\":\"Address of the Vault\"},\"hasPermission(address,address,bytes32,bytes)\":{\"details\":\"Function called by apps to check ACL on kernel or to check permission status\",\"params\":{\"_how\":\"Extra data for ACL auth\",\"_what\":\"Identifier for a group of actions in app\",\"_where\":\"Address of the app\",\"_who\":\"Sender of the original call\"},\"return\":\"boolean indicating whether the ACL allows the role or not\"},\"initialize(address,address)\":{\"details\":\"Initialize can only be called once. It saves the block number in which it was initialized.\",\"params\":{\"_baseAcl\":\"Address of base ACL app\",\"_permissionsCreator\":\"Entity that will be given permission over createPermission\"}},\"newAppInstance(bytes32,address)\":{\"details\":\"Create a new instance of an app linked to this kernel\",\"params\":{\"_appBase\":\"Address of the app's base implementation\",\"_name\":\"Name of the app\"},\"return\":\"AppProxy instance\"},\"newAppInstance(bytes32,address,bool)\":{\"details\":\"Create a new instance of an app linked to this kernel and set its base     implementation if it was not already set\",\"params\":{\"_appBase\":\"Address of the app's base implementation\",\"_name\":\"Name of the app\",\"_setDefault\":\"Whether the app proxy app is the default one.       Useful when the Kernel needs to know of an instance of a particular app,       like Vault for escape hatch mechanism.\"},\"return\":\"AppProxy instance\"},\"newPinnedAppInstance(bytes32,address)\":{\"details\":\"Create a new pinned instance of an app linked to this kernel\",\"params\":{\"_appBase\":\"Address of the app's base implementation\",\"_name\":\"Name of the app\"},\"return\":\"AppProxy instance\"},\"newPinnedAppInstance(bytes32,address,bool)\":{\"details\":\"Create a new pinned instance of an app linked to this kernel and set     its base implementation if it was not already set\",\"params\":{\"_appBase\":\"Address of the app's base implementation\",\"_name\":\"Name of the app\",\"_setDefault\":\"Whether the app proxy app is the default one.       Useful when the Kernel needs to know of an instance of a particular app,       like Vault for escape hatch mechanism.\"},\"return\":\"AppProxy instance\"},\"setApp(bytes32,bytes32,address)\":{\"details\":\"Set the resolving address of an app instance or base implementation\",\"params\":{\"_app\":\"Address of the app\",\"_name\":\"Name of the app\",\"_namespace\":\"App namespace to use\"},\"return\":\"ID of app\"},\"setRecoveryVaultId(bytes32)\":{\"details\":\"Set the default vault id for the escape hatch mechanism\",\"params\":{\"_name\":\"Name of the app\"}},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"initialize(address,address)\":{\"notice\":\"Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/kernel/Kernel.sol\":\"Kernel\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelStorage.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyBase(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        kernel = _kernel;\\n        appId = _appId;\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel.getApp(keccak256(APP_BASES_NAMESPACE, _appId));\\n    }\\n}\\n\",\"keccak256\":\"0xc084b7b69ae72fb0dcbbf426517aa65fd5842309dea77831a993d0f5fff01c10\"},\"@aragon/os/contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n        pinnedCode = getAppBase(appId);\\n        require(pinnedCode != address(0));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode;\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n}\\n\",\"keccak256\":\"0x5a18cba7c2b3f0118516dae74e05ca95ffa7d845353869609db41173660ebdc9\"},\"@aragon/os/contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    function AppProxyUpgradeable(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n             AppProxyBase(_kernel, _appId, _initializePayload) public\\n    {\\n\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0x399a61bef2ea0035edf7adc57f731620bc2f6d044e715ac6f894e51e16d3f1b9\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 constant public FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        delegatedFwd(_dst, _calldata, 0);\\n    }\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    * @param _minReturnSize Minimum size the call needs to return, if less than that it will revert\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata, uint256 _minReturnSize) internal {\\n        require(isContract(_dst));\\n        uint256 size;\\n        uint256 result;\\n        uint256 fwd_gas_limit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            result := delegatecall(sub(gas, fwd_gas_limit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            size := returndatasize\\n        }\\n\\n        require(size >= _minReturnSize);\\n\\n        assembly {\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc08eb0dec7d649648c9e15f7d3906fc979f62b6cb7cccc6553d6bf4d2ed2f63a\"},\"@aragon/os/contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () payable public {\\n        // send / transfer\\n        if (msg.gas < FWD_GAS_LIMIT) {\\n            require(msg.value > 0 && msg.data.length == 0);\\n            ProxyDeposit(msg.sender, msg.value);\\n        } else { // all calls except for send or transfer\\n            address target = implementation();\\n            delegatedFwd(target, msg.data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x91bf6e5fa17af2d12f5923d5da45a42de8a1b75a54d466705a3140fc3606db18\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/factory/AppProxyFactory.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x472a3f313ca8ecdb36f6c1a0fd7eeb829c2c4d1d7c040edf6808dfa42e104eaf\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/kernel/Kernel.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\n\\n\\ncontract Kernel is IKernel, KernelStorage, Initializable, IsContract, AppProxyFactory, ACLSyntaxSugar, VaultRecoverable {\\n    // Hardocde constant to save gas\\n    //bytes32 constant public APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    //bytes32 constant public DEFAULT_VAULT_ID = keccak256(APP_ADDR_NAMESPACE, apmNamehash(\\\"vault\\\"));\\n    bytes32 constant public APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n    bytes32 constant public DEFAULT_VAULT_ID = 0x4214e5fd6d0170d69ea641b5614f5093ebecc9928af51e95685c87617489800e;\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _baseAcl, address _permissionsCreator) onlyInit public {\\n        initialized();\\n\\n        IACL acl = IACL(newAppProxy(this, ACL_APP_ID));\\n\\n        _setApp(APP_BASES_NAMESPACE, ACL_APP_ID, _baseAcl);\\n        _setApp(APP_ADDR_NAMESPACE, ACL_APP_ID, acl);\\n\\n        acl.initialize(_permissionsCreator);\\n\\n        recoveryVaultId = DEFAULT_VAULT_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        return newAppInstance(_name, _appBase, false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _name, address _appBase, bool _setDefault) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\\n        appProxy = newAppProxy(this, _name);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(APP_ADDR_NAMESPACE, _name, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _name, address _appBase) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        return newPinnedAppInstance(_name, _appBase, false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @param _name Name of the app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _name, address _appBase, bool _setDefault) auth(APP_MANAGER_ROLE, arr(APP_BASES_NAMESPACE, _name)) public returns (ERCProxy appProxy) {\\n        _setAppIfNew(APP_BASES_NAMESPACE, _name, _appBase);\\n        appProxy = newAppProxyPinned(this, _name);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(APP_ADDR_NAMESPACE, _name, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _name Name of the app\\n    * @param _app Address of the app\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _name, address _app) auth(APP_MANAGER_ROLE, arr(_namespace, _name)) kernelIntegrity public returns (bytes32 id) {\\n        return _setApp(_namespace, _name, _app);\\n    }\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _id App identifier\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _id) public view returns (address) {\\n        return apps[_id];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[recoveryVaultId];\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _name Name of the app\\n    */\\n    function setRecoveryVaultId(bytes32 _name) auth(APP_MANAGER_ROLE, arr(APP_ADDR_NAMESPACE, _name)) public {\\n        recoveryVaultId = keccak256(APP_ADDR_NAMESPACE, _name);\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(ACL_APP));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        return acl().hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\\n        require(isContract(_app));\\n        id = keccak256(_namespace, _name);\\n        apps[id] = _app;\\n        SetApp(_namespace, _name, id, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _name, address _app) internal returns (bytes32 id) {\\n        require(isContract(_app));\\n\\n        id = keccak256(_namespace, _name);\\n\\n        address app = getApp(id);\\n        if (app != address(0)) {\\n            require(app == _app);\\n        } else {\\n            apps[id] = _app;\\n            SetApp(_namespace, _name, id, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory params) {\\n        bytes memory how;\\n        uint256 byteLength = params.length * 32;\\n        assembly {\\n            how := params // forced casting\\n            mstore(how, byteLength)\\n        }\\n        // Params is invalid from this point fwd\\n        require(hasPermission(msg.sender, address(this), _role, how));\\n        _;\\n    }\\n\\n    modifier kernelIntegrity {\\n        _; // After execution check integrity\\n        address kernel = getApp(KERNEL_APP);\\n        uint256 size;\\n        assembly { size := extcodesize(kernel) }\\n        require(size > 0);\\n    }\\n}\\n\",\"keccak256\":\"0x924bb490f4f12d54806b512aeb107f22443c7138f229b087da06938364ae702b\"},\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"},\"@aragon/os/contracts/lib/misc/ERCProxy.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ERCProxy {\\n    uint256 constant public FORWARDING = 1;\\n    uint256 constant public UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xba656dc63cdfe99f80d29e0a4e15538e7915aada88ba52967a1de063225611ca\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "initialize(address,address)": {
              "notice": "Initializes a kernel instance along with its ACL and sets `_permissionsCreator` as the entity that can create other permissions"
            },
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            }
          }
        }
      }
    },
    "@aragon/os/contracts/kernel/KernelStorage.sol": {
      "KernelConstants": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6102ca8061001e6000396000f3006060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461009d5780631113ed0d146100c2578063178e6079146100d557806325012699146100e8578063756f6049146100fb578063a3b4b07f1461010e578063cbcc65eb14610121578063cc473be314610134578063db8a61d414610147575b600080fd5b34156100a857600080fd5b6100b061015a565b60405190815260200160405180910390f35b34156100cd57600080fd5b6100b061017e565b34156100e057600080fd5b6100b06101a2565b34156100f357600080fd5b6100b06101c6565b341561010657600080fd5b6100b06101ea565b341561011957600080fd5b6100b061020e565b341561012c57600080fd5b6100b0610232565b341561013f57600080fd5b6100b0610256565b341561015257600080fd5b6100b061027a565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f815600a165627a7a72305820357eac1cedb2d3200b5c008c67d1931620fca1b48b3916e02e829629243db58c0029",
            "sourceMap": "26:1535:23:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100985763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166309720778811461009d5780631113ed0d146100c2578063178e6079146100d557806325012699146100e8578063756f6049146100fb578063a3b4b07f1461010e578063cbcc65eb14610121578063cc473be314610134578063db8a61d414610147575b600080fd5b34156100a857600080fd5b6100b061015a565b60405190815260200160405180910390f35b34156100cd57600080fd5b6100b061017e565b34156100e057600080fd5b6100b06101a2565b34156100f357600080fd5b6100b06101c6565b341561010657600080fd5b6100b06101ea565b341561011957600080fd5b6100b061020e565b341561012c57600080fd5b6100b0610232565b341561013f57600080fd5b6100b0610256565b341561015257600080fd5b6100b061027a565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f815600a165627a7a72305820357eac1cedb2d3200b5c008c67d1931620fca1b48b3916e02e829629243db58c0029",
            "sourceMap": "26:1535:23:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1020:101;;;;;;;;;;;;;;;;;;;;;;;;;;;1127:106;;;;;;;;;;;;796:111;;;;;;;;;;;;1239:103;;;;;;;;;;;;565:107;;;;;;;;;;;;1457:100;;;;;;;;;;;;1348:103;;;;;;;;;;;;913:101;;;;;;;;;;;;678:112;;;;;;;;;;;;1020:101;1055:66;1020:101;:::o;1127:106::-;1167:66;1127:106;:::o;796:111::-;841:66;796:111;:::o;1239:103::-;1276:66;1239:103;:::o;565:107::-;606:66;565:107;:::o;1457:100::-;1491:66;1457:100;:::o;1348:103::-;1385:66;1348:103;:::o;913:101::-;948:66;913:101;:::o;678:112::-;724:66;678:112;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "142800",
              "executionCost": "185",
              "totalCost": "142985"
            },
            "external": {
              "ACL_APP()": "283",
              "ACL_APP_ID()": "305",
              "APM_NODE()": "173",
              "APP_ADDR_NAMESPACE()": "217",
              "APP_BASES_NAMESPACE()": "349",
              "CORE_NAMESPACE()": "261",
              "ETH_NODE()": "327",
              "KERNEL_APP()": "239",
              "KERNEL_APP_ID()": "195"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH_NODE()": "cc473be3",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/kernel/KernelStorage.sol\":\"KernelConstants\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      },
      "KernelStorage": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "name": "apps",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "recoveryVaultId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6103608061001e6000396000f3006060604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146100b35780631113ed0d146100d8578063178e6079146100eb57806325012699146100fe57806338bb6def14610111578063756f604914610150578063a3b4b07f14610163578063cbcc65eb14610176578063cc473be314610189578063dabca0191461019c578063db8a61d4146101af575b600080fd5b34156100be57600080fd5b6100c66101c2565b60405190815260200160405180910390f35b34156100e357600080fd5b6100c66101e6565b34156100f657600080fd5b6100c661020a565b341561010957600080fd5b6100c661022e565b341561011c57600080fd5b610127600435610252565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561015b57600080fd5b6100c661027a565b341561016e57600080fd5b6100c661029e565b341561018157600080fd5b6100c66102c2565b341561019457600080fd5b6100c66102e6565b34156101a757600080fd5b6100c661030a565b34156101ba57600080fd5b6100c6610310565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60015481565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f815600a165627a7a723058209bab0be35534c1697a7760731a4330e18389ddfb81dbe5c5f3640c3d918e56a70029",
            "sourceMap": "1564:127:23:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146100b35780631113ed0d146100d8578063178e6079146100eb57806325012699146100fe57806338bb6def14610111578063756f604914610150578063a3b4b07f14610163578063cbcc65eb14610176578063cc473be314610189578063dabca0191461019c578063db8a61d4146101af575b600080fd5b34156100be57600080fd5b6100c66101c2565b60405190815260200160405180910390f35b34156100e357600080fd5b6100c66101e6565b34156100f657600080fd5b6100c661020a565b341561010957600080fd5b6100c661022e565b341561011c57600080fd5b610127600435610252565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b341561015b57600080fd5b6100c661027a565b341561016e57600080fd5b6100c661029e565b341561018157600080fd5b6100c66102c2565b341561019457600080fd5b6100c66102e6565b34156101a757600080fd5b6100c661030a565b34156101ba57600080fd5b6100c6610310565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b60015481565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f815600a165627a7a723058209bab0be35534c1697a7760731a4330e18389ddfb81dbe5c5f3640c3d918e56a70029",
            "sourceMap": "1564:127:23:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1020:101;;;;;;;;;;;;;;;;;;;;;;;;;;;1127:106;;;;;;;;;;;;796:111;;;;;;;;;;;;1239:103;;;;;;;;;;;;1612:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;565:107;;;;;;;;;;;;1457:100;;;;;;;;;;;;1348:103;;;;;;;;;;;;913:101;;;;;;;;;;;;1658:30;;;;;;;;;;;;678:112;;;;;;;;;;;;1020:101;1055:66;1020:101;:::o;1127:106::-;1167:66;1127:106;:::o;796:111::-;841:66;796:111;:::o;1239:103::-;1276:66;1239:103;:::o;1612:40::-;;;;;;;;;;;;;;;;:::o;565:107::-;606:66;565:107;:::o;1457:100::-;1491:66;1457:100;:::o;1348:103::-;1385:66;1348:103;:::o;913:101::-;948:66;913:101;:::o;1658:30::-;;;;:::o;678:112::-;724:66;678:112;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "172800",
              "executionCost": "209",
              "totalCost": "173009"
            },
            "external": {
              "ACL_APP()": "305",
              "ACL_APP_ID()": "327",
              "APM_NODE()": "173",
              "APP_ADDR_NAMESPACE()": "217",
              "APP_BASES_NAMESPACE()": "393",
              "CORE_NAMESPACE()": "283",
              "ETH_NODE()": "349",
              "KERNEL_APP()": "239",
              "KERNEL_APP_ID()": "195",
              "apps(bytes32)": "551",
              "recoveryVaultId()": "571"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH_NODE()": "cc473be3",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "apps(bytes32)": "38bb6def",
            "recoveryVaultId()": "dabca019"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"apps\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"recoveryVaultId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"@aragon/os/contracts/kernel/KernelStorage.sol\":\"KernelStorage\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/lib/misc/ERCProxy.sol": {
      "ERCProxy": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "FORWARDING",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "proxyType",
            "outputs": [
              {
                "name": "proxyTypeId",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "pure",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "implementation",
            "outputs": [
              {
                "name": "codeAddr",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "UPGRADEABLE",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "FORWARDING()": "2b2584f6",
            "UPGRADEABLE()": "7e84a4ff",
            "implementation()": "5c60da1b",
            "proxyType()": "4555d5c9"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/lib/zeppelin/token/ERC20.sol": {
      "ERC20": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "spender",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "from",
                "type": "address"
              },
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "who",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "owner",
                "type": "address"
              },
              {
                "name": "spender",
                "type": "address"
              }
            ],
            "name": "allowance",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "spender",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {},
          "title": "ERC20 interface"
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "allowance(address,address)": "dd62ed3e",
            "approve(address,uint256)": "095ea7b3",
            "balanceOf(address)": "70a08231",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb",
            "transferFrom(address,address,uint256)": "23b872dd"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol": {
      "ERC20Basic": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "totalSupply",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "who",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "to",
                "type": "address"
              },
              {
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "transfer",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "value",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {},
          "title": "ERC20Basic"
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "balanceOf(address)": "70a08231",
            "totalSupply()": "18160ddd",
            "transfer(address,uint256)": "a9059cbb"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol": {
      "ILiquidPledgingPlugin": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledgeManager",
                "type": "uint64"
              },
              {
                "name": "pledgeFrom",
                "type": "uint64"
              },
              {
                "name": "pledgeTo",
                "type": "uint64"
              },
              {
                "name": "context",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "afterTransfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledgeManager",
                "type": "uint64"
              },
              {
                "name": "pledgeFrom",
                "type": "uint64"
              },
              {
                "name": "pledgeTo",
                "type": "uint64"
              },
              {
                "name": "context",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "beforeTransfer",
            "outputs": [
              {
                "name": "maxAllowed",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "afterTransfer(uint64,uint64,uint64,uint64,address,uint256)": {
              "params": {
                "amount": "The amount of value that will be transfered.",
                "context": "The situation that is triggering the plugin:  0 -> Plugin for the owner transferring pledge to another party  1 -> Plugin for the first delegate transferring pledge to another party  2 -> Plugin for the second delegate transferring pledge to another party  ...  255 -> Plugin for the intendedProject transferring pledge to another party     ///  256 -> Plugin for the owner receiving pledge to another party  257 -> Plugin for the first delegate receiving pledge to another party  258 -> Plugin for the second delegate receiving pledge to another party  ...  511 -> Plugin for the intendedProject receiving pledge to another party",
                "pledgeFrom": "This is the Id from which value will be transfered.",
                "pledgeManager": "The admin or current manager of the pledge",
                "pledgeTo": "This is the Id that value will be transfered to.    "
              }
            },
            "beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)": {
              "params": {
                "amount": "The amount of value that will be transfered.",
                "context": "The situation that is triggering the plugin:  0 -> Plugin for the owner transferring pledge to another party  1 -> Plugin for the first delegate transferring pledge to another party  2 -> Plugin for the second delegate transferring pledge to another party  ...  255 -> Plugin for the intendedProject transferring pledge to another party     ///  256 -> Plugin for the owner receiving pledge to another party  257 -> Plugin for the first delegate receiving pledge to another party  258 -> Plugin for the second delegate receiving pledge to another party  ...  511 -> Plugin for the intendedProject receiving pledge to another party",
                "pledgeFrom": "This is the Id from which value will be transfered.",
                "pledgeManager": "The admin or current manager of the pledge",
                "pledgeTo": "This is the Id that value will be transfered to.    "
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "afterTransfer(uint64,uint64,uint64,uint64,address,uint256)": "0da5e18c",
            "beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)": "31c51a00"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {
            "afterTransfer(uint64,uint64,uint64,uint64,address,uint256)": {
              "notice": "Plugins are used (much like web hooks) to initiate an action  upon any donation, delegation, or transfer; this is an optional feature  and allows for extreme customization of the contract. This function  implements any action that should be initiated after a transfer."
            },
            "beforeTransfer(uint64,uint64,uint64,uint64,address,uint256)": {
              "notice": "Plugins are used (much like web hooks) to initiate an action  upon any donation, delegation, or transfer; this is an optional feature  and allows for extreme customization of the contract. This function  implements any action that should be initiated before a transfer."
            }
          }
        }
      }
    },
    "giveth-liquidpledging/contracts/LPConstants.sol": {
      "LPConstants": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APM_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "KERNEL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "LP_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "CORE_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ACL_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH_NODE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "VAULT_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_BASES_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b61036e8061001e6000396000f3006060604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146100b35780631113ed0d146100d8578063178e6079146100eb57806325012699146100fe5780633074426714610111578063756f604914610124578063a3b4b07f14610137578063cbcc65eb1461014a578063cc473be31461015d578063d2dd420f14610170578063db8a61d414610183575b600080fd5b34156100be57600080fd5b6100c6610196565b60405190815260200160405180910390f35b34156100e357600080fd5b6100c66101ba565b34156100f657600080fd5b6100c66101de565b341561010957600080fd5b6100c6610202565b341561011c57600080fd5b6100c6610226565b341561012f57600080fd5b6100c661025a565b341561014257600080fd5b6100c661027e565b341561015557600080fd5b6100c66102a2565b341561016857600080fd5b6100c66102c6565b341561017b57600080fd5b6100c66102ea565b341561018e57600080fd5b6100c661031e565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e01604051809103902081565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b6040517f7661756c740000000000000000000000000000000000000000000000000000008152600501604051809103902081565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f815600a165627a7a72305820beadf56f9a6fb6639138f2cd8f703bffe4455da2945a7c31ac97ffafc6aae9340029",
            "sourceMap": "83:175:28:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100ae5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630972077881146100b35780631113ed0d146100d8578063178e6079146100eb57806325012699146100fe5780633074426714610111578063756f604914610124578063a3b4b07f14610137578063cbcc65eb1461014a578063cc473be31461015d578063d2dd420f14610170578063db8a61d414610183575b600080fd5b34156100be57600080fd5b6100c6610196565b60405190815260200160405180910390f35b34156100e357600080fd5b6100c66101ba565b34156100f657600080fd5b6100c66101de565b341561010957600080fd5b6100c6610202565b341561011c57600080fd5b6100c6610226565b341561012f57600080fd5b6100c661025a565b341561014257600080fd5b6100c661027e565b341561015557600080fd5b6100c66102a2565b341561016857600080fd5b6100c66102c6565b341561017b57600080fd5b6100c66102ea565b341561018e57600080fd5b6100c661031e565b7f9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba81565b7f3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c81565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b7f2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb81565b6040517f6c6971756964506c656467696e670000000000000000000000000000000000008152600e01604051809103902081565b7fc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f881565b7f4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a81565b7fe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a81565b7f93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae81565b6040517f7661756c740000000000000000000000000000000000000000000000000000008152600501604051809103902081565b7ff1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f815600a165627a7a72305820beadf56f9a6fb6639138f2cd8f703bffe4455da2945a7c31ac97ffafc6aae9340029",
            "sourceMap": "83:175:28:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1020:101:23;;;;;;;;;;;;;;;;;;;;;;;;;;;1127:106;;;;;;;;;;;;796:111;;;;;;;;;;;;1239:103;;;;;;;;;;;;192:63:28;;;;;;;;;;;;565:107:23;;;;;;;;;;;;1457:100;;;;;;;;;;;;1348:103;;;;;;;;;;;;913:101;;;;;;;;;;;;129:57:28;;;;;;;;;;;;678:112:23;;;;;;;;;;;;1020:101;1055:66;1020:101;:::o;1127:106::-;1167:66;1127:106;:::o;796:111::-;841:66;796:111;:::o;1239:103::-;1276:66;1239:103;:::o;192:63:28:-;228:27;;;;;;;;;;;;;;192:63;:::o;565:107:23:-;606:66;565:107;:::o;1457:100::-;1491:66;1457:100;:::o;1348:103::-;1385:66;1348:103;:::o;913:101::-;948:66;913:101;:::o;129:57:28:-;168:18;;;;;;;;;;;;;;129:57;:::o;678:112:23:-;724:66;678:112;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "175600",
              "executionCost": "215",
              "totalCost": "175815"
            },
            "external": {
              "ACL_APP()": "305",
              "ACL_APP_ID()": "327",
              "APM_NODE()": "173",
              "APP_ADDR_NAMESPACE()": "217",
              "APP_BASES_NAMESPACE()": "393",
              "CORE_NAMESPACE()": "283",
              "ETH_NODE()": "349",
              "KERNEL_APP()": "239",
              "KERNEL_APP_ID()": "195",
              "LP_APP_ID()": "333",
              "VAULT_APP_ID()": "443"
            }
          },
          "methodIdentifiers": {
            "ACL_APP()": "a3b4b07f",
            "ACL_APP_ID()": "cbcc65eb",
            "APM_NODE()": "09720778",
            "APP_ADDR_NAMESPACE()": "178e6079",
            "APP_BASES_NAMESPACE()": "db8a61d4",
            "CORE_NAMESPACE()": "756f6049",
            "ETH_NODE()": "cc473be3",
            "KERNEL_APP()": "25012699",
            "KERNEL_APP_ID()": "1113ed0d",
            "LP_APP_ID()": "30744267",
            "VAULT_APP_ID()": "d2dd420f"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APM_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"KERNEL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"LP_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CORE_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ACL_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH_NODE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"VAULT_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_BASES_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/LPConstants.sol\":\"LPConstants\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.18;\\n\\n\\ncontract KernelConstants {\\n    /*\\n    bytes32 constant public CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 constant public APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public KERNEL_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 constant public KERNEL_APP = keccak256(CORE_NAMESPACE, KERNEL_APP_ID);\\n\\n    bytes32 constant public ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 constant public ACL_APP = keccak256(APP_ADDR_NAMESPACE, ACL_APP_ID);\\n    */\\n    bytes32 constant public CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 constant public APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public ETH_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 constant public APM_NODE = 0x9065c3e7f7b7ef1ef4e53d2d0b8e0cef02874ab020c1ece79d5f0d3d0111c0ba;\\n    bytes32 constant public KERNEL_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 constant public KERNEL_APP = 0x2b7d19d0575c228f8d9326801e14149d284dc5bb7b1541c5ad712ae4b2fcaadb;\\n    bytes32 constant public ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 constant public ACL_APP = 0x4b8e03a458a6ccec5d9077c2490964c1333dd3c72e2db408d7d9a7a36ef5c41a;\\n\\n}\\n\\n\\ncontract KernelStorage is KernelConstants {\\n    mapping (bytes32 => address) public apps;\\n    bytes32 public recoveryVaultId;\\n}\\n\",\"keccak256\":\"0x0081232c1c7a013e1cb31868d7950f980286c09b05c767a4102ca4090cd6ef9a\"},\"giveth-liquidpledging/contracts/LPConstants.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"@aragon/os/contracts/kernel/KernelStorage.sol\\\";\\n\\ncontract LPConstants is KernelConstants {\\n    bytes32 constant public VAULT_APP_ID = keccak256(\\\"vault\\\");\\n    bytes32 constant public LP_APP_ID = keccak256(\\\"liquidPledging\\\");\\n}\",\"keccak256\":\"0x558e8800a807b65c952c7d731ca1c5c42539d734df4d545f801ecff0f0cd2314\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "giveth-liquidpledging/contracts/LiquidPledging.sol": {
      "LiquidPledging": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "idReceiver",
                "type": "uint64"
              },
              {
                "name": "donorAddress",
                "type": "address"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "addGiverAndDonate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idReceiver",
                "type": "uint64"
              },
              {
                "name": "donorAddress",
                "type": "address"
              }
            ],
            "name": "addGiverAndDonate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "whitelistDisabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idReceiver",
                "type": "uint64"
              }
            ],
            "name": "addGiverAndDonate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "projectId",
                "type": "uint64"
              }
            ],
            "name": "isProjectCanceled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "PLUGIN_MANAGER_ROLE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfPledges",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "confirmPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "idxDelegate",
                "type": "uint64"
              }
            ],
            "name": "getPledgeDelegate",
            "outputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHashes",
                "type": "bytes32[]"
              }
            ],
            "name": "addValidPluginContracts",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "useWhitelist",
                "type": "bool"
              }
            ],
            "name": "useWhitelist",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              }
            ],
            "name": "getPledge",
            "outputs": [
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "owner",
                "type": "uint64"
              },
              {
                "name": "nDelegates",
                "type": "uint64"
              },
              {
                "name": "intendedProject",
                "type": "uint64"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "oldPledge",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "pledgeState",
                "type": "uint8"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "withdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idSender",
                "type": "uint64"
              },
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "idReceiver",
                "type": "uint64"
              }
            ],
            "name": "transfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "name": "idReceiver",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "donate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "isValidPlugin",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              }
            ],
            "name": "normalizePledge",
            "outputs": [
              {
                "name": "",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addDelegate",
            "outputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfPledgeAdmins",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledgesAmounts",
                "type": "uint256[]"
              }
            ],
            "name": "mWithdraw",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "removeValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idReceiver",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "addGiverAndDonate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addGiver",
            "outputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "projectAdmin",
                "type": "address"
              },
              {
                "name": "parentProject",
                "type": "uint64"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addProject",
            "outputs": [
              {
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "name": "cancelProject",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "addValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addGiver",
            "outputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getCodeHash",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "cancelPledge",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "removeValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "name": "idReceiver",
                "type": "uint64"
              }
            ],
            "name": "donate",
            "outputs": [],
            "payable": true,
            "stateMutability": "payable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_vault",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "addValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateDelegate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "pledges",
                "type": "uint64[]"
              }
            ],
            "name": "mNormalizePledge",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idSender",
                "type": "uint64"
              },
              {
                "name": "pledgesAmounts",
                "type": "uint256[]"
              },
              {
                "name": "idReceiver",
                "type": "uint64"
              }
            ],
            "name": "mTransfer",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateGiver",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "cancelPayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idAdmin",
                "type": "uint64"
              }
            ],
            "name": "getPledgeAdmin",
            "outputs": [
              {
                "name": "adminType",
                "type": "uint8"
              },
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "parentProject",
                "type": "uint64"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idProject",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateProject",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint256"
              }
            ],
            "name": "CancelProject",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "GiverAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "GiverUpdated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "DelegateAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "DelegateUpdated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "ProjectAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "ProjectUpdated",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "addDelegate(string,string,uint64,address)": {
              "params": {
                "commitTime": "Sets the length of time in seconds that this delegate  can be vetoed. Whenever this delegate is in a delegate chain the time  allowed to veto any event must be greater than or equal to this time.",
                "name": "The name used to identify the Delegate",
                "plugin": "This is Delegate's liquid pledge plugin allowing for  extended functionality",
                "url": "The link to the Delegate's profile often an IPFS hash"
              },
              "return": "idxDelegate The id number used to reference this Delegate within  the PLEDGE_ADMIN array"
            },
            "addGiver(string,string,uint64,address)": {
              "params": {
                "commitTime": "The length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project",
                "name": "The name used to identify the Giver",
                "plugin": "This is Giver's liquid pledge plugin allowing for  extended functionality",
                "url": "The link to the Giver's profile often an IPFS hash"
              },
              "return": "idGiver The id number used to reference this Admin"
            },
            "addGiverAndDonate(uint64)": {
              "params": {
                "idReceiver": "The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project    "
              }
            },
            "addGiverAndDonate(uint64,address)": {
              "params": {
                "donorAddress": "The address of the \"giver\" of this donation    ",
                "idReceiver": "The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project"
              }
            },
            "addGiverAndDonate(uint64,address,address,uint256)": {
              "params": {
                "amount": "The amount of tokens being donated",
                "donorAddress": "The address of the \"giver\" of this donation",
                "idReceiver": "The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project",
                "token": "The address of the token being donated."
              }
            },
            "addGiverAndDonate(uint64,address,uint256)": {
              "params": {
                "amount": "The amount of tokens being donated",
                "idReceiver": "The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project",
                "token": "The address of the token being donated."
              }
            },
            "addProject(string,string,address,uint64,uint64,address)": {
              "params": {
                "commitTime": "Sets the length of time in seconds the Project has to   veto when the Project delegates to another Delegate and they pledge   those funds to a project",
                "name": "The name used to identify the Project",
                "parentProject": "The Admin id number for the parent project or 0 if  there is no parentProject",
                "plugin": "This is Project's liquid pledge plugin allowing for  extended functionality",
                "projectAdmin": "The address for the trusted project manager",
                "url": "The link to the Project's profile often an IPFS hash"
              },
              "return": "idProject The id number used to reference this Admin"
            },
            "addValidPluginContract(bytes32)": {
              "details": "add a contract to the plugin whitelist."
            },
            "addValidPluginInstance(address)": {
              "details": "adds an instance of a plugin to the whitelist"
            },
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "cancelPayment(uint64,uint256)": {
              "params": {
                "amount": "Quantity of ether (in wei) to be canceled",
                "idPledge": "Id of the pledge that's withdraw is to be canceled"
              }
            },
            "cancelPledge(uint64,uint256)": {
              "params": {
                "amount": "Quantity of ether (in wei) to be transfered to the   `oldPledge`",
                "idPledge": "Id of the pledge that is to be canceled"
              }
            },
            "cancelProject(uint64)": {
              "params": {
                "idProject": "Id of the project that is to be canceled"
              }
            },
            "confirmPayment(uint64,uint256)": {
              "params": {
                "amount": "Quantity of ether (in wei) to be withdrawn",
                "idPledge": "Id of the pledge that is to be withdrawn"
              }
            },
            "donate(uint64,uint64)": {
              "params": {
                "idGiver": "The id of the Giver donating",
                "idReceiver": "The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project"
              }
            },
            "donate(uint64,uint64,address,uint256)": {
              "params": {
                "amount": "The amount of tokens being donated",
                "idGiver": "The id of the Giver donating",
                "idReceiver": "The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project",
                "token": "The address of the token being donated."
              }
            },
            "getCodeHash(address)": {
              "return": "the hash of the code for the given address"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "getPledge(uint64)": {
              "params": {
                "idPledge": "the id number of the pledge being queried"
              },
              "return": "the amount, owner, the number of delegates (but not the actual  delegates, the intendedProject (if any), the current commit time and  the previous pledge this pledge was derived from"
            },
            "getPledgeAdmin(uint64)": {
              "return": "addr Account or contract address for adminname Name of the pledgeAdminurl The link to the Project's profile often an IPFS hashcommitTime The length of time in seconds the Admin has to veto   when the Admin delegates to a Delegate and that Delegate pledges those   funds to a projectparentProject The Admin id number for the parent project or 0  if there is no parentProjectcanceled 0 for Delegates & Givers, true if a Project has been  canceledplugin This is Project's liquidPledging plugin allowing for  extended functionality"
            },
            "getPledgeDelegate(uint64,uint64)": {
              "params": {
                "idPledge": "The id number representing the pledge being queried",
                "idxDelegate": "The index number for the delegate in this Pledge "
              }
            },
            "initialize(address)": {
              "params": {
                "_vault": "The vault where the ETH backing the pledges is stored"
              }
            },
            "isProjectCanceled(uint64)": {
              "params": {
                "projectId": "The Admin id number used to specify the Project"
              },
              "return": "True if the Project has been canceled"
            },
            "mNormalizePledge(uint64[])": {
              "params": {
                "pledges": "An array of pledge IDs"
              }
            },
            "mTransfer(uint64,uint256[],uint64)": {
              "params": {
                "idReceiver": "Destination of the `pledesAmounts`, can be a Giver or   Project sending to a Giver, a Delegate or a Project; a Delegate sending  to another Delegate, or a Delegate pre-commiting it to a Project ",
                "idSender": "Id of the Admin that is transferring the amounts from  all the Pledges; this admin must have permissions to move the value",
                "pledgesAmounts": "An array of Pledge amounts and the idPledges with   which the amounts are associated; these are extrapolated using the D64  bitmask"
              }
            },
            "mWithdraw(uint256[])": {
              "params": {
                "pledgesAmounts": "An array of Pledge amounts and the idPledges with   which the amounts are associated; these are extrapolated using the D64  bitmask"
              }
            },
            "normalizePledge(uint64)": {
              "params": {
                "idPledge": "This is the id of the pledge that will be normalized"
              },
              "return": "The normalized Pledge!"
            },
            "numberOfPledgeAdmins()": {
              "return": "The total number of admins (Givers, Delegates and Projects) ."
            },
            "numberOfPledges()": {
              "return": "The total number of Pledges in the system"
            },
            "removeValidPluginContract(bytes32)": {
              "details": "removes a contract from the plugin whitelist"
            },
            "removeValidPluginInstance(address)": {
              "details": "removes an instance of a plugin to the whitelist"
            },
            "transfer(uint64,uint64,uint256,uint64)": {
              "params": {
                "amount": "Quantity of ETH (in wei) that this pledge is transferring   the authority to withdraw from the vault",
                "idPledge": "Id of the pledge that's moving the value",
                "idReceiver": "Destination of the `amount`, can be a Giver/Project sending  to a Giver, a Delegate or a Project; a Delegate sending to another  Delegate, or a Delegate pre-commiting it to a Project ",
                "idSender": "Id of the Admin that is transferring the amount from  Pledge to Pledge; this admin must have permissions to move the value"
              }
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            },
            "updateDelegate(uint64,address,string,string,uint64)": {
              "params": {
                "idDelegate": "The Admin id number used to specify the Delegate",
                "newAddr": "The new address that represents this Delegate",
                "newCommitTime": "Sets the length of time in seconds that this  delegate can be vetoed. Whenever this delegate is in a delegate chain  the time allowed to veto any event must be greater than or equal to  this time.",
                "newName": "The new name used to identify the Delegate",
                "newUrl": "The new link to the Delegate's profile often an IPFS hash"
              }
            },
            "updateGiver(uint64,address,string,string,uint64)": {
              "params": {
                "idGiver": "This is the Admin id number used to specify the Giver",
                "newAddr": "The new address that represents this Giver",
                "newCommitTime": "Sets the length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project",
                "newName": "The new name used to identify the Giver",
                "newUrl": "The new link to the Giver's profile often an IPFS hash"
              }
            },
            "updateProject(uint64,address,string,string,uint64)": {
              "params": {
                "idProject": "The Admin id number used to specify the Project",
                "newAddr": "The new address that represents this Project",
                "newCommitTime": "Sets the length of time in seconds the Project has  to veto when the Project delegates to a Delegate and they pledge those  funds to a project",
                "newName": "The new name used to identify the Project",
                "newUrl": "The new link to the Project's profile often an IPFS hash"
              }
            },
            "useWhitelist(bool)": {
              "details": "enable/disable the plugin whitelist."
            },
            "withdraw(uint64,uint256)": {
              "params": {
                "amount": "Quantity of ether (in wei) to be authorized",
                "idPledge": "Id of the pledge that is to be redeemed into ether"
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526069805460ff19169055341561001957600080fd5b6152dc806100286000396000f3006060604052600436106102625763ffffffff60e060020a6000350416627611c6811461026757806308a4f7d11461029d578063178e6079146102bd5780631c8e8568146102e25780631d376026146103095780632101a6ad1461031d57806324fea3b01461033c5780632a8ec8cc1461034f5780632ee88808146103625780632f6b64ca1461038457806332ce8ebc1461044057806332f0a3b51461045e578063387402911461048d5780633f657a46146104a5578063433879831461053357806347c5ef43146105555780634c4316c7146105845780634eafbcd5146105b857806350f8a803146105d757806352dc7dcc146106125780635503d9ba1461065457806357adafb61461066757806360b1e057146106b65780636293c702146106c95780636ba3cc87146106e85780636e802c6a1461071657806372116e92146107d0578063796d56541461082157806379f4542e146108405780637e7db6e11461085f5780637f61fa931461087e57806380afdea8146108c057806381ea4408146108d35780638322fff2146108f25780638b3dd749146109055780639b3fdf4c146109185780639d4941d81461092b578063a1658fad1461094a578063af9f4563146109ad578063b12b5f76146109cf578063bde60ac9146109e5578063c4d66de8146109ff578063c8ae070f14610a1e578063cc19ecf714610a34578063ce17273c14610a80578063d4aae0c414610acf578063d639cd7314610ae2578063db7c231414610b4a578063e9c211e214610b96578063eba8ba0614610bb8578063f6b24b1c14610d0e578063f92a79ff14610d5a578063fbfa77cf14610dab575b600080fd5b341561027257600080fd5b61029b6001604060020a0360043516600160a060020a0360243581169060443516606435610dbe565b005b61029b6001604060020a0360043516600160a060020a0360243516610e19565b34156102c857600080fd5b6102d0610e2a565b60405190815260200160405180910390f35b34156102ed57600080fd5b6102f5610e4e565b604051901515815260200160405180910390f35b61029b6001604060020a0360043516610e57565b341561032857600080fd5b6102f56001604060020a0360043516610e67565b341561034757600080fd5b6102d0610f09565b341561035a57600080fd5b6102d0610f2b565b341561036d57600080fd5b61029b6001604060020a0360043516602435610f36565b341561038f57600080fd5b6103a96001604060020a036004358116906024351661106a565b6040516001604060020a0384168152600160a060020a038316602082015260606040820181815290820183818151815260200191508051906020019080838360005b838110156104035780820151838201526020016103eb565b50505050905090810190601f1680156104305780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561044b57600080fd5b61029b6004803560248101910135611198565b341561046957600080fd5b61047161122c565b604051600160a060020a03909116815260200160405180910390f35b341561049857600080fd5b61029b60043515156112ac565b34156104b057600080fd5b6104c46001604060020a0360043516611312565b6040518881526001604060020a038089166020830152878116604083015286811660608301528581166080830152841660a0820152600160a060020a03831660c082015260e0810182600281111561051857fe5b60ff1681526020019850505050505050505060405180910390f35b341561053e57600080fd5b61029b6001604060020a036004351660243561148f565b341561056057600080fd5b61029b6001604060020a036004358116906024358116906044359060643516611676565b341561058f57600080fd5b61029b6001604060020a0360043581169060243516600160a060020a036044351660643561168b565b34156105c357600080fd5b6102f5600160a060020a036004351661185a565b34156105e257600080fd5b6105f66001604060020a03600435166118d1565b6040516001604060020a03909116815260200160405180910390f35b341561061d57600080fd5b6105f660246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a0360643516611ac6565b341561065f57600080fd5b6102d0611d53565b341561067257600080fd5b61029b6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650611d5d95505050505050565b34156106c157600080fd5b6102d0611dc8565b34156106d457600080fd5b61029b600160a060020a0360043516611dec565b34156106f357600080fd5b61029b6001604060020a0360043516600160a060020a0360243516604435611e4d565b341561072157600080fd5b6105f660048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650505083356001604060020a03169360200135600160a060020a03169250611e5e915050565b34156107db57600080fd5b6105f66024600480358281019290820135918135918201910135600160a060020a036044358116906001604060020a036064358116916084359091169060a435166120c1565b341561082c57600080fd5b61029b6001604060020a036004351661256e565b341561084b57600080fd5b61029b600160a060020a03600435166125d8565b341561086a57600080fd5b6102f5600160a060020a0360043516612650565b341561088957600080fd5b6105f660246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a0360643516612656565b34156108cb57600080fd5b6102d06126d2565b34156108de57600080fd5b6102d0600160a060020a03600435166126d8565b34156108fd57600080fd5b61047161275a565b341561091057600080fd5b6102d061275f565b341561092357600080fd5b6102d0612765565b341561093657600080fd5b61029b600160a060020a0360043516612789565b341561095557600080fd5b6102f560048035600160a060020a031690602480359190606490604435908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965061290095505050505050565b34156109b857600080fd5b61029b6001604060020a0360043516602435612a3e565b34156109da57600080fd5b61029b600435612ad3565b61029b6001604060020a0360043581169060243516612b2b565b3415610a0a57600080fd5b61029b600160a060020a0360043516612b38565b3415610a2957600080fd5b61029b600435612b9d565b3415610a3f57600080fd5b61029b600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612c0c565b3415610a8b57600080fd5b61029b6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650612d1595505050505050565b3415610ada57600080fd5b610471612d48565b3415610aed57600080fd5b61029b600480356001604060020a0316906044602480359081019083013580602080820201604051908101604052809392919081815260200183836020028082843750949650505092356001604060020a03169250612d57915050565b3415610b5557600080fd5b61029b600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612dcc565b3415610ba157600080fd5b61029b6001604060020a0360043516602435612ed5565b3415610bc357600080fd5b610bd76001604060020a0360043516612ffd565b60405180896002811115610be757fe5b60ff168152600160a060020a0389811660208301526001604060020a038781166080840152861660a083015284151560c0830152831660e08201526101008282038101604083019081529160608101910189818151815260200191508051906020019080838360005b83811015610c68578082015183820152602001610c50565b50505050905090810190601f168015610c955780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b83811015610ccb578082015183820152602001610cb3565b50505050905090810190601f168015610cf85780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3415610d1957600080fd5b61029b600480356001604060020a039081169160248035600160a060020a0316926044358083019390810135926064359081019291013590608435166131cc565b3415610d6557600080fd5b61047160046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506132d595505050505050565b3415610db657600080fd5b6104716133b1565b6000600160a060020a0384161515610dd557600080fd5b610e04846020604051908101604052806000815250602060405190810160405260008082526203f48090611e5e565b9050610e128186858561168b565b5050505050565b610e268282600034610dbe565b5050565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b610e648133600034610dbe565b50565b600080610e73836133c5565b90506000815460ff166002811115610e8757fe5b1415610e965760009150610f03565b6002815460ff166002811115610ea857fe5b14610eaf57fe5b6001810154604060020a900460ff1615610ecc5760019150610f03565b60018101546001604060020a03161515610ee95760009150610f03565b6001810154610f00906001604060020a0316610e67565b91505b50919050565b6040516000805160206152718339815191528152601301604051809103902081565b606554600019015b90565b606954600090819033600160a060020a039081166101009092041614610f5b57600080fd5b610f648461340b565b91506001600383015460a060020a900460ff166002811115610f8257fe5b14610f8c57600080fd5b6002820154600183018054611057926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561101f57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411610fdc5790505b50505050600286810154600388015460009350839260c060020a9092046001604060020a031691600160a060020a039091169061343c565b905061106484828561375e565b50505050565b600080611075614ebf565b6000806110818761340b565b915081600101600187036001604060020a03168154811015156110a057fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a031694506110d4856133c5565b90508060000160019054906101000a9004600160a060020a03169350806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111885780601f1061115d57610100808354040283529160200191611188565b820191906000526020600020905b81548152906001019060200180831161116b57829003601f168201915b5050505050925050509250925092565b6000604051600080516020615271833981519152815260130160405180910390206111e3338260006040518059106111cd5750595b9080825280602002602001820160405250612900565b15156111ee57600080fd5b600091505b60ff82168390101561106457611221848460ff851681811061121157fe5b9050602002013560001916612b9d565b6001909101906111f3565b60008054600160a060020a0316151561124457600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561128d57600080fd5b6102c65a03f1151561129e57600080fd5b505050604051805191505090565b604051600080516020615271833981519152815260130160405180910390206112f4338260006040518059106111cd5750599080825280602002602001820160405250612900565b15156112ff57600080fd5b506069805460ff19169115919091179055565b600080600080600080600080611326614ed1565b61132f8a61340b565b610100604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156113c757602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116113845790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff169081111561143d57fe5b600281111561144857fe5b90525090508051985080604001519750806020015151965080606001519550806080015194508060a0015193508060c0015192508060e00151915050919395975091939597565b600080600061149d856118d1565b94506114a88561340b565b92506000600384015460a060020a900460ff1660028111156114c657fe5b146114d057600080fd5b60028301546114e7906001604060020a0316613832565b60028301546001840180546115af926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561157a57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116115375790505b505050506002870154600388015460009250829160c060020a90046001604060020a031690600160a060020a0316600161343c565b91506115bc85838661375e565b60028301546115d3906001604060020a03166133c5565b60695481546003860154929350600160a060020a036101009283900481169363a5426df1936001604060020a0388169304821691168860405160e060020a63ffffffff87160281526004810194909452600160a060020a039283166024850152911660448301526064820152608401600060405180830381600087803b151561165b57600080fd5b6102c65a03f1151561166c57600080fd5b5050505050505050565b61167f84613832565b61106484848484613889565b600080806001604060020a0387168190116116a557600080fd5b600084116116b257600080fd5b6116bb876133c5565b92506000835460ff1660028111156116cf57fe5b146116d957600080fd5b600160a060020a0385161515611726576069546101009004600160a060020a03166108fc85150285604051600060405180830381858888f19350505050151561172157600080fd5b6117c2565b606954600160a060020a03808716916323b872dd9133916101009004168760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561179c57600080fd5b6102c65a03f115156117ad57600080fd5b5050506040518051905015156117c257600080fd5b6117f38760006040518059106117d55750595b908082528060200260200182016040525060008060008a600061343c565b91506117fe8261340b565b80548501815590506001604060020a03821660007faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f68660405190815260200160405180910390a361185187838689613889565b50505050505050565b606954600090819060ff16806118775750600160a060020a038316155b156118855760019150610f03565b600160a060020a03831660009081526068602052604090205460ff16156118af5760019150610f03565b6118b8836126d8565b60009081526067602052604090205460ff169392505050565b6000806000806118e08561340b565b92506000600384015460a060020a900460ff1660028111156118fe57fe5b1461190b57849350611abe565b60028301546000604060020a9091046001604060020a031611801561194a57506002830154608060020a90046001604060020a0316611948613ee0565b115b15611a8d576002830154600184018054611a16926001604060020a031691906020808202016040519081016040528092919081815260200182805480156119e257602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a03168152602001906008019060208260070104928301926001038202915080841161199f5790505b505050506002870154600388015460009250829160c060020a90046001604060020a031690600160a060020a03168261343c565b6002840154909250611a6d90604060020a90046001604060020a03166000604051805910611a415750595b9080825280602002602001820160405250600386015460009081908790600160a060020a03168261343c565b9050611a7e8582856000015461375e565b809450611a8a8561340b565b92505b611a9685613ee4565b90506001604060020a0380821690861614611aba57611aba8582856000015461375e565b8093505b505050919050565b6000611ad18261185a565b1515611adc57600080fd5b5060648054908160018101611af18382614f1d565b91600052602060002090600402016000610100604051908101604052806001815260200133600160a060020a03168152602001876001604060020a0316815260200160006001604060020a0316815260200160001515815260200186600160a060020a031681526020018b8b8080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff19166001836002811115611be257fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a02600080516020615291833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515604060020a0268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611cd3929160200190614f49565b5060e082015181600301908051611cee929160200190614f49565b50505050806001604060020a03167fd921f0ff8d5f67ca22b52c5b4be3463a8cabd9d95c28a02dd7c86f9deb3329be86866040516020808252810182905280604081018484808284378201915050935050505060405180910390a29695505050505050565b6064546000190190565b600080805b8351831015611064576001604060020a03848481518110611d7f57fe5b90602001906020020151169150604060020a848481518110611d9d57fe5b90602001906020020151811515611db057fe5b049050611dbd828261148f565b600190920191611d62565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b60405160008051602061527183398151915281526013016040518091039020611e1482613fac565b611e1f338383612900565b1515611e2a57600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b611e5983338484610dbe565b505050565b6000611e698261185a565b1515611e7457600080fd5b5060648054908160018101611e898382614f1d565b916000526020600020906004020160006101006040519081016040528060008152600160a060020a03808c1660208301526001604060020a03891660408301526000606083018190526080830152871660a082015260c081018a905260e00188905291905081518154829060ff19166001836002811115611f0657fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a02600080516020615291833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515604060020a0268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611ff7929160200190614f49565b5060e082015181600301908051612012929160200190614f49565b50505050806001604060020a03167fad9c62a4382fd0ddbc4a0cf6c2bc7df75b0b8beb786ff59014f39daaea7f232f8560405160208082528190810183818151815260200191508051906020019080838360005b8381101561207e578082015183820152602001612066565b50505050905090810190601f1680156120ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390a295945050505050565b6000806120cd8361185a565b15156120d857600080fd5b6001604060020a038516156122f5576120f0856133c5565b905060146122e2826101006040519081016040528154909190829060ff16600281111561211957fe5b600281111561212457fe5b81528154610100808204600160a060020a0390811660208086019190915260a860020a9093046001604060020a039081166040808701919091526001808801549283166060880152604060020a830460ff1615156080880152690100000000000000000090920490921660a08601526002808701805460c090970196909592811615909402600019019093169290920491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156122325780601f1061220757610100808354040283529160200191612232565b820191906000526020600020905b81548152906001019060200180831161221557829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122d45780601f106122a9576101008083540402835291602001916122d4565b820191906000526020600020905b8154815290600101906020018083116122b757829003601f168201915b505050505081525050613fcc565b6001604060020a0316106122f557600080fd5b606480549250826001810161230a8382614f1d565b9160005260206000209060040201600061010060405190810160405280600281526020018a600160a060020a03168152602001886001604060020a03168152602001896001604060020a0316815260200160001515815260200187600160a060020a031681526020018e8e8080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081526020018c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff191660018360028111156123fa57fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a02600080516020615291833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515604060020a0268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c0820151816002019080516124eb929160200190614f49565b5060e082015181600301908051612506929160200190614f49565b50505050816001604060020a03167f9958fc92731727637b02f1ac1e6caf2814442c27e1d962f0c477cd14280f586d89896040516020808252810182905280604081018484808284378201915050935050505060405180910390a25098975050505050505050565b6000612579826133c5565b905061258482613832565b60018101805468ff00000000000000001916604060020a1790556001604060020a0382167f74acb192d39829b88a66ad5363afa9120c5a306a458287a870351ae34a04d34660405160405180910390a25050565b60405160008051602061527183398151915281526013016040518091039020612620338260006040518059106111cd5750599080825280602002602001820160405250612900565b151561262b57600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b60006126c73388888080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505087878080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508686611e5e565b979650505050505050565b60015481565b60006126e2614ebf565b823b604051915080825280600060208401863c50806040518082805190602001908083835b602083106127265780518252601f199092019160209182019101612707565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b60008061279583612650565b15156127a057600080fd5b6127a861122c565b91506127b382614040565b15156127be57600080fd5b600160a060020a03831615156128105781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561280b57600080fd5b611e59565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561286757600080fd5b6102c65a03f1151561287857600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156128e057600080fd5b6102c65a03f115156128f157600080fd5b50505060405180515050505050565b600061290a614ebf565b6000808451111561292357835160200290508391508082525b600054600160a060020a03161580612a34575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156129ca5780820151838201526020016129b2565b50505050905090810190601f1680156129f75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515612a1857600080fd5b6102c65a03f11515612a2957600080fd5b505050604051805190505b9695505050505050565b600080612a4a846118d1565b9350612a558461340b565b600281015490925060c060020a90046001604060020a03161515612a7857600080fd5b6000600383015460a060020a900460ff166002811115612a9457fe5b14612a9e57600080fd5b6002820154612ab5906001604060020a0316613832565b60028201546110579060c060020a90046001604060020a0316613ee4565b60405160008051602061527183398151915281526013016040518091039020612afb82614066565b612b06338383612900565b1515612b1157600080fd5b50506000908152606760205260409020805460ff19169055565b610e26828260003461168b565b60035415612b4557600080fd5b600160a060020a0381161515612b5a57600080fd5b612b62614077565b6069805461010060a860020a031916610100600160a060020a038416021790556001612b8f606482614f1d565b506001610e26606582614fc3565b60405160008051602061527183398151915281526013016040518091039020612be5338260006040518059106111cd5750599080825280602002602001820160405250612900565b1515612bf057600080fd5b506000908152606760205260409020805460ff19166001179055565b6000612c17886133c5565b805490915033600160a060020a039081166101009092041614612c3957600080fd5b6001815460ff166002811115612c4b57fe5b14612c5557600080fd5b805461010060a860020a031916610100600160a060020a03891602178155612c81600282018787614fef565b50612c90600382018585614fef565b5080546001604060020a0380841660a860020a0260008051602061529183398151915290921691909117825588167f6586deed9fa035704e9886588d904801e7e86d1ebd926905fa03a0018531b2fd85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b60005b8151811015610e2657612d3f828281518110612d3057fe5b906020019060200201516118d1565b50600101612d18565b600054600160a060020a031681565b600080805b8451831015612dc4576001604060020a03858481518110612d7957fe5b90602001906020020151169150604060020a858481518110612d9757fe5b90602001906020020151811515612daa57fe5b049050612db986838387611676565b600190920191612d5c565b505050505050565b6000612dd7886133c5565b805490915033600160a060020a039081166101009092041614612df957600080fd5b6000815460ff166002811115612e0b57fe5b14612e1557600080fd5b805461010060a860020a031916610100600160a060020a03891602178155612e41600282018787614fef565b50612e50600382018585614fef565b5080546001604060020a0380841660a860020a0260008051602061529183398151915290921691909117825588167f4b2f87168338ea08f27c7f7b2dfe4e61feb620ffe9a6a6a18afeaf94546075bf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b606954600090819033600160a060020a039081166101009092041614612efa57600080fd5b612f038461340b565b91506001600383015460a060020a900460ff166002811115612f2157fe5b14612f2b57600080fd5b6002820154600183018054612ff2926001604060020a03169190602080820201604051908101604052809291908181526020018280548015612fbe57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411612f7b5790505b505050506002860154600387015460009250829160c060020a90046001604060020a031690600160a060020a03168261343c565b9050611057816118d1565b600080613008614ebf565b613010614ebf565b60008060008060006130218a6133c5565b80546002808301805460ff84169d5061010093849004600160a060020a03169c5093945092600181161590920260001901909116046020601f820181900481020160405190810160405280929190818152602001828054600181600116156101000203166002900480156130d65780601f106130ab576101008083540402835291602001916130d6565b820191906000526020600020905b8154815290600101906020018083116130b957829003601f168201915b50505050509650806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131755780601f1061314a57610100808354040283529160200191613175565b820191906000526020600020905b81548152906001019060200180831161315857829003601f168201915b505084546001909501549c9e9b9d50999b929a60a860020a9094046001604060020a039081169a50831698505050604060020a810460ff16955069010000000000000000009004600160a060020a03169350915050565b60006131d7886133c5565b805490915033600160a060020a0390811661010090920416146131f957600080fd5b6002815460ff16600281111561320b57fe5b1461321557600080fd5b805461010060a860020a031916610100600160a060020a03891602178155613241600282018787614fef565b50613250600382018585614fef565b5080546001604060020a0380841660a860020a0260008051602061529183398151915290921691909117825588167fab039fa652845d2aa9439ffe6f2130ee7203ed63f29b71bed5b3b74f27c5870785856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b60006132df614091565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561334657808201518382015260200161332e565b50505050905090810190601f1680156133735780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561339157600080fd5b6102c65a03f115156133a257600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b6064546000906001604060020a038316106133df57600080fd5b606480546001604060020a0384169081106133f657fe5b90600052602060002090600402019050919050565b6065546000906001604060020a0383161061342557600080fd5b606580546001604060020a0384169081106133f657fe5b6000806000888a898989898960405180888051906020019060200280838360005b8381101561347557808201518382015260200161345d565b50505060c060020a6001604060020a03808d168202959093019485528a83168102600886015289831681026010860152918816909102601884015250506c01000000000000000000000000600160a060020a0385160260208201526034018260028111156134df57fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019750505050505050506040519081900390206000818152606660205260408120549193506001604060020a03909116915081111561354957809250613751565b50606580546000838152606660205260409020805467ffffffffffffffff19166001604060020a0383161790558154909190600181016135898382614fc3565b9160005260206000209060040201600061010060405190810160405280600081526020018d81526020018e6001604060020a031681526020018c6001604060020a031681526020018b6001604060020a031681526020018a6001604060020a0316815260200189600160a060020a0316815260200188600281111561360a57fe5b90529190508151815560208201518160010190805161362d92916020019061505d565b50604082015160028201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160020160086101000a8154816001604060020a0302191690836001604060020a0316021790555060808201518160020160106101000a8154816001604060020a0302191690836001604060020a0316021790555060a08201518160020160186101000a8154816001604060020a0302191690836001604060020a0316021790555060c082015160038201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560e082015160038201805474ff0000000000000000000000000000000000000000191660a060020a83600281111561374557fe5b02179055505050508092505b5050979650505050505050565b60008060006137706001878787614128565b9250846001604060020a0316866001604060020a0316141561379157612dc4565b82151561379d57612dc4565b6137a68661340b565b91506137b18561340b565b8254909150839010156137c357600080fd5b8154839003825580548301808255839010156137de57600080fd5b846001604060020a0316866001604060020a03167faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f68560405190815260200160405180910390a36118516000878786614128565b600061383d826133c5565b600181015490915033600160a060020a03908116690100000000000000000090920416148061387e5750805433600160a060020a0390811661010090920416145b1515610e2657600080fd5b600080808080806001604060020a0387168190116138a657600080fd5b6138af896118d1565b98506138ba8961340b565b95506138c5876133c5565b94506000600387015460a060020a900460ff1660028111156138e357fe5b146138ed57600080fd5b60028601546001604060020a038b811691161415613be8576000855460ff16600281111561391757fe5b141561392d5761392889898961414e565b613ed4565b6002855460ff16600281111561393f57fe5b1415613950576139288989896141a8565b6001855460ff16600281111561396257fe5b1415613be657613a8e8661010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015613a0457602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116139c15790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff1690811115613a7a57fe5b6002811115613a8557fe5b905250886143e6565b60028701546001604060020a0391821695506000604060020a909104909116118015613ac157506001604060020a038414155b15613bc757600186015460001901841415613baa576002860154600187018054613b9d926001604060020a03169190602080820201604051908101604052809291908181526020018280548015613b6957602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411613b265790505b5050505060028a015460038b015460009250829160c060020a90046001604060020a031690600160a060020a03168261343c565b925061392889848a61375e565b613bc189896001848a60010180549050030361444c565b50613ed4565b613bd98989886001018054905061444c565b9850613928898989614556565bfe5b613d0e8661010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015613c8457602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411613c415790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff1690811115613cfa57fe5b6002811115613d0557fe5b9052508b6143e6565b6001604060020a0390811692508214613be6576000855460ff166002811115613d3357fe5b1415613d645760028601546001604060020a03888116911614613d5257fe5b613bc18989886001018054905061444c565b6001855460ff166002811115613d7657fe5b1415613e9857613e638661010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015613a0457600091825260209182902080546001604060020a031684529082028301929091600891018084116139c1575050509284525050506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff1690811115613a7a57fe5b6001604060020a039081169150811480613e7c57508181115b15613baa57613bd989896001858a60010180549050030361444c565b6002855460ff166002811115613eaa57fe5b1415613be657613ec789896001858a60010180549050030361444c565b9850613928898989614686565b50505050505050505050565b4290565b600080806001604060020a0384161515613f015760009250613fa5565b613f0a8461340b565b6002810154909250613f24906001604060020a03166133c5565b90506000815460ff166002811115613f3857fe5b1415613f4657839250613fa5565b6002815460ff166002811115613f5857fe5b14613f5f57fe5b6002820154613f76906001604060020a0316610e67565b1515613f8457839250613fa5565b6002820154613fa29060c060020a90046001604060020a0316613ee4565b92505b5050919050565b613fb4614ebf565b613fc682600160a060020a0316614999565b92915050565b600080600283516002811115613fde57fe5b14613fe557fe5b82606001516001604060020a031615156140025760019150610f03565b61400f83606001516133c5565b9050614036816101006040519081016040528154909190829060ff16600281111561211957fe5b6001019392505050565b600080600160a060020a038316151561405c5760009150610f03565b50506000903b1190565b61406e614ebf565b613fc682614999565b6003541561408457600080fd5b61408c6149e0565b600355565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561410457600080fd5b6102c65a03f1151561411557600080fd5b50505060405180519250829150505b5090565b8061413685858086856149e4565b905061414585848686856149e4565b95945050505050565b60008061415a8561340b565b915061419b83600060405180591061416f5750595b9080825280602002602001820160405250600385015460009081908190600160a060020a03168161343c565b9050610e1285828661375e565b60008060006141b68661340b565b925060146142df846101006040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561425657602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116142135790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff16908111156142cc57fe5b60028111156142d757fe5b905250614b4c565b106142e957600080fd5b6142f284610e67565b156142fc57600080fd5b6002830154600184018054614399926001604060020a031691906020808202016040519081016040528092919081815260200182805480156119e257600091825260209182902080546001604060020a0316845290820283019290916008910180841161199f5750505050600288015460038901546000935083925060c060020a9091046001604060020a031690600160a060020a03168261343c565b91506143d9846000604051805910611a415750599080825280602002602001820160405250600386015460009081908790600160a060020a03168261343c565b9050612dc486828761375e565b6000805b83602001515181101561443a57826001604060020a03168460200151828151811061441157fe5b906020019060200201516001604060020a0316141561443257809150614445565b6001016143ea565b6001604060020a0391505b5092915050565b600080614457614ebf565b60006144628761340b565b600181015490935085900360405180591061447a5750595b90808252806020026020018201604052509150600090505b600183015485900381101561450557600183018054829081106144b157fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a03168282815181106144e657fe5b6001604060020a03909216602092830290910190910152600101614492565b6002830154600384015461453f916001604060020a03808216928692600092839260c060020a9092041690600160a060020a03168261343c565b935061454c87858861375e565b5050509392505050565b6000614560614ebf565b60008061456c8761340b565b6001810154909450600a901061458157600080fd5b600180850154016040518059106145955750595b90808252806020026020018201604052509250600091505b600184015482101561462057600184018054839081106145c957fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a03168383815181106145fe57fe5b6001604060020a039092166020928302909101909101526001909101906145ad565b6001840154859084908151811061463357fe5b6001604060020a03928316602091820290920101526002850154600386015461467992828116928792600092839260c060020a90041690600160a060020a03168261343c565b905061185187828861375e565b6000806146928561340b565b9150601461477d836101006040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561425657600091825260209182902080546001604060020a03168452908202830192909160089101808411614213575050509284525050506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff16908111156142cc57fe5b1061478757600080fd5b61479083610e67565b1561479a57600080fd5b600282015460018301805461419b926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561482d57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116147ea5790505b50505050508561495886610100604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156148cf57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a03168152602001906008019060208260070104928301926001038202915080841161488c5790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff169081111561494557fe5b600281111561495057fe5b905250614c62565b6001604060020a0316614969613ee0565b60028801546003890154919092019160c060020a90046001604060020a031690600160a060020a0316600061343c565b6149a1614ebf565b60016040518059106149b05750595b9080825280602002602001820160405250905081816000815181106149d157fe5b60209081029091010152919050565b4390565b600080600080866001604060020a0316886001604060020a031614614a0b57610100614a0e565b60005b61ffff169250849350614a208861340b565b60028101546003820154919350614a52918b916001604060020a0316908a908a908890600160a060020a03168a614cfa565b9350600090505b60018201546001604060020a0382161015614ae557614adb8983600101836001604060020a0316815481101515614a8c57fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a031689898588016001018760030160009054906101000a9004600160a060020a03168a614cfa565b9350600101614a59565b60028201546000604060020a9091046001604060020a03161115614b405760028201546003830154614b3d918b91604060020a9091046001604060020a0316908a908a9060ff890190600160a060020a03168a614cfa565b93505b50505095945050505050565b6000808260a001516001604060020a03161515614b6c5760009150610f03565b614b798360a0015161340b565b9050614036816101006040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561425657600091825260209182902080546001604060020a03168452908202830192909160089101808411614213575050509284525050506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff16908111156142cc57fe5b6000806000614c7484604001516133c5565b805460a860020a90046001604060020a031693509150600090505b836020015151811015613fa557614cbe84602001518281518110614caf57fe5b906020019060200201516133c5565b80549092506001604060020a0380851660a860020a909204161115614cf257815460a860020a90046001604060020a031692505b600101614c8f565b80600080614d07896133c5565b600181015490915069010000000000000000009004600160a060020a031615801590614d335750600083115b15613751578915614e0b57600181015469010000000000000000009004600160a060020a03166331c51a008a8a8a8a8a8a60006040516020015260405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401602060405180830381600087803b1515614dda57600080fd5b6102c65a03f11515614deb57600080fd5b505050604051805192505082821115614e0357600080fd5b819250613751565b600181015469010000000000000000009004600160a060020a0316630da5e18c8a8a8a8a8a8a60405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401600060405180830381600087803b1515614e9e57600080fd5b6102c65a03f11515614eaf57600080fd5b5050505050979650505050505050565b60206040519081016040526000815290565b6101006040519081016040528060008152602001614eed614ebf565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b815481835581811511611e5957600402816004028360005260206000209182019101611e599190615111565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614f8a57805160ff1916838001178555614fb7565b82800160010185558215614fb7579182015b82811115614fb7578251825591602001919060010190614f9c565b50614124929150615178565b815481835581811511611e5957600402816004028360005260206000209182019101611e599190615192565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106150305782800160ff19823516178555614fb7565b82800160010185558215614fb7579182015b82811115614fb7578235825591602001919060010190615042565b828054828255906000526020600020906003016004900481019282156151055791602002820160005b838211156150d057835183826101000a8154816001604060020a0302191690836001604060020a031602179055509260200192600801602081600701049283019260010302615086565b80156151035782816101000a8154906001604060020a0302191690556008016020816007010492830192600103026150d0565b505b506141249291506151e2565b610f3391905b808211156141245780547fffffff00000000000000000000000000000000000000000000000000000000009081168255600182018054909116905560006151616002830182615207565b61516f600383016000615207565b50600401615117565b610f3391905b80821115614124576000815560010161517e565b610f3391905b808211156141245760008082556151b2600183018261524b565b506000600282015560038101805474ffffffffffffffffffffffffffffffffffffffffff19169055600401615198565b610f3391905b8082111561412457805467ffffffffffffffff191681556001016151e8565b50805460018160011615610100020316600290046000825580601f1061522d5750610e64565b601f016020900490600052602060002090810190610e649190615178565b508054600082556003016004900490600052602060002090810190610e6491906151785600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000ffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffa165627a7a72305820fa76ba0a88396432496b9dacf34ea70e17c7be4a1c8e8c09336ed85332ddf5e10029",
            "sourceMap": "1153:11338:29:-;;;2538:37:33;;;-1:-1:-1;;2538:37:33;;;1153:11338:29;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106102625763ffffffff60e060020a6000350416627611c6811461026757806308a4f7d11461029d578063178e6079146102bd5780631c8e8568146102e25780631d376026146103095780632101a6ad1461031d57806324fea3b01461033c5780632a8ec8cc1461034f5780632ee88808146103625780632f6b64ca1461038457806332ce8ebc1461044057806332f0a3b51461045e578063387402911461048d5780633f657a46146104a5578063433879831461053357806347c5ef43146105555780634c4316c7146105845780634eafbcd5146105b857806350f8a803146105d757806352dc7dcc146106125780635503d9ba1461065457806357adafb61461066757806360b1e057146106b65780636293c702146106c95780636ba3cc87146106e85780636e802c6a1461071657806372116e92146107d0578063796d56541461082157806379f4542e146108405780637e7db6e11461085f5780637f61fa931461087e57806380afdea8146108c057806381ea4408146108d35780638322fff2146108f25780638b3dd749146109055780639b3fdf4c146109185780639d4941d81461092b578063a1658fad1461094a578063af9f4563146109ad578063b12b5f76146109cf578063bde60ac9146109e5578063c4d66de8146109ff578063c8ae070f14610a1e578063cc19ecf714610a34578063ce17273c14610a80578063d4aae0c414610acf578063d639cd7314610ae2578063db7c231414610b4a578063e9c211e214610b96578063eba8ba0614610bb8578063f6b24b1c14610d0e578063f92a79ff14610d5a578063fbfa77cf14610dab575b600080fd5b341561027257600080fd5b61029b6001604060020a0360043516600160a060020a0360243581169060443516606435610dbe565b005b61029b6001604060020a0360043516600160a060020a0360243516610e19565b34156102c857600080fd5b6102d0610e2a565b60405190815260200160405180910390f35b34156102ed57600080fd5b6102f5610e4e565b604051901515815260200160405180910390f35b61029b6001604060020a0360043516610e57565b341561032857600080fd5b6102f56001604060020a0360043516610e67565b341561034757600080fd5b6102d0610f09565b341561035a57600080fd5b6102d0610f2b565b341561036d57600080fd5b61029b6001604060020a0360043516602435610f36565b341561038f57600080fd5b6103a96001604060020a036004358116906024351661106a565b6040516001604060020a0384168152600160a060020a038316602082015260606040820181815290820183818151815260200191508051906020019080838360005b838110156104035780820151838201526020016103eb565b50505050905090810190601f1680156104305780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561044b57600080fd5b61029b6004803560248101910135611198565b341561046957600080fd5b61047161122c565b604051600160a060020a03909116815260200160405180910390f35b341561049857600080fd5b61029b60043515156112ac565b34156104b057600080fd5b6104c46001604060020a0360043516611312565b6040518881526001604060020a038089166020830152878116604083015286811660608301528581166080830152841660a0820152600160a060020a03831660c082015260e0810182600281111561051857fe5b60ff1681526020019850505050505050505060405180910390f35b341561053e57600080fd5b61029b6001604060020a036004351660243561148f565b341561056057600080fd5b61029b6001604060020a036004358116906024358116906044359060643516611676565b341561058f57600080fd5b61029b6001604060020a0360043581169060243516600160a060020a036044351660643561168b565b34156105c357600080fd5b6102f5600160a060020a036004351661185a565b34156105e257600080fd5b6105f66001604060020a03600435166118d1565b6040516001604060020a03909116815260200160405180910390f35b341561061d57600080fd5b6105f660246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a0360643516611ac6565b341561065f57600080fd5b6102d0611d53565b341561067257600080fd5b61029b6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650611d5d95505050505050565b34156106c157600080fd5b6102d0611dc8565b34156106d457600080fd5b61029b600160a060020a0360043516611dec565b34156106f357600080fd5b61029b6001604060020a0360043516600160a060020a0360243516604435611e4d565b341561072157600080fd5b6105f660048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650505083356001604060020a03169360200135600160a060020a03169250611e5e915050565b34156107db57600080fd5b6105f66024600480358281019290820135918135918201910135600160a060020a036044358116906001604060020a036064358116916084359091169060a435166120c1565b341561082c57600080fd5b61029b6001604060020a036004351661256e565b341561084b57600080fd5b61029b600160a060020a03600435166125d8565b341561086a57600080fd5b6102f5600160a060020a0360043516612650565b341561088957600080fd5b6105f660246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a0360643516612656565b34156108cb57600080fd5b6102d06126d2565b34156108de57600080fd5b6102d0600160a060020a03600435166126d8565b34156108fd57600080fd5b61047161275a565b341561091057600080fd5b6102d061275f565b341561092357600080fd5b6102d0612765565b341561093657600080fd5b61029b600160a060020a0360043516612789565b341561095557600080fd5b6102f560048035600160a060020a031690602480359190606490604435908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965061290095505050505050565b34156109b857600080fd5b61029b6001604060020a0360043516602435612a3e565b34156109da57600080fd5b61029b600435612ad3565b61029b6001604060020a0360043581169060243516612b2b565b3415610a0a57600080fd5b61029b600160a060020a0360043516612b38565b3415610a2957600080fd5b61029b600435612b9d565b3415610a3f57600080fd5b61029b600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612c0c565b3415610a8b57600080fd5b61029b6004602481358181019083013580602081810201604051908101604052809392919081815260200183836020028082843750949650612d1595505050505050565b3415610ada57600080fd5b610471612d48565b3415610aed57600080fd5b61029b600480356001604060020a0316906044602480359081019083013580602080820201604051908101604052809392919081815260200183836020028082843750949650505092356001604060020a03169250612d57915050565b3415610b5557600080fd5b61029b600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612dcc565b3415610ba157600080fd5b61029b6001604060020a0360043516602435612ed5565b3415610bc357600080fd5b610bd76001604060020a0360043516612ffd565b60405180896002811115610be757fe5b60ff168152600160a060020a0389811660208301526001604060020a038781166080840152861660a083015284151560c0830152831660e08201526101008282038101604083019081529160608101910189818151815260200191508051906020019080838360005b83811015610c68578082015183820152602001610c50565b50505050905090810190601f168015610c955780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b83811015610ccb578082015183820152602001610cb3565b50505050905090810190601f168015610cf85780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b3415610d1957600080fd5b61029b600480356001604060020a039081169160248035600160a060020a0316926044358083019390810135926064359081019291013590608435166131cc565b3415610d6557600080fd5b61047160046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506132d595505050505050565b3415610db657600080fd5b6104716133b1565b6000600160a060020a0384161515610dd557600080fd5b610e04846020604051908101604052806000815250602060405190810160405260008082526203f48090611e5e565b9050610e128186858561168b565b5050505050565b610e268282600034610dbe565b5050565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b610e648133600034610dbe565b50565b600080610e73836133c5565b90506000815460ff166002811115610e8757fe5b1415610e965760009150610f03565b6002815460ff166002811115610ea857fe5b14610eaf57fe5b6001810154604060020a900460ff1615610ecc5760019150610f03565b60018101546001604060020a03161515610ee95760009150610f03565b6001810154610f00906001604060020a0316610e67565b91505b50919050565b6040516000805160206152718339815191528152601301604051809103902081565b606554600019015b90565b606954600090819033600160a060020a039081166101009092041614610f5b57600080fd5b610f648461340b565b91506001600383015460a060020a900460ff166002811115610f8257fe5b14610f8c57600080fd5b6002820154600183018054611057926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561101f57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411610fdc5790505b50505050600286810154600388015460009350839260c060020a9092046001604060020a031691600160a060020a039091169061343c565b905061106484828561375e565b50505050565b600080611075614ebf565b6000806110818761340b565b915081600101600187036001604060020a03168154811015156110a057fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a031694506110d4856133c5565b90508060000160019054906101000a9004600160a060020a03169350806002018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111885780601f1061115d57610100808354040283529160200191611188565b820191906000526020600020905b81548152906001019060200180831161116b57829003601f168201915b5050505050925050509250925092565b6000604051600080516020615271833981519152815260130160405180910390206111e3338260006040518059106111cd5750595b9080825280602002602001820160405250612900565b15156111ee57600080fd5b600091505b60ff82168390101561106457611221848460ff851681811061121157fe5b9050602002013560001916612b9d565b6001909101906111f3565b60008054600160a060020a0316151561124457600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561128d57600080fd5b6102c65a03f1151561129e57600080fd5b505050604051805191505090565b604051600080516020615271833981519152815260130160405180910390206112f4338260006040518059106111cd5750599080825280602002602001820160405250612900565b15156112ff57600080fd5b506069805460ff19169115919091179055565b600080600080600080600080611326614ed1565b61132f8a61340b565b610100604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156113c757602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116113845790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff169081111561143d57fe5b600281111561144857fe5b90525090508051985080604001519750806020015151965080606001519550806080015194508060a0015193508060c0015192508060e00151915050919395975091939597565b600080600061149d856118d1565b94506114a88561340b565b92506000600384015460a060020a900460ff1660028111156114c657fe5b146114d057600080fd5b60028301546114e7906001604060020a0316613832565b60028301546001840180546115af926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561157a57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116115375790505b505050506002870154600388015460009250829160c060020a90046001604060020a031690600160a060020a0316600161343c565b91506115bc85838661375e565b60028301546115d3906001604060020a03166133c5565b60695481546003860154929350600160a060020a036101009283900481169363a5426df1936001604060020a0388169304821691168860405160e060020a63ffffffff87160281526004810194909452600160a060020a039283166024850152911660448301526064820152608401600060405180830381600087803b151561165b57600080fd5b6102c65a03f1151561166c57600080fd5b5050505050505050565b61167f84613832565b61106484848484613889565b600080806001604060020a0387168190116116a557600080fd5b600084116116b257600080fd5b6116bb876133c5565b92506000835460ff1660028111156116cf57fe5b146116d957600080fd5b600160a060020a0385161515611726576069546101009004600160a060020a03166108fc85150285604051600060405180830381858888f19350505050151561172157600080fd5b6117c2565b606954600160a060020a03808716916323b872dd9133916101009004168760006040516020015260405160e060020a63ffffffff8616028152600160a060020a0393841660048201529190921660248201526044810191909152606401602060405180830381600087803b151561179c57600080fd5b6102c65a03f115156117ad57600080fd5b5050506040518051905015156117c257600080fd5b6117f38760006040518059106117d55750595b908082528060200260200182016040525060008060008a600061343c565b91506117fe8261340b565b80548501815590506001604060020a03821660007faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f68660405190815260200160405180910390a361185187838689613889565b50505050505050565b606954600090819060ff16806118775750600160a060020a038316155b156118855760019150610f03565b600160a060020a03831660009081526068602052604090205460ff16156118af5760019150610f03565b6118b8836126d8565b60009081526067602052604090205460ff169392505050565b6000806000806118e08561340b565b92506000600384015460a060020a900460ff1660028111156118fe57fe5b1461190b57849350611abe565b60028301546000604060020a9091046001604060020a031611801561194a57506002830154608060020a90046001604060020a0316611948613ee0565b115b15611a8d576002830154600184018054611a16926001604060020a031691906020808202016040519081016040528092919081815260200182805480156119e257602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a03168152602001906008019060208260070104928301926001038202915080841161199f5790505b505050506002870154600388015460009250829160c060020a90046001604060020a031690600160a060020a03168261343c565b6002840154909250611a6d90604060020a90046001604060020a03166000604051805910611a415750595b9080825280602002602001820160405250600386015460009081908790600160a060020a03168261343c565b9050611a7e8582856000015461375e565b809450611a8a8561340b565b92505b611a9685613ee4565b90506001604060020a0380821690861614611aba57611aba8582856000015461375e565b8093505b505050919050565b6000611ad18261185a565b1515611adc57600080fd5b5060648054908160018101611af18382614f1d565b91600052602060002090600402016000610100604051908101604052806001815260200133600160a060020a03168152602001876001604060020a0316815260200160006001604060020a0316815260200160001515815260200186600160a060020a031681526020018b8b8080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff19166001836002811115611be257fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a02600080516020615291833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515604060020a0268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611cd3929160200190614f49565b5060e082015181600301908051611cee929160200190614f49565b50505050806001604060020a03167fd921f0ff8d5f67ca22b52c5b4be3463a8cabd9d95c28a02dd7c86f9deb3329be86866040516020808252810182905280604081018484808284378201915050935050505060405180910390a29695505050505050565b6064546000190190565b600080805b8351831015611064576001604060020a03848481518110611d7f57fe5b90602001906020020151169150604060020a848481518110611d9d57fe5b90602001906020020151811515611db057fe5b049050611dbd828261148f565b600190920191611d62565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b60405160008051602061527183398151915281526013016040518091039020611e1482613fac565b611e1f338383612900565b1515611e2a57600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b611e5983338484610dbe565b505050565b6000611e698261185a565b1515611e7457600080fd5b5060648054908160018101611e898382614f1d565b916000526020600020906004020160006101006040519081016040528060008152600160a060020a03808c1660208301526001604060020a03891660408301526000606083018190526080830152871660a082015260c081018a905260e00188905291905081518154829060ff19166001836002811115611f0657fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a02600080516020615291833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515604060020a0268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611ff7929160200190614f49565b5060e082015181600301908051612012929160200190614f49565b50505050806001604060020a03167fad9c62a4382fd0ddbc4a0cf6c2bc7df75b0b8beb786ff59014f39daaea7f232f8560405160208082528190810183818151815260200191508051906020019080838360005b8381101561207e578082015183820152602001612066565b50505050905090810190601f1680156120ab5780820380516001836020036101000a031916815260200191505b509250505060405180910390a295945050505050565b6000806120cd8361185a565b15156120d857600080fd5b6001604060020a038516156122f5576120f0856133c5565b905060146122e2826101006040519081016040528154909190829060ff16600281111561211957fe5b600281111561212457fe5b81528154610100808204600160a060020a0390811660208086019190915260a860020a9093046001604060020a039081166040808701919091526001808801549283166060880152604060020a830460ff1615156080880152690100000000000000000090920490921660a08601526002808701805460c090970196909592811615909402600019019093169290920491601f8301819004810201905190810160405280929190818152602001828054600181600116156101000203166002900480156122325780601f1061220757610100808354040283529160200191612232565b820191906000526020600020905b81548152906001019060200180831161221557829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156122d45780601f106122a9576101008083540402835291602001916122d4565b820191906000526020600020905b8154815290600101906020018083116122b757829003601f168201915b505050505081525050613fcc565b6001604060020a0316106122f557600080fd5b606480549250826001810161230a8382614f1d565b9160005260206000209060040201600061010060405190810160405280600281526020018a600160a060020a03168152602001886001604060020a03168152602001896001604060020a0316815260200160001515815260200187600160a060020a031681526020018e8e8080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081526020018c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff191660018360028111156123fa57fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a02600080516020615291833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515604060020a0268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c0820151816002019080516124eb929160200190614f49565b5060e082015181600301908051612506929160200190614f49565b50505050816001604060020a03167f9958fc92731727637b02f1ac1e6caf2814442c27e1d962f0c477cd14280f586d89896040516020808252810182905280604081018484808284378201915050935050505060405180910390a25098975050505050505050565b6000612579826133c5565b905061258482613832565b60018101805468ff00000000000000001916604060020a1790556001604060020a0382167f74acb192d39829b88a66ad5363afa9120c5a306a458287a870351ae34a04d34660405160405180910390a25050565b60405160008051602061527183398151915281526013016040518091039020612620338260006040518059106111cd5750599080825280602002602001820160405250612900565b151561262b57600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b60006126c73388888080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505087878080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508686611e5e565b979650505050505050565b60015481565b60006126e2614ebf565b823b604051915080825280600060208401863c50806040518082805190602001908083835b602083106127265780518252601f199092019160209182019101612707565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b60008061279583612650565b15156127a057600080fd5b6127a861122c565b91506127b382614040565b15156127be57600080fd5b600160a060020a03831615156128105781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561280b57600080fd5b611e59565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561286757600080fd5b6102c65a03f1151561287857600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156128e057600080fd5b6102c65a03f115156128f157600080fd5b50505060405180515050505050565b600061290a614ebf565b6000808451111561292357835160200290508391508082525b600054600160a060020a03161580612a34575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156129ca5780820151838201526020016129b2565b50505050905090810190601f1680156129f75780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515612a1857600080fd5b6102c65a03f11515612a2957600080fd5b505050604051805190505b9695505050505050565b600080612a4a846118d1565b9350612a558461340b565b600281015490925060c060020a90046001604060020a03161515612a7857600080fd5b6000600383015460a060020a900460ff166002811115612a9457fe5b14612a9e57600080fd5b6002820154612ab5906001604060020a0316613832565b60028201546110579060c060020a90046001604060020a0316613ee4565b60405160008051602061527183398151915281526013016040518091039020612afb82614066565b612b06338383612900565b1515612b1157600080fd5b50506000908152606760205260409020805460ff19169055565b610e26828260003461168b565b60035415612b4557600080fd5b600160a060020a0381161515612b5a57600080fd5b612b62614077565b6069805461010060a860020a031916610100600160a060020a038416021790556001612b8f606482614f1d565b506001610e26606582614fc3565b60405160008051602061527183398151915281526013016040518091039020612be5338260006040518059106111cd5750599080825280602002602001820160405250612900565b1515612bf057600080fd5b506000908152606760205260409020805460ff19166001179055565b6000612c17886133c5565b805490915033600160a060020a039081166101009092041614612c3957600080fd5b6001815460ff166002811115612c4b57fe5b14612c5557600080fd5b805461010060a860020a031916610100600160a060020a03891602178155612c81600282018787614fef565b50612c90600382018585614fef565b5080546001604060020a0380841660a860020a0260008051602061529183398151915290921691909117825588167f6586deed9fa035704e9886588d904801e7e86d1ebd926905fa03a0018531b2fd85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b60005b8151811015610e2657612d3f828281518110612d3057fe5b906020019060200201516118d1565b50600101612d18565b600054600160a060020a031681565b600080805b8451831015612dc4576001604060020a03858481518110612d7957fe5b90602001906020020151169150604060020a858481518110612d9757fe5b90602001906020020151811515612daa57fe5b049050612db986838387611676565b600190920191612d5c565b505050505050565b6000612dd7886133c5565b805490915033600160a060020a039081166101009092041614612df957600080fd5b6000815460ff166002811115612e0b57fe5b14612e1557600080fd5b805461010060a860020a031916610100600160a060020a03891602178155612e41600282018787614fef565b50612e50600382018585614fef565b5080546001604060020a0380841660a860020a0260008051602061529183398151915290921691909117825588167f4b2f87168338ea08f27c7f7b2dfe4e61feb620ffe9a6a6a18afeaf94546075bf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b606954600090819033600160a060020a039081166101009092041614612efa57600080fd5b612f038461340b565b91506001600383015460a060020a900460ff166002811115612f2157fe5b14612f2b57600080fd5b6002820154600183018054612ff2926001604060020a03169190602080820201604051908101604052809291908181526020018280548015612fbe57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411612f7b5790505b505050506002860154600387015460009250829160c060020a90046001604060020a031690600160a060020a03168261343c565b9050611057816118d1565b600080613008614ebf565b613010614ebf565b60008060008060006130218a6133c5565b80546002808301805460ff84169d5061010093849004600160a060020a03169c5093945092600181161590920260001901909116046020601f820181900481020160405190810160405280929190818152602001828054600181600116156101000203166002900480156130d65780601f106130ab576101008083540402835291602001916130d6565b820191906000526020600020905b8154815290600101906020018083116130b957829003601f168201915b50505050509650806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131755780601f1061314a57610100808354040283529160200191613175565b820191906000526020600020905b81548152906001019060200180831161315857829003601f168201915b505084546001909501549c9e9b9d50999b929a60a860020a9094046001604060020a039081169a50831698505050604060020a810460ff16955069010000000000000000009004600160a060020a03169350915050565b60006131d7886133c5565b805490915033600160a060020a0390811661010090920416146131f957600080fd5b6002815460ff16600281111561320b57fe5b1461321557600080fd5b805461010060a860020a031916610100600160a060020a03891602178155613241600282018787614fef565b50613250600382018585614fef565b5080546001604060020a0380841660a860020a0260008051602061529183398151915290921691909117825588167fab039fa652845d2aa9439ffe6f2130ee7203ed63f29b71bed5b3b74f27c5870785856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b60006132df614091565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561334657808201518382015260200161332e565b50505050905090810190601f1680156133735780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b151561339157600080fd5b6102c65a03f115156133a257600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b6064546000906001604060020a038316106133df57600080fd5b606480546001604060020a0384169081106133f657fe5b90600052602060002090600402019050919050565b6065546000906001604060020a0383161061342557600080fd5b606580546001604060020a0384169081106133f657fe5b6000806000888a898989898960405180888051906020019060200280838360005b8381101561347557808201518382015260200161345d565b50505060c060020a6001604060020a03808d168202959093019485528a83168102600886015289831681026010860152918816909102601884015250506c01000000000000000000000000600160a060020a0385160260208201526034018260028111156134df57fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019750505050505050506040519081900390206000818152606660205260408120549193506001604060020a03909116915081111561354957809250613751565b50606580546000838152606660205260409020805467ffffffffffffffff19166001604060020a0383161790558154909190600181016135898382614fc3565b9160005260206000209060040201600061010060405190810160405280600081526020018d81526020018e6001604060020a031681526020018c6001604060020a031681526020018b6001604060020a031681526020018a6001604060020a0316815260200189600160a060020a0316815260200188600281111561360a57fe5b90529190508151815560208201518160010190805161362d92916020019061505d565b50604082015160028201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160020160086101000a8154816001604060020a0302191690836001604060020a0316021790555060808201518160020160106101000a8154816001604060020a0302191690836001604060020a0316021790555060a08201518160020160186101000a8154816001604060020a0302191690836001604060020a0316021790555060c082015160038201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560e082015160038201805474ff0000000000000000000000000000000000000000191660a060020a83600281111561374557fe5b02179055505050508092505b5050979650505050505050565b60008060006137706001878787614128565b9250846001604060020a0316866001604060020a0316141561379157612dc4565b82151561379d57612dc4565b6137a68661340b565b91506137b18561340b565b8254909150839010156137c357600080fd5b8154839003825580548301808255839010156137de57600080fd5b846001604060020a0316866001604060020a03167faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f68560405190815260200160405180910390a36118516000878786614128565b600061383d826133c5565b600181015490915033600160a060020a03908116690100000000000000000090920416148061387e5750805433600160a060020a0390811661010090920416145b1515610e2657600080fd5b600080808080806001604060020a0387168190116138a657600080fd5b6138af896118d1565b98506138ba8961340b565b95506138c5876133c5565b94506000600387015460a060020a900460ff1660028111156138e357fe5b146138ed57600080fd5b60028601546001604060020a038b811691161415613be8576000855460ff16600281111561391757fe5b141561392d5761392889898961414e565b613ed4565b6002855460ff16600281111561393f57fe5b1415613950576139288989896141a8565b6001855460ff16600281111561396257fe5b1415613be657613a8e8661010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015613a0457602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116139c15790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff1690811115613a7a57fe5b6002811115613a8557fe5b905250886143e6565b60028701546001604060020a0391821695506000604060020a909104909116118015613ac157506001604060020a038414155b15613bc757600186015460001901841415613baa576002860154600187018054613b9d926001604060020a03169190602080820201604051908101604052809291908181526020018280548015613b6957602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411613b265790505b5050505060028a015460038b015460009250829160c060020a90046001604060020a031690600160a060020a03168261343c565b925061392889848a61375e565b613bc189896001848a60010180549050030361444c565b50613ed4565b613bd98989886001018054905061444c565b9850613928898989614556565bfe5b613d0e8661010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015613c8457602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411613c415790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff1690811115613cfa57fe5b6002811115613d0557fe5b9052508b6143e6565b6001604060020a0390811692508214613be6576000855460ff166002811115613d3357fe5b1415613d645760028601546001604060020a03888116911614613d5257fe5b613bc18989886001018054905061444c565b6001855460ff166002811115613d7657fe5b1415613e9857613e638661010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015613a0457600091825260209182902080546001604060020a031684529082028301929091600891018084116139c1575050509284525050506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff1690811115613a7a57fe5b6001604060020a039081169150811480613e7c57508181115b15613baa57613bd989896001858a60010180549050030361444c565b6002855460ff166002811115613eaa57fe5b1415613be657613ec789896001858a60010180549050030361444c565b9850613928898989614686565b50505050505050505050565b4290565b600080806001604060020a0384161515613f015760009250613fa5565b613f0a8461340b565b6002810154909250613f24906001604060020a03166133c5565b90506000815460ff166002811115613f3857fe5b1415613f4657839250613fa5565b6002815460ff166002811115613f5857fe5b14613f5f57fe5b6002820154613f76906001604060020a0316610e67565b1515613f8457839250613fa5565b6002820154613fa29060c060020a90046001604060020a0316613ee4565b92505b5050919050565b613fb4614ebf565b613fc682600160a060020a0316614999565b92915050565b600080600283516002811115613fde57fe5b14613fe557fe5b82606001516001604060020a031615156140025760019150610f03565b61400f83606001516133c5565b9050614036816101006040519081016040528154909190829060ff16600281111561211957fe5b6001019392505050565b600080600160a060020a038316151561405c5760009150610f03565b50506000903b1190565b61406e614ebf565b613fc682614999565b6003541561408457600080fd5b61408c6149e0565b600355565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561410457600080fd5b6102c65a03f1151561411557600080fd5b50505060405180519250829150505b5090565b8061413685858086856149e4565b905061414585848686856149e4565b95945050505050565b60008061415a8561340b565b915061419b83600060405180591061416f5750595b9080825280602002602001820160405250600385015460009081908190600160a060020a03168161343c565b9050610e1285828661375e565b60008060006141b68661340b565b925060146142df846101006040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561425657602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116142135790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff16908111156142cc57fe5b60028111156142d757fe5b905250614b4c565b106142e957600080fd5b6142f284610e67565b156142fc57600080fd5b6002830154600184018054614399926001604060020a031691906020808202016040519081016040528092919081815260200182805480156119e257600091825260209182902080546001604060020a0316845290820283019290916008910180841161199f5750505050600288015460038901546000935083925060c060020a9091046001604060020a031690600160a060020a03168261343c565b91506143d9846000604051805910611a415750599080825280602002602001820160405250600386015460009081908790600160a060020a03168261343c565b9050612dc486828761375e565b6000805b83602001515181101561443a57826001604060020a03168460200151828151811061441157fe5b906020019060200201516001604060020a0316141561443257809150614445565b6001016143ea565b6001604060020a0391505b5092915050565b600080614457614ebf565b60006144628761340b565b600181015490935085900360405180591061447a5750595b90808252806020026020018201604052509150600090505b600183015485900381101561450557600183018054829081106144b157fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a03168282815181106144e657fe5b6001604060020a03909216602092830290910190910152600101614492565b6002830154600384015461453f916001604060020a03808216928692600092839260c060020a9092041690600160a060020a03168261343c565b935061454c87858861375e565b5050509392505050565b6000614560614ebf565b60008061456c8761340b565b6001810154909450600a901061458157600080fd5b600180850154016040518059106145955750595b90808252806020026020018201604052509250600091505b600184015482101561462057600184018054839081106145c957fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a03168383815181106145fe57fe5b6001604060020a039092166020928302909101909101526001909101906145ad565b6001840154859084908151811061463357fe5b6001604060020a03928316602091820290920101526002850154600386015461467992828116928792600092839260c060020a90041690600160a060020a03168261343c565b905061185187828861375e565b6000806146928561340b565b9150601461477d836101006040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561425657600091825260209182902080546001604060020a03168452908202830192909160089101808411614213575050509284525050506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff16908111156142cc57fe5b1061478757600080fd5b61479083610e67565b1561479a57600080fd5b600282015460018301805461419b926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561482d57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116147ea5790505b50505050508561495886610100604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156148cf57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a03168152602001906008019060208260070104928301926001038202915080841161488c5790505b50505091835250506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff169081111561494557fe5b600281111561495057fe5b905250614c62565b6001604060020a0316614969613ee0565b60028801546003890154919092019160c060020a90046001604060020a031690600160a060020a0316600061343c565b6149a1614ebf565b60016040518059106149b05750595b9080825280602002602001820160405250905081816000815181106149d157fe5b60209081029091010152919050565b4390565b600080600080866001604060020a0316886001604060020a031614614a0b57610100614a0e565b60005b61ffff169250849350614a208861340b565b60028101546003820154919350614a52918b916001604060020a0316908a908a908890600160a060020a03168a614cfa565b9350600090505b60018201546001604060020a0382161015614ae557614adb8983600101836001604060020a0316815481101515614a8c57fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a031689898588016001018760030160009054906101000a9004600160a060020a03168a614cfa565b9350600101614a59565b60028201546000604060020a9091046001604060020a03161115614b405760028201546003830154614b3d918b91604060020a9091046001604060020a0316908a908a9060ff890190600160a060020a03168a614cfa565b93505b50505095945050505050565b6000808260a001516001604060020a03161515614b6c5760009150610f03565b614b798360a0015161340b565b9050614036816101006040519081016040529081600082015481526020016001820180548060200260200160405190810160405280929190818152602001828054801561425657600091825260209182902080546001604060020a03168452908202830192909160089101808411614213575050509284525050506002828101546001604060020a038082166020850152604060020a820481166040850152608060020a82048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019160a060020a900460ff16908111156142cc57fe5b6000806000614c7484604001516133c5565b805460a860020a90046001604060020a031693509150600090505b836020015151811015613fa557614cbe84602001518281518110614caf57fe5b906020019060200201516133c5565b80549092506001604060020a0380851660a860020a909204161115614cf257815460a860020a90046001604060020a031692505b600101614c8f565b80600080614d07896133c5565b600181015490915069010000000000000000009004600160a060020a031615801590614d335750600083115b15613751578915614e0b57600181015469010000000000000000009004600160a060020a03166331c51a008a8a8a8a8a8a60006040516020015260405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401602060405180830381600087803b1515614dda57600080fd5b6102c65a03f11515614deb57600080fd5b505050604051805192505082821115614e0357600080fd5b819250613751565b600181015469010000000000000000009004600160a060020a0316630da5e18c8a8a8a8a8a8a60405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401600060405180830381600087803b1515614e9e57600080fd5b6102c65a03f11515614eaf57600080fd5b5050505050979650505050505050565b60206040519081016040526000815290565b6101006040519081016040528060008152602001614eed614ebf565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b815481835581811511611e5957600402816004028360005260206000209182019101611e599190615111565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10614f8a57805160ff1916838001178555614fb7565b82800160010185558215614fb7579182015b82811115614fb7578251825591602001919060010190614f9c565b50614124929150615178565b815481835581811511611e5957600402816004028360005260206000209182019101611e599190615192565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106150305782800160ff19823516178555614fb7565b82800160010185558215614fb7579182015b82811115614fb7578235825591602001919060010190615042565b828054828255906000526020600020906003016004900481019282156151055791602002820160005b838211156150d057835183826101000a8154816001604060020a0302191690836001604060020a031602179055509260200192600801602081600701049283019260010302615086565b80156151035782816101000a8154906001604060020a0302191690556008016020816007010492830192600103026150d0565b505b506141249291506151e2565b610f3391905b808211156141245780547fffffff00000000000000000000000000000000000000000000000000000000009081168255600182018054909116905560006151616002830182615207565b61516f600383016000615207565b50600401615117565b610f3391905b80821115614124576000815560010161517e565b610f3391905b808211156141245760008082556151b2600183018261524b565b506000600282015560038101805474ffffffffffffffffffffffffffffffffffffffffff19169055600401615198565b610f3391905b8082111561412457805467ffffffffffffffff191681556001016151e8565b50805460018160011615610100020316600290046000825580601f1061522d5750610e64565b601f016020900490600052602060002090810190610e649190615178565b508054600082556003016004900490600052602060002090810190610e6491906151785600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000ffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffa165627a7a72305820fa76ba0a88396432496b9dacf34ea70e17c7be4a1c8e8c09336ed85332ddf5e10029",
            "sourceMap": "1153:11338:29:-;;;;;;;;;-1:-1:-1;;;1153:11338:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3126:359;;;;;;;;;;-1:-1:-1;;;;;3126:359:29;;;-1:-1:-1;;;;;3126:359:29;;;;;;;;;;;;;;2021:179;;-1:-1:-1;;;;;2021:179:29;;;-1:-1:-1;;;;;2021:179:29;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1510:155:29;;-1:-1:-1;;;;;1510:155:29;;;;;11584:478:34;;;;;;;;;;-1:-1:-1;;;;;11584:478:34;;;;;1061:78:32;;;;;;;;;;;;1446:98:35;;;;;;;;;;;;7799:455:29;;;;;;;;;;-1:-1:-1;;;;;7799:455:29;;;;;;;2289:399:31;;;;;;;;;;-1:-1:-1;;;;;2289:399:31;;;;;;;;;;;;;-1:-1:-1;;;;;2289:399:31;;;;-1:-1:-1;;;;;2289:399:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1746:226:32;;;;;;;;;;;;;;;;;;;;;1226::8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1226:226:8;;;;;;;;;;;;;;2602:126:32;;;;;;;;;;;;;;;;1905:613:35;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6865:688:29;;;;;;;;;;-1:-1:-1;;;;;6865:688:29;;;;;;;6306:236;;;;;;;;;;-1:-1:-1;;;;;6306:236:29;;;;;;;;;;;;;;;;;;4645:1004;;;;;;;;;;-1:-1:-1;;;;;4645:1004:29;;;;;;;;-1:-1:-1;;;;;4645:1004:29;;;;;;;2828:450:32;;;;;;;;;;-1:-1:-1;;;;;2828:450:32;;;;;3758:1304:31;;;;;;;;;;-1:-1:-1;;;;;3758:1304:31;;;;;;;;-1:-1:-1;;;;;3758:1304:31;;;;;;;;;;;;;;4892:589:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4892:589:34;;;-1:-1:-1;;;;;4892:589:34;;;;;9934:101;;;;;;;;;;;;11889:285:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11889:285:29;;-1:-1:-1;11889:285:29;;-1:-1:-1;;;;;;11889:285:29;565:118:18;;;;;;;;;;;;2304:150:32;;;;;;;;;;-1:-1:-1;;;;;2304:150:32;;;;;2539:166:29;;;;;;;;;;-1:-1:-1;;;;;2539:166:29;;;-1:-1:-1;;;;;2539:166:29;;;;;;;2442:611:34;;;;;;;;;;;;;-1:-1:-1;;;;;2442:611:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2442:611:34;;-1:-1:-1;;;2442:611:34;;-1:-1:-1;;;;;2442:611:34;;;;;-1:-1:-1;;;;;2442:611:34;;-1:-1:-1;2442:611:34;;-1:-1:-1;;2442:611:34;7548:901;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7548:901:34;;;;;-1:-1:-1;;;;;7548:901:34;;;;;;;;;;;;;;;;9250:221:29;;;;;;;;;;-1:-1:-1;;;;;9250:221:29;;;;;1218:134:32;;;;;;;;;;-1:-1:-1;;;;;1218:134:32;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;2123:313:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2123:313:34;;;-1:-1:-1;;;;;2123:313:34;;;;;113:20:7;;;;;;;;;;;;3356:485:32;;;;;;;;;;-1:-1:-1;;;;;3356:485:32;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;689:115:18;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;9772:408:29;;;;;;;;;;-1:-1:-1;;;;;9772:408:29;;;;;;;2049:174:32;;;;;;;;;;;;;;3834:146:29;;-1:-1:-1;;;;;3834:146:29;;;;;;;;;;1703:258:31;;;;;;;;;;-1:-1:-1;;;;;1703:258:31;;;;;1592:148:32;;;;;;;;;;;;;;6235:542:34;;;;;;;;;;;;;-1:-1:-1;;;;;6235:542:34;;;;;;;-1:-1:-1;;;;;6235:542:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;12327:162:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12327:162:29;;-1:-1:-1;12327:162:29;;-1:-1:-1;;;;;;12327:162:29;86:21:7;;;;;;;;;;;;11188:378:29;;;;;;;;;;;;;-1:-1:-1;;;;;11188:378:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11188:378:29;;-1:-1:-1;;;11188:378:29;;-1:-1:-1;;;;;11188:378:29;;-1:-1:-1;11188:378:29;;-1:-1:-1;;11188:378:29;3693:522:34;;;;;;;;;;;;;-1:-1:-1;;;;;3693:522:34;;;;;;;-1:-1:-1;;;;;3693:522:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;8517:581:29;;;;;;;;;;-1:-1:-1;;;;;8517:581:29;;;;;;;10803:574:34;;;;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10803:574:34;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9153:531:34;;;;;;;;;;;;;-1:-1:-1;;;;;9153:531:34;;;;;;;-1:-1:-1;;;;;9153:531:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;2582:21:33;;;;;;;;;;;;3126:359:29;3345:14;-1:-1:-1;;;;;3259:17:29;;;;3251:26;;;;;;3362:64;3371:12;3362:64;;;;;;;;;;;;;;;;;;;;;;;;;3393:6;;3362:8;:64::i;:::-;3345:81;;3436:42;3443:7;3452:10;3464:5;3471:6;3436;:42::i;:::-;3126:359;;;;;:::o;2021:179::-;2134:59;2152:10;2164:12;223:1:11;2183:9:29;2134:17;:59::i;:::-;2021:179;;:::o;448:111:18:-;493:66;448:111;:::o;2538:37:33:-;;;;;;:::o;1510:155:29:-;1601:57;1619:10;1631;223:1:11;1648:9:29;1601:17;:57::i;:::-;1510:155;:::o;11584:478:34:-;11658:4;11678:21;11702;11713:9;11702:10;:21::i;:::-;11678:45;-1:-1:-1;11753:21:34;11738:11;;;;:36;;;;;;;;;11734:79;;;11797:5;11790:12;;;;11734:79;11845:23;11830:11;;;;:38;;;;;;;;;11823:46;;;;11884:10;;;;-1:-1:-1;;;11884:10:34;;;;11880:52;;;11917:4;11910:11;;;;11880:52;11945:15;;;;-1:-1:-1;;;;;11945:15:34;:20;11941:63;;;11988:5;11981:12;;;;11941:63;12039:15;;;;12021:34;;-1:-1:-1;;;;;12039:15:34;12021:17;:34::i;:::-;12014:41;;11584:478;;;;;:::o;1061:78:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;1061:78;:::o;1446:98:35:-;1519:7;:14;-1:-1:-1;;1519:18:35;1446:98;;:::o;7799:455:29:-;1548:5:31;;7880:16:29;;;;1526:10:31;-1:-1:-1;;;;;1526:28:31;;;1548:5;;;;;1526:28;1518:37;;;;;;7899:21:29;7911:8;7899:11;:21::i;:::-;7880:40;-1:-1:-1;7956:18:29;7939:13;;;;-1:-1:-1;;;7939:13:29;;;;:35;;;;;;;;;7931:44;;;;;;8040:7;;;;;8061:17;;8007:187;;;;-1:-1:-1;;;;;8040:7:29;;8061:17;8007:187;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8007:187:29;-1:-1:-1;;;;;8007:187:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;8122:11:29;;;;;8147:7;;;;8092:1;;-1:-1:-1;8092:1:29;;-1:-1:-1;;;8122:11:29;;;-1:-1:-1;;;;;8122:11:29;;-1:-1:-1;;;;;8147:7:29;;;;8007:19;:187::i;:::-;7986:208;;8205:42;8217:8;8227:11;8240:6;8205:11;:42::i;:::-;7799:455;;;;:::o;2289:399:31:-;2384:17;2411:12;2433:11;;:::i;:::-;2461:16;2568:28;2480:21;2492:8;2480:11;:21::i;:::-;2461:40;;2524:1;:17;;2556:1;2542:11;:15;-1:-1:-1;;;;;2524:34:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2524:34:31;2511:47;;2599:22;2610:10;2599;:22::i;:::-;2568:53;;2638:8;:13;;;;;;;;;;-1:-1:-1;;;;;2638:13:31;2631:20;;2668:8;:13;;2661:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2289:399;;;;;;;:::o;1746:226:32:-;1855:7;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;1865:1:32;1855:11;;1850:116;1868:25;;;;;;1850:116;;;1914:41;1937:14;;:17;;;;;;;;;;;;;;;;;;;1914:22;:41::i;:::-;1895:3;;;;;1850:116;;1226:226:8;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1226:226:8;:::o;2602:126:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;2688:17:32;:33;;-1:-1:-1;;2688:33:32;2708:13;;2688:33;;;;;;2602:126::o;1905:613:35:-;1972:11;1993:12;2015:17;2042:22;2074:17;2101:16;2127:13;2150:23;2190:15;;:::i;:::-;2208:21;2220:8;2208:11;:21::i;:::-;2190:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2190:39:35;-1:-1:-1;;;;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2190:39:35;;;-1:-1:-1;;2190:39:35;;;;;-1:-1:-1;;;;;2190:39:35;;;;;;;-1:-1:-1;;;2190:39:35;;;;;;;;-1:-1:-1;;;2190:39:35;;;;;;;;-1:-1:-1;;;2190:39:35;;;;;;;;;;;;-1:-1:-1;;;;;2190:39:35;;;;;;;;;;;-1:-1:-1;;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2190:39:35;-1:-1:-1;2190:39:35;2248:8;2239:17;;2274:1;:7;;;2266:15;;2311:1;:17;;;:24;2291:45;;2364:1;:17;;;2346:35;;2404:1;:12;;;2391:25;;2438:1;:11;;;2426:23;;2467:1;:7;;;2459:15;;2498:1;:13;;;2484:27;;1905:613;;;;;;;;;;:::o;6865:688:29:-;7001:16;7142:18;7416:25;6941;6957:8;6941:15;:25::i;:::-;6930:36;;7020:21;7032:8;7020:11;:21::i;:::-;7001:40;-1:-1:-1;7076:19:29;7059:13;;;;-1:-1:-1;;;7059:13:29;;;;:36;;;;;;;;;7051:45;;;;;;7123:7;;;;7106:25;;-1:-1:-1;;;;;7123:7:29;7106:16;:25::i;:::-;7196:7;;;;;7217:17;;7163:189;;;;-1:-1:-1;;;;;7196:7:29;;7217:17;7163:189;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7163:189:29;-1:-1:-1;;;;;7163:189:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;7278:11:29;;;;7303:7;;;;7248:1;;-1:-1:-1;7248:1:29;;-1:-1:-1;;;7278:11:29;;-1:-1:-1;;;;;7278:11:29;;-1:-1:-1;;;;;7303:7:29;;7163:19;:189::i;:::-;7142:210;;7363:42;7375:8;7385:11;7398:6;7363:11;:42::i;:::-;7455:7;;;;7444:19;;-1:-1:-1;;;;;7455:7:29;7444:10;:19::i;:::-;7473:5;;7518:10;;7530:7;;;;7416:47;;-1:-1:-1;;;;;;7473:5:29;;;;;;;;:22;;-1:-1:-1;;;;;7496:20:29;;;7518:10;;;;7530:7;7539:6;7473:73;;-1:-1:-1;;;7473:73:29;;;;;;;;;;;;;-1:-1:-1;;;;;7473:73:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6865:688;;;;;:::o;6306:236::-;6450:26;6467:8;6450:16;:26::i;:::-;6486:49;6496:8;6506;6516:6;6524:10;6486:9;:49::i;4645:1004::-;4878:26;;;-1:-1:-1;;;;;4761:11:29;;;;;4753:20;;;;;;4865:1;4856:10;;4848:19;;;;;;4907;4918:7;4907:10;:19::i;:::-;4878:48;-1:-1:-1;4964:21:29;4944:16;;;;:41;;;;;;;;;4936:50;;;;;;-1:-1:-1;;;;;5051:12:29;;;5047:166;;;5079:5;;;;;-1:-1:-1;;;;;5079:5:29;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5047:166;;;5186:5;;-1:-1:-1;;;;;5140:25:29;;;;;;5166:10;;5186:5;;;;5194:6;5140:61;;;;;;;;-1:-1:-1;;;5140:61:29;;;;;;-1:-1:-1;;;;;5140:61:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5132:70;;;;;;;;5241:219;5274:7;5308:1;5295:15;;;;;;;;;;;;;;;;;;;;;;;;5367:1;5382;5397;5412:5;5431:19;5241;:219::i;:::-;5223:237;;5492:21;5504:8;5492:11;:21::i;:::-;5523:20;;;;;;5471:42;-1:-1:-1;;;;;;5554:29:29;;5523:10;5554:29;5537:6;5554:29;;;;;;;;;;;;;;5594:48;5604:7;5613:8;5623:6;5631:10;5594:9;:48::i;:::-;4645:1004;;;;;;;:::o;2828:450:32:-;2905:17;;2885:4;;;;2905:17;;;:32;;-1:-1:-1;;;;;;2926:11:32;;;2905:32;2901:74;;;2960:4;2953:11;;;;2901:74;-1:-1:-1;;;;;3028:29:32;;;;;;:23;:29;;;;;;;;3024:71;;;3080:4;3073:11;;;;3024:71;3199:17;3211:4;3199:11;:17::i;:::-;3234:37;;;;:23;:37;;;;;;;;;2828:450;-1:-1:-1;;;2828:450:32:o;3758:1304:31:-;3815:6;3833:16;4231;4486:15;3852:21;3864:8;3852:11;:21::i;:::-;3833:40;-1:-1:-1;4019:19:31;4002:13;;;;-1:-1:-1;;;4002:13:31;;;;:36;;;;;;;;;3998:82;;4061:8;4054:15;;;;3998:82;4161:17;;;;4181:1;-1:-1:-1;;;4161:17:31;;;-1:-1:-1;;;;;4161:17:31;:21;4160:55;;;;-1:-1:-1;4202:12:31;;;;-1:-1:-1;;;4202:12:31;;-1:-1:-1;;;;;4202:12:31;4189:10;:8;:10::i;:::-;:25;4160:55;4156:714;;;4287:7;;;;;4312:17;;4250:222;;;;-1:-1:-1;;;;;4287:7:31;;4312:17;4250:222;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4250:222:31;-1:-1:-1;;;;;4250:222:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;4385:11:31;;;;4414:7;;;;4347:1;;-1:-1:-1;4347:1:31;;-1:-1:-1;;;4385:11:31;;-1:-1:-1;;;;;4385:11:31;;-1:-1:-1;;;;;4414:7:31;4347:1;4250:19;:222::i;:::-;4541:17;;;;4231:241;;-1:-1:-1;4504:228:31;;-1:-1:-1;;;4541:17:31;;-1:-1:-1;;;;;4541:17:31;4589:1;4576:15;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4674:7:31;;;;4609:1;;;;4647:9;;-1:-1:-1;;;;;4674:7:31;4609:1;4504:19;:228::i;:::-;4486:246;;4746:41;4758:8;4768;4778:1;:8;;;4746:11;:41::i;:::-;4812:8;4801:19;;4838:21;4850:8;4838:11;:21::i;:::-;4834:25;;4156:714;4891:37;4919:8;4891:27;:37::i;:::-;4880:48;-1:-1:-1;;;;;;4942:20:31;;;;;;;4938:92;;4978:41;4990:8;5000;5010:1;:8;;;4978:11;:41::i;:::-;5047:8;5040:15;;3758:1304;;;;;;;:::o;4892:589:34:-;5043:17;5085:21;5099:6;5085:13;:21::i;:::-;5077:30;;;;;;;;-1:-1:-1;5154:6:34;:13;;;;5179:254;;;;5154:6;5179:254;;:::i;:::-;;;;;;;;;;;;5204:219;;;;;;;;;5233:24;5204:219;;;;5275:10;-1:-1:-1;;;;;5204:219:34;;;;;5303:10;-1:-1:-1;;;;;5204:219:34;;;;;5331:1;-1:-1:-1;;;;;5204:219:34;;;;;5350:5;5204:219;;;;;;5373:6;-1:-1:-1;;;;;5204:219:34;;;;;5397:4;;5204:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5419:3;;5204:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5204:219:34;;;;-1:-1:-1;5179:254:34;;;-1:-1:-1;5179:254:34;;-1:-1:-1;;5179:254:34;;;;;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;;;-1:-1:-1;;;;;;5179:254:34;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;-1:-1:-1;;;5179:254:34;-1:-1:-1;;;;;;;;;;;5179:254:34;;;;;;;;;;;;;;;-1:-1:-1;;5179:254:34;-1:-1:-1;;;;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5179:254:34;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;;-1:-1:-1;;;;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;5458:10;-1:-1:-1;;;;;5444:30:34;;5470:3;;5444:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4892:589;;;;;;;;:::o;9934:101::-;10011:6;:13;-1:-1:-1;;10011:17:34;9934:101;:::o;11889:285:29:-;11953:6;;;11948:220;11969:14;:21;11965:1;:25;11948:220;;;-1:-1:-1;;;;;12037:14:29;12052:1;12037:14;:17;;;;;;;;;;;;;;;:27;12012:53;;-1:-1:-1;;;12093:14:29;12108:1;12093:17;;;;;;;;;;;;;;;;:23;;;;;;;;12079:37;;12131:26;12140:8;12150:6;12131:8;:26::i;:::-;11992:3;;;;;11948:220;;565:118:18;617:66;565:118;:::o;2304:150:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2389:9;2393:4;2389:3;:9::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;;;;;;2410:29:32;2442:5;2410:29;;;:23;:29;;;;;:37;;-1:-1:-1;;2410:37:32;;;2304:150::o;2539:166:29:-;2642:56;2660:10;2672;2684:5;2691:6;2642:17;:56::i;:::-;2539:166;;;:::o;2442:611:34:-;2610:14;2648:21;2662:6;2648:13;:21::i;:::-;2640:30;;;;;;;;-1:-1:-1;2714:6:34;:13;;;;2766:245;;;;2714:6;2766:245;;:::i;:::-;;;;;;;;;;;;2791:210;;;;;;;;;2820:21;2791:210;;-1:-1:-1;;;;;2791:210:34;;;;;;;-1:-1:-1;;;;;2791:210:34;;;;;;-1:-1:-1;2791:210:34;;;;;;;;;;;;;;;;;;;;;;;;;;;2766:245;;-1:-1:-1;2766:245:34;;;;;;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;;;-1:-1:-1;;;;;;2766:245:34;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;-1:-1:-1;;;2766:245:34;-1:-1:-1;;;;;;;;;;;2766:245:34;;;;;;;;;;;;;;;-1:-1:-1;;2766:245:34;-1:-1:-1;;;;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2766:245:34;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;;-1:-1:-1;;;;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3033:7;-1:-1:-1;;;;;3022:24:34;;3042:3;3022:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2442:611:34;;;;;;;:::o;7548:901::-;7758:16;7870:21;7799;7813:6;7799:13;:21::i;:::-;7791:30;;;;;;;;-1:-1:-1;;;;;7836:18:34;;;7832:250;;7894:25;7905:13;7894:10;:25::i;:::-;7870:49;;1096:2;8028:19;8045:1;8028:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8028:19:34;;;;;;;;;;;-1:-1:-1;;;8028:19:34;;;-1:-1:-1;;;;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:19::i;:::-;-1:-1:-1;;;;;8028:42:34;;8020:51;;;;;;8111:6;:13;;;-1:-1:-1;8111:13:34;8136:267;;;;8111:6;8136:267;;:::i;:::-;;;;;;;;;;;;8161:232;;;;;;;;;8190:23;8161:232;;;;8231:12;-1:-1:-1;;;;;8161:232:34;;;;;8261:10;-1:-1:-1;;;;;8161:232:34;;;;;8289:13;-1:-1:-1;;;;;8161:232:34;;;;;8320:5;8161:232;;;;;;8343:6;-1:-1:-1;;;;;8161:232:34;;;;;8367:4;;8161:232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8389:3;;8161:232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8161:232:34;;;;-1:-1:-1;8136:267:34;;;-1:-1:-1;8136:267:34;;-1:-1:-1;;8136:267:34;;;;;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;;;-1:-1:-1;;;;;;8136:267:34;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;-1:-1:-1;;;8136:267:34;-1:-1:-1;;;;;;;;;;;8136:267:34;;;;;;;;;;;;;;;-1:-1:-1;;8136:267:34;-1:-1:-1;;;;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8136:267:34;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;;-1:-1:-1;;;;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;8427:9;-1:-1:-1;;;;;8414:28:34;;8438:3;;8414:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7548:901;;;;;;;;;;;:::o;9250:221:29:-;9308:27;9338:21;9349:9;9338:10;:21::i;:::-;9308:51;;9369:27;9386:9;9369:16;:27::i;:::-;9425:4;9406:16;;:23;;-1:-1:-1;;9406:23:29;-1:-1:-1;;;9406:23:29;;;-1:-1:-1;;;;;9440:24:29;;;;;;;;;;;;9250:221;;:::o;1218:134:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;;;;;;1309:29:32;;;;;:23;:29;;;;;:36;;-1:-1:-1;;1309:36:32;1341:4;1309:36;;;1218:134::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;2123:313:34:-;2271:14;2308:121;2330:10;2354:4;;2308:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2372:3;;2308:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2389:10;2413:6;2308:8;:121::i;:::-;2301:128;2123:313;-1:-1:-1;;;;;;;2123:313:34:o;113:20:7:-;;;;:::o;3356:485:32:-;3411:7;3430:19;;:::i;:::-;3551:4;3539:11;3627:4;3621:5;3611:21;;3660:4;3652:6;3645;3786:4;3783:1;3776:4;3768:6;3764:3;3758:4;3746:11;3468:333;3827:6;3817:17;;;;;;;;;;;;;36:153:-1;66:2;58;;36:153;;182:3;176:5;164:6;;-1:-1;;139:3;;;;98:2;89:3;;;;114;36:153;;;274:1;267:3;263:2;259:3;254;250;246;315:4;311:3;305;299:5;295:3;356:4;350:3;344:5;340:3;377:2;365:6;;;-1:-1;;;3:399;;;;;-1:-1;3:399;;-1:-1;;3:399;;;;;;3810:24:32;;3356:485;;;;:::o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;689:115:18:-;738:66;689:115;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;497:393:15;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;9772:408:29:-;9888:16;10064;9852:25;9868:8;9852:15;:25::i;:::-;9841:36;;9907:21;9919:8;9907:11;:21::i;:::-;9946:11;;;;;;-1:-1:-1;;;;9946:11:29;;-1:-1:-1;;;;;9946:11:29;:16;;9938:25;;;;;;9998:19;9981:13;;;;-1:-1:-1;;;9981:13:29;;;;:36;;;;;;;;;9973:45;;;;;;10045:7;;;;10028:25;;-1:-1:-1;;;;;10045:7:29;10028:16;:25::i;:::-;10111:11;;;;10083:40;;-1:-1:-1;;;10111:11:29;;-1:-1:-1;;;;;10111:11:29;10083:27;:40::i;2049:174:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2142:17;2146:12;2142:3;:17::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;2211:5:32;2171:37;;;:23;:37;;;;;:45;;-1:-1:-1;;2171:45:32;;;2049:174::o;3834:146:29:-;3930:43;3937:7;3946:10;223:1:11;3963:9:29;3930:6;:43::i;1703:258:31:-;140:19:13;;:24;132:33;;;;;;-1:-1:-1;;;;;1773:13:31;;;;1765:22;;;;;;1797:13;:11;:13::i;:::-;1821:5;:24;;-1:-1:-1;;;;;;1821:24:31;;-1:-1:-1;;;;;1821:24:31;;;;;;-1:-1:-1;1856:17:31;:6;-1:-1:-1;1856:17:31;:::i;:::-;-1:-1:-1;1926:1:31;1909:18;:7;1926:1;1909:18;:::i;1592:148:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;1689:37:32;;;;:23;:37;;;;;:44;;-1:-1:-1;;1689:44:32;1729:4;1689:44;;;1592:148::o;6235:542:34:-;6418:28;6449:22;6460:10;6449;:22::i;:::-;6503:13;;6418:53;;-1:-1:-1;6489:10:34;-1:-1:-1;;;;;6489:27:34;;;6503:13;;;;;6489:27;6481:36;;;;;;6557:24;6535:18;;;;:46;;;;;;;;;6527:55;;;;;;6592:23;;-1:-1:-1;;;;;;6592:23:34;;-1:-1:-1;;;;;6592:23:34;;;;;;6625;:13;;;6641:7;;6625:23;:::i;:::-;-1:-1:-1;6658:21:34;:12;;;6673:6;;6658:21;:::i;:::-;-1:-1:-1;6689:35:34;;-1:-1:-1;;;;;6689:35:34;;;-1:-1:-1;;;6689:35:34;-1:-1:-1;;;;;;;;;;;6689:35:34;;;;;;;;;6735;;;6763:6;;6735:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6235:542;;;;;;;;:::o;12327:162:29:-;12393:6;12388:95;12409:7;:14;12405:1;:18;12388:95;;;12445:27;12461:7;12469:1;12461:10;;;;;;;;;;;;;;;;12445:15;:27::i;:::-;-1:-1:-1;12425:3:29;;12388:95;;86:21:7;;;-1:-1:-1;;;;;86:21:7;;:::o;11188:378:29:-;11323:6;;;11318:242;11339:14;:21;11335:1;:25;11318:242;;;-1:-1:-1;;;;;11407:14:29;11422:1;11407:14;:17;;;;;;;;;;;;;;;:27;11382:53;;-1:-1:-1;;;11463:14:29;11478:1;11463:17;;;;;;;;;;;;;;;;:23;;;;;;;;11449:37;;11501:48;11510:8;11520;11530:6;11538:10;11501:8;:48::i;:::-;11362:3;;;;;11318:242;;;11188:378;;;;;;:::o;3693:522:34:-;3870:25;3898:19;3909:7;3898:10;:19::i;:::-;3949:10;;3870:47;;-1:-1:-1;3935:10:34;-1:-1:-1;;;;;3935:24:34;;;3949:10;;;;;3935:24;3927:33;;;;;;3997:21;3978:15;;;;:40;;;;;;;;;3970:49;;;;;;4048:20;;-1:-1:-1;;;;;;4048:20:34;;-1:-1:-1;;;;;4048:20:34;;;;;;4078;:10;;;4091:7;;4078:20;:::i;:::-;-1:-1:-1;4108:18:34;:9;;;4120:6;;4108:18;:::i;:::-;-1:-1:-1;4136:32:34;;-1:-1:-1;;;;;4136:32:34;;;-1:-1:-1;;;4136:32:34;-1:-1:-1;;;;;;;;;;;4136:32:34;;;;;;;;;4179:29;;;4201:6;;4179:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3693:522;;;;;;;;:::o;8517:581:29:-;1548:5:31;;8597:16:29;;;;1526:10:31;-1:-1:-1;;;;;1526:28:31;;;1548:5;;;;;1526:28;1518:37;;;;;;8616:21:29;8628:8;8616:11;:21::i;:::-;8597:40;-1:-1:-1;8673:18:29;8656:13;;;;-1:-1:-1;;;8656:13:29;;;;:35;;;;;;;;;8648:44;;;;;;8828:7;;;;;8849:17;;8795:190;;;;-1:-1:-1;;;;;8828:7:29;;8849:17;8795:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8795:190:29;-1:-1:-1;;;;;8795:190:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;8910:11:29;;;;8935:7;;;;8880:1;;-1:-1:-1;8880:1:29;;-1:-1:-1;;;8910:11:29;;-1:-1:-1;;;;;8910:11:29;;-1:-1:-1;;;;;8935:7:29;8880:1;8795:19;:190::i;:::-;8774:211;;9010:28;9026:11;9010:15;:28::i;10803:574:34:-;10875:25;10910:12;10932:11;;:::i;:::-;10953:10;;:::i;:::-;10973:17;11000:20;11030:13;11053:14;11084:21;11108:19;11119:7;11108:10;:19::i;:::-;11149:11;;11200:6;;;;11193:13;;11149:11;;;;-1:-1:-1;11149:11:34;11177:6;;;;-1:-1:-1;;;;;11177:6:34;;-1:-1:-1;11149:11:34;;-1:-1:-1;11200:6:34;11149:11;11193:13;;;;;;-1:-1:-1;;11193:13:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11222:1;:5;;11216:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11250:12:34;;11288:15;;;;;10803:574;;;;-1:-1:-1;10803:574:34;;11216:11;;-1:-1:-1;;;11250:12:34;;;-1:-1:-1;;;;;11250:12:34;;;;-1:-1:-1;11288:15:34;;;-1:-1:-1;;;;;;11324:10:34;;;;;-1:-1:-1;11361:8:34;;;-1:-1:-1;;;;;11361:8:34;;-1:-1:-1;10803:574:34;-1:-1:-1;;10803:574:34:o;9153:531::-;9334:27;9364:21;9375:9;9364:10;:21::i;:::-;9418:12;;9334:51;;-1:-1:-1;9404:10:34;-1:-1:-1;;;;;9404:26:34;;;9418:12;;;;;9404:26;9396:35;;;;;;9470:23;9449:17;;;;:44;;;;;;;;;9441:53;;;;;;9505:22;;-1:-1:-1;;;;;;9505:22:34;;-1:-1:-1;;;;;9505:22:34;;;;;;9537;:12;;;9552:7;;9537:22;:::i;:::-;-1:-1:-1;9569:20:34;:11;;;9583:6;;9569:20;:::i;:::-;-1:-1:-1;9599:34:34;;-1:-1:-1;;;;;9599:34:34;;;-1:-1:-1;;;9599:34:34;-1:-1:-1;;;;;;;;;;;9599:34:34;;;;;;;;;9644:33;;;9670:6;;9644:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9153:531;;;;;;;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;2582:21:33:-;;;;;;-1:-1:-1;;;;;2582:21:33;;:::o;12300:161:34:-;12408:6;:13;12359:11;;-1:-1:-1;;;;;12398:23:34;;;12390:32;;;;;;12439:6;:15;;-1:-1:-1;;;;;12439:15:34;;;;;;;;;;;;;;;;;;;12432:22;;12300:161;;;:::o;4558::35:-;4663:7;:14;4618:6;;-1:-1:-1;;;;;4652:25:35;;;4644:34;;;;;;4695:7;:17;;-1:-1:-1;;;;;4695:17:35;;;;;;;;3617:842;3861:6;3883:15;3998:9;3911:15;3928:5;3935:15;3952:10;3964:9;3975:5;3982;3901:87;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;-1:-1;;;;;;;;;;;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;;3:109;-1:-1;;;;;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4010:20:35;;;;:11;:20;;;;;;3:109:-1;;-1:-1;;;;;;4010:20:35;;;;-1:-1:-1;4044:6:35;;4040:46;;;4073:2;4066:9;;;;4040:46;-1:-1:-1;4108:7:35;:14;;4133:20;;;;:11;:20;;;;;:25;;-1:-1:-1;;4133:25:35;-1:-1:-1;;;;;4133:25:35;;;;;4168:265;;4108:14;;:7;-1:-1:-1;4168:265:35;;;4108:7;4168:265;;:::i;:::-;;;;;;;;;;;;4194:229;;;;;;;;;4218:1;4194:229;;;;4237:15;4194:229;;;;4270:5;-1:-1:-1;;;;;4194:229:35;;;;;4293:15;-1:-1:-1;;;;;4194:229:35;;;;;4326:10;-1:-1:-1;;;;;4194:229:35;;;;;4354:9;-1:-1:-1;;;;;4194:229:35;;;;;4381:5;-1:-1:-1;;;;;4194:229:35;;;;;4404:5;4194:229;;;;;;;;;;4168:265;;-1:-1:-1;4168:265:35;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;4168:265:35;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4168:265:35;;;;;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4168:265:35;;;;;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4168:265:35;;;;;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;-1:-1:-1;;4168:265:35;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4168:265:35;-1:-1:-1;;;4168:265:35;;;;;;;;;;;;;;;;;4450:2;4443:9;;3617:842;;;;;;;;;;;;:::o;16445:573:31:-;16523:11;16698:20;16748:18;16537:37;16550:4;16556;16562:2;16566:7;16537:12;:37::i;:::-;16523:51;;16596:2;-1:-1:-1;;;;;16588:10:31;:4;-1:-1:-1;;;;;16588:10:31;;16584:47;;;16614:7;;16584:47;16644:11;;16640:48;;;16671:7;;16640:48;16721:17;16733:4;16721:11;:17::i;:::-;16698:40;;16769:15;16781:2;16769:11;:15::i;:::-;16803:12;;16748:36;;-1:-1:-1;16803:22:31;;;;16795:31;;;;;;16836:22;;;;;;;16868:20;;;;;;;16906;;;;16898:29;;;;;;16953:2;-1:-1:-1;;;;;16938:26:31;16947:4;-1:-1:-1;;;;;16938:26:31;;16957:6;16938:26;;;;;;;;;;;;;;16974:37;16987:5;16994:4;17000:2;17004:6;16974:12;:37::i;5303:190::-;5369:21;5393:19;5404:7;5393:10;:19::i;:::-;5452:8;;;;5369:43;;-1:-1:-1;5430:10:31;-1:-1:-1;;;;;5430:31:31;;;5452:8;;;;;5430:31;;:55;;-1:-1:-1;5479:6:31;;5465:10;-1:-1:-1;;;;;5465:20:31;;;5479:6;;;;;5465:20;5430:55;5422:64;;;;;;;5499:4935;5751:16;;;;;;-1:-1:-1;;;;;5654:14:31;;;;;5646:23;;;;;;5715:25;5731:8;5715:15;:25::i;:::-;5704:36;;5770:21;5782:8;5770:11;:21::i;:::-;5751:40;;5832:22;5843:10;5832;:22::i;:::-;5801:53;-1:-1:-1;5890:19:31;5873:13;;;;-1:-1:-1;;;5873:13:31;;;;:36;;;;;;;;;5865:45;;;;;;5977:7;;;;-1:-1:-1;;;;;5977:19:31;;;:7;;:19;5973:2092;;;6039:21;6017:18;;;;:43;;;;;;;;;6013:1875;;;6080:55;6106:8;6116:6;6124:10;6080:25;:55::i;:::-;6153:7;;6013:1875;6206:23;6184:18;;;;:45;;;;;;;;;6180:1708;;;6249:57;6277:8;6287:6;6295:10;6249:27;:57::i;6180:1708::-;6377:24;6355:18;;;;:46;;;;;;;;;6351:1537;;;6442:30;6458:1;6442:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6442:30:31;-1:-1:-1;;;;;6442:30:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;6442:30:31;;;-1:-1:-1;;6442:30:31;;;;;-1:-1:-1;;;;;6442:30:31;;;;;;;-1:-1:-1;;;6442:30:31;;;;;;;;-1:-1:-1;;;6442:30:31;;;;;;;;-1:-1:-1;;;6442:30:31;;;;;;;;;;;;-1:-1:-1;;;;;6442:30:31;;;;;;;;;;;-1:-1:-1;;;6442:30:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;6461:10:31;6442:15;:30::i;:::-;6494:17;;;;-1:-1:-1;;;;;6422:50:31;;;;-1:-1:-1;6514:1:31;-1:-1:-1;;;6494:17:31;;;;;;:21;:49;;;;-1:-1:-1;;;;;;6519:24:31;;;6494:49;6490:971;;;6858:1;6831:17;;:24;-1:-1:-1;;6831:28:31;6815:44;;6811:507;;;6954:7;;;;;6991:17;;6905:293;;;;-1:-1:-1;;;;;6954:7:31;;6991:17;6905:293;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6905:293:31;-1:-1:-1;;;;;6905:293:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;7100:11:31;;;;7141:7;;;;7038:1;;-1:-1:-1;7038:1:31;;-1:-1:-1;;;7100:11:31;;-1:-1:-1;;;;;7100:11:31;;-1:-1:-1;;;;;7141:7:31;7038:1;6905:19;:293::i;:::-;6887:311;;7224:39;7236:8;7246;7256:6;7224:11;:39::i;6811:507::-;7340:74;7352:8;7362:6;7412:1;7397:12;7370:1;:17;;:24;;;;:39;:43;7340:11;:74::i;:::-;;7436:7;;6490:971;7653:133;7686:8;7716:6;7744:1;:17;;:24;;;;7653:11;:133::i;:::-;7642:144;;7804:45;7820:8;7830:6;7838:10;7804:15;:45::i;6351:1537::-;8041:13;;8132:28;8148:1;8132:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8132:28:31;-1:-1:-1;;;;;8132:28:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8132:28:31;;;-1:-1:-1;;8132:28:31;;;;;-1:-1:-1;;;;;8132:28:31;;;;;;;-1:-1:-1;;;8132:28:31;;;;;;;;-1:-1:-1;;;8132:28:31;;;;;;;;-1:-1:-1;;;8132:28:31;;;;;;;;;;;;-1:-1:-1;;;;;8132:28:31;;;;;;;;;;;-1:-1:-1;;;8132:28:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;8151:8:31;8132:15;:28::i;:::-;-1:-1:-1;;;;;8114:46:31;;;;-1:-1:-1;8174:22:31;;8170:2185;;8288:21;8266:18;;;;:43;;;;;;;;;8262:274;;;8402:7;;;;-1:-1:-1;;;;;8402:21:31;;;:7;;:21;8395:29;;;;8442:55;8454:8;8464:6;8472:1;:17;;:24;;;;8442:11;:55::i;8262:274::-;8628:24;8606:18;;;;:46;;;;;;;;;8602:1235;;;8692:30;8708:1;8692:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8692:30:31;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8692:30:31;;;-1:-1:-1;;;8692:30:31;;;;;-1:-1:-1;;;;;8692:30:31;;;;;;;-1:-1:-1;;;8692:30:31;;;;;;;;-1:-1:-1;;;8692:30:31;;;;;;;;-1:-1:-1;;;8692:30:31;;;;;;;;;;;;-1:-1:-1;;;;;8692:30:31;;;;;;;;;;;-1:-1:-1;;;8692:30:31;;;;;;;;;;;;-1:-1:-1;;;;;8672:50:31;;;;-1:-1:-1;9030:24:31;;;:53;;;9073:10;9058:12;:25;9030:53;9026:372;;;9118:166;9155:8;9189:6;9261:1;9248:10;9221:1;:17;;:24;;;;:37;:41;9118:11;:166::i;8602:1235::-;10033:23;10011:18;;;;:45;;;;;;;;;10007:338;;;10087:150;10120:8;10150:6;10218:1;10205:10;10178:1;:17;;:24;;;;:37;:41;10087:11;:150::i;:::-;10076:161;;10255:51;10277:8;10287:6;10295:10;10255:21;:51::i;10364:13::-;5499:4935;;;;;;;;;;:::o;24402:76::-;24468:3;24402:76;:::o;18001:583::-;18091:6;;;-1:-1:-1;;;;;18117:13:31;;;18113:52;;;18153:1;18146:8;;;;18113:52;18194:21;18206:8;18194:11;:21::i;:::-;18264:7;;;;18175:40;;-1:-1:-1;18253:19:31;;-1:-1:-1;;;;;18264:7:31;18253:10;:19::i;:::-;18225:47;-1:-1:-1;18314:21:31;18295:15;;;;:40;;;;;;;;;18291:86;;;18358:8;18351:15;;;;18291:86;18413:23;18394:15;;;;:42;;;;;;;;;18387:50;;;;18470:7;;;;18452:26;;-1:-1:-1;;;;;18470:7:31;18452:17;:26::i;:::-;18451:27;18447:73;;;18501:8;18494:15;;;;18447:73;18565:11;;;;18537:40;;-1:-1:-1;;;18565:11:31;;-1:-1:-1;;;;;18565:11:31;18537:27;:40::i;:::-;18530:47;;18001:583;;;;;;:::o;355:101:2:-;403:11;;:::i;:::-;433:16;445:2;-1:-1:-1;;;;;437:11:2;433:3;:16::i;:::-;426:23;355:101;-1:-1:-1;;355:101:2:o;12677:316:34:-;12740:6;;12780:23;12765:1;:11;:38;;;;;;;;;12758:46;;;;12819:1;:15;;;-1:-1:-1;;;;;12819:20:34;;12815:60;;;12862:1;12855:9;;;;12815:60;12914:27;12925:1;:15;;;12914:10;:27::i;:::-;12885:56;;12958:24;12975:6;12958:24;;;;;;;;;;;;;;;;;;;;;;;;;12985:1;12958:28;;12677:316;-1:-1:-1;;;12677:316:34:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;-1:-1:-1;;289:1:14;244:11;;282:8;;53:244::o;116:101:2:-;164:11;;:::i;:::-;194:16;206:2;194:3;:16::i;576:96:13:-;140:19;;:24;132:33;;;;;;649:16;:14;:16::i;:::-;627:19;:38;576:96::o;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1195:37:16;;-1:-1:-1;;1088:200:16;;;:::o;23635:649:31:-;23826:6;23911:145;23943:6;23963:10;;24011:8;23826:6;23911:18;:145::i;:::-;23895:161;;24134:143;24166:6;24186:8;24208:10;24232:8;24254:13;24134:18;:143::i;:::-;24118:159;23635:649;-1:-1:-1;;;;;23635:649:31:o;12268:444::-;12406:16;12457:15;12425:21;12437:8;12425:11;:21::i;:::-;12406:40;;12475:181;12508:10;12545:1;12532:15;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;12606:7:31;;;;12561:1;;;;;;-1:-1:-1;;;;;12606:7:31;12561:1;12475:19;:181::i;:::-;12457:199;;12666:39;12678:8;12688;12698:6;12666:11;:39::i;10869:989::-;11009:16;11290;11509:15;11028:21;11040:8;11028:11;:21::i;:::-;11009:40;;1143:2:34;11186:18:31;11202:1;11186:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11186:18:31;-1:-1:-1;;;;;11186:18:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;11186:18:31;;;-1:-1:-1;;11186:18:31;;;;;-1:-1:-1;;;;;11186:18:31;;;;;;;-1:-1:-1;;;11186:18:31;;;;;;;;-1:-1:-1;;;11186:18:31;;;;;;;;-1:-1:-1;;;11186:18:31;;;;;;;;;;;;-1:-1:-1;;;;;11186:18:31;;;;;;;;;;;-1:-1:-1;;;11186:18:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11186:15:31;:18::i;:::-;:43;11178:52;;;;;;11249:29;11267:10;11249:17;:29::i;:::-;11248:30;11240:39;;;;;;11342:7;;;;;11363:17;;11309:190;;;;-1:-1:-1;;;;;11342:7:31;;11363:17;11309:190;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;11309:190:31;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;11424:11:31;;;;11449:7;;;;11394:1;;-1:-1:-1;11394:1:31;;-1:-1:-1;;;;11424:11:31;;;-1:-1:-1;;;;;11424:11:31;;-1:-1:-1;;;;;11449:7:31;11394:1;11309:19;:190::i;:::-;11290:209;;11527:275;11560:10;11638:1;11625:15;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;11752:7:31;;;;11699:1;;;;11729:9;;-1:-1:-1;;;;;11752:7:31;11699:1;11527:19;:275::i;:::-;11509:293;;11812:39;11824:8;11834;11844:6;11812:11;:39::i;5224:290:35:-;5300:6;;5318:165;5339:1;:17;;;:24;5335:1;:28;5318:165;;;5412:10;-1:-1:-1;;;;;5388:34:35;:1;:17;;;5406:1;5388:20;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5388:34:35;;5384:89;;;5456:1;5442:16;;;;5384:89;5365:3;;5318:165;;;-1:-1:-1;;;;;5492:15:35;;5224:290;;;;;;:::o;14364:692:31:-;14471:15;14502:16;14552:34;;:::i;:::-;14669:6;14521:21;14533:8;14521:11;:21::i;:::-;14615:17;;;:24;14502:40;;-1:-1:-1;14615:28:31;;;14589:64;;;;;;;;;;;;;;;;;;;;;;;;14552:101;;14678:1;14669:10;;14664:125;14685:17;;;:24;:28;;;14681:32;;14664:125;;;14758:17;;;:20;;14776:1;;14758:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;14758:20:31;14734:18;14753:1;14734:21;;;;;;;;-1:-1:-1;;;;;14734:44:31;;;:21;;;;;;;;;;:44;14715:3;;14664:125;;;14842:7;;;;14950;;;;14809:191;;-1:-1:-1;;;;;14842:7:31;;;;14863:18;;14842:7;;;;-1:-1:-1;;;14925:11:31;;;;;-1:-1:-1;;;;;14950:7:31;14842;14809:19;:191::i;:::-;14798:202;;15010:39;15022:8;15032;15042:6;15010:11;:39::i;:::-;14364:692;;;;;;;;:::o;13070:871::-;13198:16;13308:34;;:::i;:::-;13424:6;13676:15;13217:21;13229:8;13217:11;:21::i;:::-;13257:17;;;:24;13198:40;;-1:-1:-1;1085:2:35;13257:40:31;;13249:49;;;;;;13371:17;;;;:24;:28;13345:64;;;;;;;;;;;;;;;;;;;;;;;;13308:101;;13433:1;13424:10;;13419:121;13440:17;;;:24;13436:28;;13419:121;;;13509:17;;;:20;;13527:1;;13509:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;13509:20:31;13485:18;13504:1;13485:21;;;;;;;;-1:-1:-1;;;;;13485:44:31;;;:21;;;;;;;;;;:44;13466:3;;;;;13419:121;;;13627:17;;;:24;13655:10;;13608:18;;;:44;;;;;;;-1:-1:-1;;;;;13608:57:31;;;:44;;;;;;;;:57;13727:7;;;;13835;;;;13694:191;;13727:7;;;;13748:18;;13727:7;;;;-1:-1:-1;;;13810:11:31;;;;-1:-1:-1;;;;;13835:7:31;13727;13694:19;:191::i;:::-;13676:209;;13895:39;13907:8;13917;13927:6;13895:11;:39::i;15482:607::-;15616:16;15779:15;15635:21;15647:8;15635:11;:21::i;:::-;15616:40;;1143:2:34;15675:18:31;15691:1;15675:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15675:18:31;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;15675:18:31;;;-1:-1:-1;;;15675:18:31;;;;;-1:-1:-1;;;;;15675:18:31;;;;;;;-1:-1:-1;;;15675:18:31;;;;;;;;-1:-1:-1;;;15675:18:31;;;;;;;;-1:-1:-1;;;15675:18:31;;;;;;;;;;;;-1:-1:-1;;;;;15675:18:31;;;;;;;;;;;-1:-1:-1;;;15675:18:31;;;;;;;;;;;;:43;15667:52;;;;;;15738:29;15756:10;15738:17;:29::i;:::-;15737:30;15729:39;;;;;;15830:7;;;;;15851:17;;15797:236;;;;-1:-1:-1;;;;;15830:7:31;;15851:17;15797:236;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15797:236:31;-1:-1:-1;;;;;15797:236:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;15882:10;15926:17;15941:1;15926:17;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;15926:17:31;-1:-1:-1;;;;;15926:17:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;15926:17:31;;;-1:-1:-1;;15926:17:31;;;;;-1:-1:-1;;;;;15926:17:31;;;;;;;-1:-1:-1;;;15926:17:31;;;;;;;;-1:-1:-1;;;15926:17:31;;;;;;;;-1:-1:-1;;;15926:17:31;;;;;;;;;;;;-1:-1:-1;;;;;15926:17:31;;;;;;;;;;;-1:-1:-1;;;15926:17:31;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;15926:14:31;:17::i;:::-;-1:-1:-1;;;;;15913:30:31;:10;:8;:10::i;:::-;15958:11;;;;15983:7;;;;15913:30;;;;;-1:-1:-1;;;15958:11:31;;-1:-1:-1;;;;;15958:11:31;;-1:-1:-1;;;;;15983:7:31;;15797:19;:236::i;1359:117:2:-;1407:11;;:::i;:::-;1448:1;1434:16;;;;;;;;;;;;;;;;;;;;;;;;1430:20;;1467:2;1460:1;1462;1460:4;;;;;;;;;;;;;;;;:9;1359:117;;-1:-1:-1;1359:117:2:o;856:94:13:-;931:12;856:94;:::o;21548:1549:31:-;21719:18;21856:13;21946:16;22298:8;21884:10;-1:-1:-1;;;;;21872:22:31;:8;-1:-1:-1;;;;;21872:22:31;;:32;;21901:3;21872:32;;;21897:1;21872:32;21856:48;;;;21930:6;21914:22;;21965:21;21977:8;21965:11;:21::i;:::-;22105:7;;;;22192;;;;21946:40;;-1:-1:-1;22060:176:31;;22085:6;;-1:-1:-1;;;;;22105:7:31;;22126:10;;22150:8;;22172:6;;-1:-1:-1;;;;;22192:7:31;22213:13;22060:11;:176::i;:::-;22044:192;;22309:1;22298:12;;22293:324;22316:17;;;:24;-1:-1:-1;;;;;22312:28:31;;;22293:324;;;22377:229;22406:6;22430:1;:17;;22448:1;-1:-1:-1;;;;;22430:20:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22430:20:31;22468:10;22496:8;22531:1;22522:6;:10;22535:1;22522:14;22554:1;:7;;;;;;;;;;-1:-1:-1;;;;;22554:7:31;22579:13;22377:11;:229::i;:::-;22361:245;-1:-1:-1;22342:3:31;;22293:324;;;22803:17;;;;22823:1;-1:-1:-1;;;22803:17:31;;;-1:-1:-1;;;;;22803:17:31;:21;22799:292;;;22909:17;;;;23028:7;;;;22856:224;;22885:6;;-1:-1:-1;;;22909:17:31;;;-1:-1:-1;;;;;22909:17:31;;22944:10;;22972:8;;23007:3;22998:12;;;-1:-1:-1;;;;;23028:7:31;23053:13;22856:11;:224::i;:::-;22840:240;;22799:292;21548:1549;;;;;;;;;;:::o;5759:249:35:-;5816:4;5896:19;5836:1;:11;;;-1:-1:-1;;;;;5836:16:35;;5832:55;;;5875:1;5868:8;;;;5832:55;5918:24;5930:1;:11;;;5918;:24::i;:::-;5896:46;;5959:21;5975:4;5959:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5959:21:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5959:21:35;;;-1:-1:-1;;;5959:21:35;;;;;-1:-1:-1;;;;;5959:21:35;;;;;;;-1:-1:-1;;;5959:21:35;;;;;;;;-1:-1:-1;;;5959:21:35;;;;;;;;-1:-1:-1;;;5959:21:35;;;;;;;;;;;;-1:-1:-1;;;;;5959:21:35;;;;;;;;;;;-1:-1:-1;;;5959:21:35;;;;;;;;;;;17271:513:31;17327:17;17356:21;17487:6;17380:19;17391:1;:7;;;17380:10;:19::i;:::-;17422:12;;-1:-1:-1;;;17422:12:31;;-1:-1:-1;;;;;17422:12:31;;-1:-1:-1;17422:12:31;-1:-1:-1;17422:12:31;;-1:-1:-1;17482:296:31;17503:1;:17;;;:24;17499:1;:28;17482:296;;;17552:32;17563:1;:17;;;17581:1;17563:20;;;;;;;;;;;;;;;;17552:10;:32::i;:::-;17683:12;;17548:36;;-1:-1:-1;;;;;;17683:25:31;;;-1:-1:-1;;;17683:12:31;;;;:25;17679:89;;;17741:12;;-1:-1:-1;;;17741:12:31;;-1:-1:-1;;;;;17741:12:31;;-1:-1:-1;17679:89:31;17529:3;;17482:296;;19555:1287;19840:6;19765:18;;19884:19;19895:7;19884:10;:19::i;:::-;20007:12;;;;;;-1:-1:-1;20007:12:31;;;-1:-1:-1;;;;;20007:12:31;19999:26;;;;:47;;;20045:1;20029:13;:17;19999:47;19995:841;;;20199:6;20195:631;;;20237:12;;;;;;;-1:-1:-1;;;;;20237:12:31;:27;20286:7;20315:10;20347:8;20377:7;20406:5;20433:6;20237:220;;;;;;;;-1:-1:-1;;;20237:220:31;;;;;;-1:-1:-1;;;;;20237:220:31;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20237:220:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;20483:26:31;;;;20475:35;;;;;;20544:9;20528:25;;20195:631;;;20592:12;;;;;;;-1:-1:-1;;;;;20592:12:31;:26;20640:7;20669:10;20701:8;20731:7;20760:5;20787:6;20592:219;;-1:-1:-1;;;20592:219:31;;;;;;-1:-1:-1;;;;;20592:219:31;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20592:219:31;;;;;;;;;;;;;;;;-1:-1:-1;20592:219:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19555:1287;;;;;;;;;;;:::o;1153:11338:29:-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1153:11338:29;;;-1:-1:-1;1153:11338:29;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1153:11338:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1153:11338:29;;;;;-1:-1:-1;;;;;1153:11338:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1153:11338:29;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1153:11338:29;;;-1:-1:-1;1153:11338:29;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1153:11338:29;;;;;;;;;;-1:-1:-1;;1153:11338:29;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1153:11338:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "4242400",
              "executionCost": "25100",
              "totalCost": "4267500"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "280",
              "ETH()": "1040",
              "EVMSCRIPT_REGISTRY_APP()": "1006",
              "EVMSCRIPT_REGISTRY_APP_ID()": "720",
              "PLUGIN_MANAGER_ROLE()": "infinite",
              "addDelegate(string,string,uint64,address)": "infinite",
              "addGiver(address,string,string,uint64,address)": "infinite",
              "addGiver(string,string,uint64,address)": "infinite",
              "addGiverAndDonate(uint64)": "infinite",
              "addGiverAndDonate(uint64,address)": "infinite",
              "addGiverAndDonate(uint64,address,address,uint256)": "infinite",
              "addGiverAndDonate(uint64,address,uint256)": "infinite",
              "addProject(string,string,address,uint64,uint64,address)": "infinite",
              "addValidPluginContract(bytes32)": "infinite",
              "addValidPluginContracts(bytes32[])": "infinite",
              "addValidPluginInstance(address)": "infinite",
              "allowRecoverability(address)": "963",
              "appId()": "1118",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "cancelPayment(uint64,uint256)": "infinite",
              "cancelPledge(uint64,uint256)": "infinite",
              "cancelProject(uint64)": "infinite",
              "confirmPayment(uint64,uint256)": "infinite",
              "donate(uint64,uint64)": "infinite",
              "donate(uint64,uint64,address,uint256)": "infinite",
              "getCodeHash(address)": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "1184",
              "getPledge(uint64)": "infinite",
              "getPledgeAdmin(uint64)": "infinite",
              "getPledgeDelegate(uint64,uint64)": "infinite",
              "getRecoveryVault()": "infinite",
              "initialize(address)": "infinite",
              "isProjectCanceled(uint64)": "infinite",
              "isValidPlugin(address)": "infinite",
              "kernel()": "1579",
              "mNormalizePledge(uint64[])": "infinite",
              "mTransfer(uint64,uint256[],uint64)": "infinite",
              "mWithdraw(uint256[])": "infinite",
              "normalizePledge(uint64)": "infinite",
              "numberOfPledgeAdmins()": "885",
              "numberOfPledges()": "600",
              "removeValidPluginContract(bytes32)": "infinite",
              "removeValidPluginInstance(address)": "infinite",
              "transfer(uint64,uint64,uint256,uint64)": "infinite",
              "transferToVault(address)": "infinite",
              "updateDelegate(uint64,address,string,string,uint64)": "infinite",
              "updateGiver(uint64,address,string,string,uint64)": "infinite",
              "updateProject(uint64,address,string,string,uint64)": "infinite",
              "useWhitelist(bool)": "infinite",
              "vault()": "1744",
              "whitelistDisabled()": "514",
              "withdraw(uint64,uint256)": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "PLUGIN_MANAGER_ROLE()": "24fea3b0",
            "addDelegate(string,string,uint64,address)": "52dc7dcc",
            "addGiver(address,string,string,uint64,address)": "6e802c6a",
            "addGiver(string,string,uint64,address)": "7f61fa93",
            "addGiverAndDonate(uint64)": "1d376026",
            "addGiverAndDonate(uint64,address)": "08a4f7d1",
            "addGiverAndDonate(uint64,address,address,uint256)": "007611c6",
            "addGiverAndDonate(uint64,address,uint256)": "6ba3cc87",
            "addProject(string,string,address,uint64,uint64,address)": "72116e92",
            "addValidPluginContract(bytes32)": "c8ae070f",
            "addValidPluginContracts(bytes32[])": "32ce8ebc",
            "addValidPluginInstance(address)": "79f4542e",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "cancelPayment(uint64,uint256)": "e9c211e2",
            "cancelPledge(uint64,uint256)": "af9f4563",
            "cancelProject(uint64)": "796d5654",
            "confirmPayment(uint64,uint256)": "2ee88808",
            "donate(uint64,uint64)": "bde60ac9",
            "donate(uint64,uint64,address,uint256)": "4c4316c7",
            "getCodeHash(address)": "81ea4408",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getPledge(uint64)": "3f657a46",
            "getPledgeAdmin(uint64)": "eba8ba06",
            "getPledgeDelegate(uint64,uint64)": "2f6b64ca",
            "getRecoveryVault()": "32f0a3b5",
            "initialize(address)": "c4d66de8",
            "isProjectCanceled(uint64)": "2101a6ad",
            "isValidPlugin(address)": "4eafbcd5",
            "kernel()": "d4aae0c4",
            "mNormalizePledge(uint64[])": "ce17273c",
            "mTransfer(uint64,uint256[],uint64)": "d639cd73",
            "mWithdraw(uint256[])": "57adafb6",
            "normalizePledge(uint64)": "50f8a803",
            "numberOfPledgeAdmins()": "5503d9ba",
            "numberOfPledges()": "2a8ec8cc",
            "removeValidPluginContract(bytes32)": "b12b5f76",
            "removeValidPluginInstance(address)": "6293c702",
            "transfer(uint64,uint64,uint256,uint64)": "47c5ef43",
            "transferToVault(address)": "9d4941d8",
            "updateDelegate(uint64,address,string,string,uint64)": "cc19ecf7",
            "updateGiver(uint64,address,string,string,uint64)": "db7c2314",
            "updateProject(uint64,address,string,string,uint64)": "f6b24b1c",
            "useWhitelist(bool)": "38740291",
            "vault()": "fbfa77cf",
            "whitelistDisabled()": "1c8e8568",
            "withdraw(uint64,uint256)": "43387983"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"idReceiver\",\"type\":\"uint64\"},{\"name\":\"donorAddress\",\"type\":\"address\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addGiverAndDonate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idReceiver\",\"type\":\"uint64\"},{\"name\":\"donorAddress\",\"type\":\"address\"}],\"name\":\"addGiverAndDonate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idReceiver\",\"type\":\"uint64\"}],\"name\":\"addGiverAndDonate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"isProjectCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLUGIN_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPledges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"confirmPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"idxDelegate\",\"type\":\"uint64\"}],\"name\":\"getPledgeDelegate\",\"outputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addValidPluginContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"useWhitelist\",\"type\":\"bool\"}],\"name\":\"useWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"}],\"name\":\"getPledge\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"uint64\"},{\"name\":\"nDelegates\",\"type\":\"uint64\"},{\"name\":\"intendedProject\",\"type\":\"uint64\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"oldPledge\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"pledgeState\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idSender\",\"type\":\"uint64\"},{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"idReceiver\",\"type\":\"uint64\"}],\"name\":\"transfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"},{\"name\":\"idReceiver\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidPlugin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"}],\"name\":\"normalizePledge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPledgeAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledgesAmounts\",\"type\":\"uint256[]\"}],\"name\":\"mWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idReceiver\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addGiverAndDonate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addGiver\",\"outputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"projectAdmin\",\"type\":\"address\"},{\"name\":\"parentProject\",\"type\":\"uint64\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"}],\"name\":\"cancelProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addGiver\",\"outputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCodeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelPledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"removeValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"},{\"name\":\"idReceiver\",\"type\":\"uint64\"}],\"name\":\"donate\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"addValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"pledges\",\"type\":\"uint64[]\"}],\"name\":\"mNormalizePledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idSender\",\"type\":\"uint64\"},{\"name\":\"pledgesAmounts\",\"type\":\"uint256[]\"},{\"name\":\"idReceiver\",\"type\":\"uint64\"}],\"name\":\"mTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateGiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"cancelPayment\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idAdmin\",\"type\":\"uint64\"}],\"name\":\"getPledgeAdmin\",\"outputs\":[{\"name\":\"adminType\",\"type\":\"uint8\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"parentProject\",\"type\":\"uint64\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint256\"}],\"name\":\"CancelProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idGiver\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"GiverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idGiver\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"GiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DelegateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProjectUpdated\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addDelegate(string,string,uint64,address)\":{\"params\":{\"commitTime\":\"Sets the length of time in seconds that this delegate  can be vetoed. Whenever this delegate is in a delegate chain the time  allowed to veto any event must be greater than or equal to this time.\",\"name\":\"The name used to identify the Delegate\",\"plugin\":\"This is Delegate's liquid pledge plugin allowing for  extended functionality\",\"url\":\"The link to the Delegate's profile often an IPFS hash\"},\"return\":\"idxDelegate The id number used to reference this Delegate within  the PLEDGE_ADMIN array\"},\"addGiver(string,string,uint64,address)\":{\"params\":{\"commitTime\":\"The length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project\",\"name\":\"The name used to identify the Giver\",\"plugin\":\"This is Giver's liquid pledge plugin allowing for  extended functionality\",\"url\":\"The link to the Giver's profile often an IPFS hash\"},\"return\":\"idGiver The id number used to reference this Admin\"},\"addGiverAndDonate(uint64)\":{\"params\":{\"idReceiver\":\"The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project    \"}},\"addGiverAndDonate(uint64,address)\":{\"params\":{\"donorAddress\":\"The address of the \\\"giver\\\" of this donation    \",\"idReceiver\":\"The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project\"}},\"addGiverAndDonate(uint64,address,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens being donated\",\"donorAddress\":\"The address of the \\\"giver\\\" of this donation\",\"idReceiver\":\"The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project\",\"token\":\"The address of the token being donated.\"}},\"addGiverAndDonate(uint64,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens being donated\",\"idReceiver\":\"The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project\",\"token\":\"The address of the token being donated.\"}},\"addProject(string,string,address,uint64,uint64,address)\":{\"params\":{\"commitTime\":\"Sets the length of time in seconds the Project has to   veto when the Project delegates to another Delegate and they pledge   those funds to a project\",\"name\":\"The name used to identify the Project\",\"parentProject\":\"The Admin id number for the parent project or 0 if  there is no parentProject\",\"plugin\":\"This is Project's liquid pledge plugin allowing for  extended functionality\",\"projectAdmin\":\"The address for the trusted project manager\",\"url\":\"The link to the Project's profile often an IPFS hash\"},\"return\":\"idProject The id number used to reference this Admin\"},\"addValidPluginContract(bytes32)\":{\"details\":\"add a contract to the plugin whitelist.\"},\"addValidPluginInstance(address)\":{\"details\":\"adds an instance of a plugin to the whitelist\"},\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"cancelPayment(uint64,uint256)\":{\"params\":{\"amount\":\"Quantity of ether (in wei) to be canceled\",\"idPledge\":\"Id of the pledge that's withdraw is to be canceled\"}},\"cancelPledge(uint64,uint256)\":{\"params\":{\"amount\":\"Quantity of ether (in wei) to be transfered to the   `oldPledge`\",\"idPledge\":\"Id of the pledge that is to be canceled\"}},\"cancelProject(uint64)\":{\"params\":{\"idProject\":\"Id of the project that is to be canceled\"}},\"confirmPayment(uint64,uint256)\":{\"params\":{\"amount\":\"Quantity of ether (in wei) to be withdrawn\",\"idPledge\":\"Id of the pledge that is to be withdrawn\"}},\"donate(uint64,uint64)\":{\"params\":{\"idGiver\":\"The id of the Giver donating\",\"idReceiver\":\"The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project\"}},\"donate(uint64,uint64,address,uint256)\":{\"params\":{\"amount\":\"The amount of tokens being donated\",\"idGiver\":\"The id of the Giver donating\",\"idReceiver\":\"The Admin receiving the donation; can be any Admin:  the Giver themselves, another Giver, a Delegate or a Project\",\"token\":\"The address of the token being donated.\"}},\"getCodeHash(address)\":{\"return\":\"the hash of the code for the given address\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getPledge(uint64)\":{\"params\":{\"idPledge\":\"the id number of the pledge being queried\"},\"return\":\"the amount, owner, the number of delegates (but not the actual  delegates, the intendedProject (if any), the current commit time and  the previous pledge this pledge was derived from\"},\"getPledgeAdmin(uint64)\":{\"return\":\"addr Account or contract address for adminname Name of the pledgeAdminurl The link to the Project's profile often an IPFS hashcommitTime The length of time in seconds the Admin has to veto   when the Admin delegates to a Delegate and that Delegate pledges those   funds to a projectparentProject The Admin id number for the parent project or 0  if there is no parentProjectcanceled 0 for Delegates & Givers, true if a Project has been  canceledplugin This is Project's liquidPledging plugin allowing for  extended functionality\"},\"getPledgeDelegate(uint64,uint64)\":{\"params\":{\"idPledge\":\"The id number representing the pledge being queried\",\"idxDelegate\":\"The index number for the delegate in this Pledge \"}},\"initialize(address)\":{\"params\":{\"_vault\":\"The vault where the ETH backing the pledges is stored\"}},\"isProjectCanceled(uint64)\":{\"params\":{\"projectId\":\"The Admin id number used to specify the Project\"},\"return\":\"True if the Project has been canceled\"},\"mNormalizePledge(uint64[])\":{\"params\":{\"pledges\":\"An array of pledge IDs\"}},\"mTransfer(uint64,uint256[],uint64)\":{\"params\":{\"idReceiver\":\"Destination of the `pledesAmounts`, can be a Giver or   Project sending to a Giver, a Delegate or a Project; a Delegate sending  to another Delegate, or a Delegate pre-commiting it to a Project \",\"idSender\":\"Id of the Admin that is transferring the amounts from  all the Pledges; this admin must have permissions to move the value\",\"pledgesAmounts\":\"An array of Pledge amounts and the idPledges with   which the amounts are associated; these are extrapolated using the D64  bitmask\"}},\"mWithdraw(uint256[])\":{\"params\":{\"pledgesAmounts\":\"An array of Pledge amounts and the idPledges with   which the amounts are associated; these are extrapolated using the D64  bitmask\"}},\"normalizePledge(uint64)\":{\"params\":{\"idPledge\":\"This is the id of the pledge that will be normalized\"},\"return\":\"The normalized Pledge!\"},\"numberOfPledgeAdmins()\":{\"return\":\"The total number of admins (Givers, Delegates and Projects) .\"},\"numberOfPledges()\":{\"return\":\"The total number of Pledges in the system\"},\"removeValidPluginContract(bytes32)\":{\"details\":\"removes a contract from the plugin whitelist\"},\"removeValidPluginInstance(address)\":{\"details\":\"removes an instance of a plugin to the whitelist\"},\"transfer(uint64,uint64,uint256,uint64)\":{\"params\":{\"amount\":\"Quantity of ETH (in wei) that this pledge is transferring   the authority to withdraw from the vault\",\"idPledge\":\"Id of the pledge that's moving the value\",\"idReceiver\":\"Destination of the `amount`, can be a Giver/Project sending  to a Giver, a Delegate or a Project; a Delegate sending to another  Delegate, or a Delegate pre-commiting it to a Project \",\"idSender\":\"Id of the Admin that is transferring the amount from  Pledge to Pledge; this admin must have permissions to move the value\"}},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"updateDelegate(uint64,address,string,string,uint64)\":{\"params\":{\"idDelegate\":\"The Admin id number used to specify the Delegate\",\"newAddr\":\"The new address that represents this Delegate\",\"newCommitTime\":\"Sets the length of time in seconds that this  delegate can be vetoed. Whenever this delegate is in a delegate chain  the time allowed to veto any event must be greater than or equal to  this time.\",\"newName\":\"The new name used to identify the Delegate\",\"newUrl\":\"The new link to the Delegate's profile often an IPFS hash\"}},\"updateGiver(uint64,address,string,string,uint64)\":{\"params\":{\"idGiver\":\"This is the Admin id number used to specify the Giver\",\"newAddr\":\"The new address that represents this Giver\",\"newCommitTime\":\"Sets the length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project\",\"newName\":\"The new name used to identify the Giver\",\"newUrl\":\"The new link to the Giver's profile often an IPFS hash\"}},\"updateProject(uint64,address,string,string,uint64)\":{\"params\":{\"idProject\":\"The Admin id number used to specify the Project\",\"newAddr\":\"The new address that represents this Project\",\"newCommitTime\":\"Sets the length of time in seconds the Project has  to veto when the Project delegates to a Delegate and they pledge those  funds to a project\",\"newName\":\"The new name used to identify the Project\",\"newUrl\":\"The new link to the Project's profile often an IPFS hash\"}},\"useWhitelist(bool)\":{\"details\":\"enable/disable the plugin whitelist.\"},\"withdraw(uint64,uint256)\":{\"params\":{\"amount\":\"Quantity of ether (in wei) to be authorized\",\"idPledge\":\"Id of the pledge that is to be redeemed into ether\"}}}},\"userdoc\":{\"methods\":{\"addDelegate(string,string,uint64,address)\":{\"notice\":\"Creates a Delegate Admin with the `msg.sender` as the Admin addr\"},\"addGiver(string,string,uint64,address)\":{\"notice\":\"/////////////////Creates a Giver Admin with the `msg.sender` as the Admin address\"},\"addGiverAndDonate(uint64)\":{\"notice\":\"Make a donation in Ether, basically forwarding to addGiverAndDonate method,  setting msg.sender as the \\\"giver\\\" of this donation\"},\"addGiverAndDonate(uint64,address)\":{\"notice\":\"Make a donation in Ether on behalf of another Giver  basically forwarding to addGiverAndDonate method\"},\"addGiverAndDonate(uint64,address,address,uint256)\":{\"notice\":\"Create a \\\"giver\\\" pledge admin for the given `donorAddress` & donate \"},\"addGiverAndDonate(uint64,address,uint256)\":{\"notice\":\"Create a \\\"giver\\\" pledge admin for the sender & donate \"},\"addProject(string,string,address,uint64,uint64,address)\":{\"notice\":\"Creates a Project Admin with the `msg.sender` as the Admin addr\"},\"addValidPluginContract(bytes32)\":{\"notice\":\"Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`\"},\"cancelPayment(uint64,uint256)\":{\"notice\":\"`onlyVault` Cancels a withdraw request, changing the PledgeState  from Paying back to Pledged\"},\"cancelPledge(uint64,uint256)\":{\"notice\":\"Transfers `amount` in `idPledge` back to the `oldPledge` that  that sent it there in the first place, a Ctrl-z \"},\"cancelProject(uint64)\":{\"notice\":\"Changes the `project.canceled` flag to `true`; cannot be undone\"},\"confirmPayment(uint64,uint256)\":{\"notice\":\"`onlyVault` Confirms a withdraw request changing the PledgeState  from Paying to Paid\"},\"donate(uint64,uint64)\":{\"notice\":\"Make a donation in Ether, basically forwarding to donate method  setting the msg.sender as the \\\"giver\\\" of the donation\"},\"donate(uint64,uint64,address,uint256)\":{\"notice\":\"This is how value enters the system and how pledges are created;  the ether is sent to the vault, a pledge for the Giver is created (or  found), the amount of ETH donated in wei is added to the `amount` in  the Giver's Pledge, and an LP transfer is done to the idReceiver for  the full amount\"},\"getPledge(uint64)\":{\"notice\":\"A getter that returns the details of the specified pledge\"},\"getPledgeAdmin(uint64)\":{\"notice\":\"A constant getter to check the details of a specified Admin\"},\"getPledgeDelegate(uint64,uint64)\":{\"notice\":\"//////////////////////////Getter to find Delegate w/ the Pledge ID & the Delegate index\"},\"initialize(address)\":{\"notice\":\"////////////\"},\"isProjectCanceled(uint64)\":{\"notice\":\"A getter to find if a specified Project has been canceled\"},\"isValidPlugin(address)\":{\"notice\":\"check if the contract at the provided address is in the plugin whitelist\"},\"mNormalizePledge(uint64[])\":{\"notice\":\"`mNormalizePledge` allows for multiple pledges to be  normalized efficiently\"},\"mTransfer(uint64,uint256[],uint64)\":{\"notice\":\"Transfers multiple amounts within multiple Pledges in an  efficient single call \"},\"mWithdraw(uint256[])\":{\"notice\":\"Authorizes multiple amounts within multiple Pledges to be  withdrawn from the `vault` in an efficient single call \"},\"normalizePledge(uint64)\":{\"notice\":\"////////////////Only affects pledges with the Pledged PledgeState for 2 things:   #1: Checks if the pledge should be committed. This means that       if the pledge has an intendedProject and it is past the       commitTime, it changes the owner to be the proposed project       (The UI will have to read the commit time and manually do what       this function does to the pledge for the end user       at the expiration of the commitTime)     ///   #2: Checks to make sure that if there has been a cancellation in the       chain of projects, the pledge's owner has been changed       appropriately.     /// This function can be called by anybody at anytime on any pledge.  In general it can be called to force the calls of the affected   plugins, which also need to be predicted by the UI\"},\"numberOfPledgeAdmins()\":{\"notice\":\"//////////////////////////A constant getter used to check how many total Admins exist\"},\"numberOfPledges()\":{\"notice\":\"/////////////////////////A constant getter that returns the total number of pledges\"},\"transfer(uint64,uint64,uint256,uint64)\":{\"notice\":\"Transfers amounts between pledges for internal accounting\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"updateDelegate(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Delegate's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Delegate\"},\"updateGiver(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Giver's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Giver\"},\"updateProject(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Project's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin or a parentProject,  and it must be called by the current address of the Project\"},\"useWhitelist(bool)\":{\"notice\":\"you better know what you're doing if you are going to disable it\"},\"withdraw(uint64,uint256)\":{\"notice\":\"Authorizes a payment be made from the `vault` can be used by the  Giver to veto a pre-committed donation from a Delegate to an  intendedProject\"}}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/LiquidPledging.sol\":\"LiquidPledging\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledging.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n    Arthur Lunn, Satya van Heummen <satya.vh@gmail.com>\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingBase.sol\\\";\\n\\n/// @dev `LiquidPledging` allows for liquid pledging through the use of\\n///  internal id structures and delegate chaining. All basic operations for\\n///  handling liquid pledging are supplied as well as plugin features\\n///  to allow for expanded functionality.\\ncontract LiquidPledging is LiquidPledgingBase {\\n\\n    /// @notice Make a donation in Ether, basically forwarding to addGiverAndDonate method,\\n    ///  setting msg.sender as the \\\"giver\\\" of this donation\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project    \\n    function addGiverAndDonate(uint64 idReceiver)\\n        public\\n        payable\\n    {\\n        addGiverAndDonate(idReceiver, msg.sender, ETH, msg.value);\\n    }\\n\\n    /// @notice Make a donation in Ether on behalf of another Giver\\n    ///  basically forwarding to addGiverAndDonate method\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param donorAddress The address of the \\\"giver\\\" of this donation    \\n    function addGiverAndDonate(uint64 idReceiver, address donorAddress)\\n        public\\n        payable\\n    {\\n        addGiverAndDonate(idReceiver, donorAddress, ETH, msg.value);\\n    }    \\n\\n    /// Create a \\\"giver\\\" pledge admin for the sender & donate \\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function addGiverAndDonate(uint64 idReceiver, address token, uint amount)\\n        public\\n    {\\n        addGiverAndDonate(idReceiver, msg.sender, token, amount);\\n    }\\n\\n    /// Create a \\\"giver\\\" pledge admin for the given `donorAddress` & donate \\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param donorAddress The address of the \\\"giver\\\" of this donation\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function addGiverAndDonate(uint64 idReceiver, address donorAddress, address token, uint amount)\\n        public\\n    {\\n        require(donorAddress != 0);\\n        // default to a 3 day (259200 seconds) commitTime\\n        uint64 idGiver = addGiver(donorAddress, \\\"\\\", \\\"\\\", 259200, ILiquidPledgingPlugin(0));\\n        donate(idGiver, idReceiver, token, amount);\\n    }\\n\\n    /// @notice Make a donation in Ether, basically forwarding to donate method\\n    ///  setting the msg.sender as the \\\"giver\\\" of the donation\\n    /// @param idGiver The id of the Giver donating\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    function donate(uint64 idGiver, uint64 idReceiver)\\n        public\\n        payable\\n    {\\n        donate(idGiver, idReceiver, ETH, msg.value);\\n    }\\n\\n    /// @notice This is how value enters the system and how pledges are created;\\n    ///  the ether is sent to the vault, a pledge for the Giver is created (or\\n    ///  found), the amount of ETH donated in wei is added to the `amount` in\\n    ///  the Giver's Pledge, and an LP transfer is done to the idReceiver for\\n    ///  the full amount\\n    /// @param idGiver The id of the Giver donating\\n    /// @param idReceiver The Admin receiving the donation; can be any Admin:\\n    ///  the Giver themselves, another Giver, a Delegate or a Project\\n    /// @param token The address of the token being donated.\\n    /// @param amount The amount of tokens being donated\\n    function donate(uint64 idGiver, uint64 idReceiver, address token, uint amount)\\n        public\\n    {\\n        require(idGiver > 0); // prevent burning donations. idReceiver is checked in _transfer\\n        require(amount > 0);\\n\\n        PledgeAdmin storage sender = _findAdmin(idGiver);\\n        require(sender.adminType == PledgeAdminType.Giver);\\n\\n        // transfer ether or token to the `vault`\\n        if (token == ETH) {\\n            vault.transfer(amount);\\n        } else {\\n            require(ERC20(token).transferFrom(msg.sender, address(vault), amount));\\n        }\\n\\n        uint64 idPledge = _findOrCreatePledge(\\n            idGiver,\\n            new uint64[](0), // Creates empty array for delegationChain\\n            0,\\n            0,\\n            0,\\n            token,\\n            PledgeState.Pledged\\n        );\\n\\n        Pledge storage pTo = _findPledge(idPledge);\\n        pTo.amount += amount;\\n\\n        Transfer(0, idPledge, amount);\\n\\n        _transfer(idGiver, idPledge, amount, idReceiver);\\n    }\\n\\n    /// @notice Transfers amounts between pledges for internal accounting\\n    /// @param idSender Id of the Admin that is transferring the amount from\\n    ///  Pledge to Pledge; this admin must have permissions to move the value\\n    /// @param idPledge Id of the pledge that's moving the value\\n    /// @param amount Quantity of ETH (in wei) that this pledge is transferring \\n    ///  the authority to withdraw from the vault\\n    /// @param idReceiver Destination of the `amount`, can be a Giver/Project sending\\n    ///  to a Giver, a Delegate or a Project; a Delegate sending to another\\n    ///  Delegate, or a Delegate pre-commiting it to a Project \\n    function transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) public\\n    {\\n        _checkAdminOwner(idSender);\\n        _transfer(idSender, idPledge, amount, idReceiver);\\n    }\\n\\n    /// @notice Authorizes a payment be made from the `vault` can be used by the\\n    ///  Giver to veto a pre-committed donation from a Delegate to an\\n    ///  intendedProject\\n    /// @param idPledge Id of the pledge that is to be redeemed into ether\\n    /// @param amount Quantity of ether (in wei) to be authorized\\n    function withdraw(uint64 idPledge, uint amount) public {\\n        idPledge = normalizePledge(idPledge); // Updates pledge info \\n\\n        Pledge storage p = _findPledge(idPledge);\\n        require(p.pledgeState == PledgeState.Pledged);\\n        _checkAdminOwner(p.owner);\\n\\n        uint64 idNewPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Paying\\n        );\\n\\n        _doTransfer(idPledge, idNewPledge, amount);\\n\\n        PledgeAdmin storage owner = _findAdmin(p.owner);\\n        vault.authorizePayment(bytes32(idNewPledge), owner.addr, p.token, amount);\\n    }\\n\\n    /// @notice `onlyVault` Confirms a withdraw request changing the PledgeState\\n    ///  from Paying to Paid\\n    /// @param idPledge Id of the pledge that is to be withdrawn\\n    /// @param amount Quantity of ether (in wei) to be withdrawn\\n    function confirmPayment(uint64 idPledge, uint amount) public onlyVault {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.pledgeState == PledgeState.Paying);\\n\\n        uint64 idNewPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Paid\\n        );\\n\\n        _doTransfer(idPledge, idNewPledge, amount);\\n    }\\n\\n    /// @notice `onlyVault` Cancels a withdraw request, changing the PledgeState\\n    ///  from Paying back to Pledged\\n    /// @param idPledge Id of the pledge that's withdraw is to be canceled\\n    /// @param amount Quantity of ether (in wei) to be canceled\\n    function cancelPayment(uint64 idPledge, uint amount) public onlyVault {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.pledgeState == PledgeState.Paying);\\n\\n        // When a payment is canceled, never is assigned to a project.\\n        uint64 idOldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n\\n        idOldPledge = normalizePledge(idOldPledge);\\n\\n        _doTransfer(idPledge, idOldPledge, amount);\\n    }\\n\\n    /// @notice Changes the `project.canceled` flag to `true`; cannot be undone\\n    /// @param idProject Id of the project that is to be canceled\\n    function cancelProject(uint64 idProject) public {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n        _checkAdminOwner(idProject);\\n        project.canceled = true;\\n\\n        CancelProject(idProject);\\n    }\\n\\n    /// @notice Transfers `amount` in `idPledge` back to the `oldPledge` that\\n    ///  that sent it there in the first place, a Ctrl-z \\n    /// @param idPledge Id of the pledge that is to be canceled\\n    /// @param amount Quantity of ether (in wei) to be transfered to the \\n    ///  `oldPledge`\\n    function cancelPledge(uint64 idPledge, uint amount) public {\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        require(p.oldPledge != 0);\\n        require(p.pledgeState == PledgeState.Pledged);\\n        _checkAdminOwner(p.owner);\\n\\n        uint64 oldPledge = _getOldestPledgeNotCanceled(p.oldPledge);\\n        _doTransfer(idPledge, oldPledge, amount);\\n    }\\n\\n\\n////////\\n// Multi pledge methods\\n////////\\n\\n    // @dev This set of functions makes moving a lot of pledges around much more\\n    // efficient (saves gas) than calling these functions in series\\n    \\n    \\n    /// @dev Bitmask used for dividing pledge amounts in Multi pledge methods\\n    uint constant D64 = 0x10000000000000000;\\n\\n    /// @notice Transfers multiple amounts within multiple Pledges in an\\n    ///  efficient single call \\n    /// @param idSender Id of the Admin that is transferring the amounts from\\n    ///  all the Pledges; this admin must have permissions to move the value\\n    /// @param pledgesAmounts An array of Pledge amounts and the idPledges with \\n    ///  which the amounts are associated; these are extrapolated using the D64\\n    ///  bitmask\\n    /// @param idReceiver Destination of the `pledesAmounts`, can be a Giver or \\n    ///  Project sending to a Giver, a Delegate or a Project; a Delegate sending\\n    ///  to another Delegate, or a Delegate pre-commiting it to a Project \\n    function mTransfer(\\n        uint64 idSender,\\n        uint[] pledgesAmounts,\\n        uint64 idReceiver\\n    ) public \\n    {\\n        for (uint i = 0; i < pledgesAmounts.length; i++ ) {\\n            uint64 idPledge = uint64(pledgesAmounts[i] & (D64-1));\\n            uint amount = pledgesAmounts[i] / D64;\\n\\n            transfer(idSender, idPledge, amount, idReceiver);\\n        }\\n    }\\n\\n    /// @notice Authorizes multiple amounts within multiple Pledges to be\\n    ///  withdrawn from the `vault` in an efficient single call \\n    /// @param pledgesAmounts An array of Pledge amounts and the idPledges with \\n    ///  which the amounts are associated; these are extrapolated using the D64\\n    ///  bitmask\\n    function mWithdraw(uint[] pledgesAmounts) public {\\n        for (uint i = 0; i < pledgesAmounts.length; i++ ) {\\n            uint64 idPledge = uint64(pledgesAmounts[i] & (D64-1));\\n            uint amount = pledgesAmounts[i] / D64;\\n\\n            withdraw(idPledge, amount);\\n        }\\n    }\\n\\n    /// @notice `mNormalizePledge` allows for multiple pledges to be\\n    ///  normalized efficiently\\n    /// @param pledges An array of pledge IDs\\n    function mNormalizePledge(uint64[] pledges) public {\\n        for (uint i = 0; i < pledges.length; i++ ) {\\n            normalizePledge(pledges[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa549270fe2f164f902b91543b5f3e0c41f1cf97a65f6a307a387534b900777e6\"},\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"},\"giveth-liquidpledging/contracts/LiquidPledgingBase.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./PledgeAdmins.sol\\\";\\nimport \\\"./Pledges.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\n/// @dev `LiquidPledgingBase` is the base level contract used to carry out\\n///  liquidPledging's most basic functions, mostly handling and searching the\\n///  data structures\\ncontract LiquidPledgingBase is AragonApp, LiquidPledgingStorage, PledgeAdmins, Pledges {\\n\\n    event Transfer(uint indexed from, uint indexed to, uint amount);\\n    event CancelProject(uint indexed idProject);\\n\\n/////////////\\n// Modifiers\\n/////////////\\n\\n    /// @dev The `vault`is the only addresses that can call a function with this\\n    ///  modifier\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault));\\n        _;\\n    }\\n\\n///////////////\\n// Constructor\\n///////////////\\n\\n    /// @param _vault The vault where the ETH backing the pledges is stored\\n    function initialize(address _vault) onlyInit public {\\n        require(_vault != 0x0);\\n        initialized();\\n\\n        vault = ILPVault(_vault);\\n\\n        admins.length = 1; // we reserve the 0 admin\\n        pledges.length = 1; // we reserve the 0 pledge\\n    }\\n\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice Getter to find Delegate w/ the Pledge ID & the Delegate index\\n    /// @param idPledge The id number representing the pledge being queried\\n    /// @param idxDelegate The index number for the delegate in this Pledge \\n    function getPledgeDelegate(uint64 idPledge, uint64 idxDelegate) external view returns(\\n        uint64 idDelegate,\\n        address addr,\\n        string name\\n    ) {\\n        Pledge storage p = _findPledge(idPledge);\\n        idDelegate = p.delegationChain[idxDelegate - 1];\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        addr = delegate.addr;\\n        name = delegate.name;\\n    }\\n\\n///////////////////\\n// Public functions\\n///////////////////\\n\\n    /// @notice Only affects pledges with the Pledged PledgeState for 2 things:\\n    ///   #1: Checks if the pledge should be committed. This means that\\n    ///       if the pledge has an intendedProject and it is past the\\n    ///       commitTime, it changes the owner to be the proposed project\\n    ///       (The UI will have to read the commit time and manually do what\\n    ///       this function does to the pledge for the end user\\n    ///       at the expiration of the commitTime)\\n    ///\\n    ///   #2: Checks to make sure that if there has been a cancellation in the\\n    ///       chain of projects, the pledge's owner has been changed\\n    ///       appropriately.\\n    ///\\n    /// This function can be called by anybody at anytime on any pledge.\\n    ///  In general it can be called to force the calls of the affected \\n    ///  plugins, which also need to be predicted by the UI\\n    /// @param idPledge This is the id of the pledge that will be normalized\\n    /// @return The normalized Pledge!\\n    function normalizePledge(uint64 idPledge) public returns(uint64) {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Check to make sure this pledge hasn't already been used \\n        // or is in the process of being used\\n        if (p.pledgeState != PledgeState.Pledged) {\\n            return idPledge;\\n        }\\n\\n        // First send to a project if it's proposed and committed\\n        if ((p.intendedProject > 0) && ( _getTime() > p.commitTime)) {\\n            uint64 oldPledge = _findOrCreatePledge(\\n                p.owner,\\n                p.delegationChain,\\n                0,\\n                0,\\n                p.oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            uint64 toPledge = _findOrCreatePledge(\\n                p.intendedProject,\\n                new uint64[](0),\\n                0,\\n                0,\\n                oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            _doTransfer(idPledge, toPledge, p.amount);\\n            idPledge = toPledge;\\n            p = _findPledge(idPledge);\\n        }\\n\\n        toPledge = _getOldestPledgeNotCanceled(idPledge);\\n        if (toPledge != idPledge) {\\n            _doTransfer(idPledge, toPledge, p.amount);\\n        }\\n\\n        return toPledge;\\n    }\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice A check to see if the msg.sender is the owner or the\\n    ///  plugin contract for a specific Admin\\n    /// @param idAdmin The id of the admin being checked\\n    function _checkAdminOwner(uint64 idAdmin) internal view {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        require(msg.sender == address(a.plugin) || msg.sender == a.addr);\\n    }\\n\\n    function _transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal\\n    {\\n        require(idReceiver > 0); // prevent burning value\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage receiver = _findAdmin(idReceiver);\\n\\n        require(p.pledgeState == PledgeState.Pledged);\\n\\n        // If the sender is the owner of the Pledge\\n        if (p.owner == idSender) {\\n\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                _transferOwnershipToGiver(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Project) {\\n                _transferOwnershipToProject(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Delegate) {\\n\\n                uint recieverDIdx = _getDelegateIdx(p, idReceiver);\\n                if (p.intendedProject > 0 && recieverDIdx != NOTFOUND) {\\n                    // if there is an intendedProject and the receiver is in the delegationChain,\\n                    // then we want to preserve the delegationChain as this is a veto of the\\n                    // intendedProject by the owner\\n\\n                    if (recieverDIdx == p.delegationChain.length - 1) {\\n                        uint64 toPledge = _findOrCreatePledge(\\n                            p.owner,\\n                            p.delegationChain,\\n                            0,\\n                            0,\\n                            p.oldPledge,\\n                            p.token,\\n                            PledgeState.Pledged);\\n                        _doTransfer(idPledge, toPledge, amount);\\n                        return;\\n                    }\\n\\n                    _undelegate(idPledge, amount, p.delegationChain.length - receiverDIdx - 1);\\n                    return;\\n                }\\n                // owner is not vetoing an intendedProject and is transferring the pledge to a delegate,\\n                // so we want to reset the delegationChain\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length\\n                );\\n                _appendDelegate(idPledge, amount, idReceiver);\\n                return;\\n            }\\n\\n            // This should never be reached as the receiver.adminType\\n            // should always be either a Giver, Project, or Delegate\\n            assert(false);\\n        }\\n\\n        // If the sender is a Delegate\\n        uint senderDIdx = _getDelegateIdx(p, idSender);\\n        if (senderDIdx != NOTFOUND) {\\n\\n            // And the receiver is another Giver\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                // Only transfer to the Giver who owns the pledge\\n                assert(p.owner == idReceiver);\\n                _undelegate(idPledge, amount, p.delegationChain.length);\\n                return;\\n            }\\n\\n            // And the receiver is another Delegate\\n            if (receiver.adminType == PledgeAdminType.Delegate) {\\n                uint receiverDIdx = _getDelegateIdx(p, idReceiver);\\n\\n                // And not in the delegationChain or part of the delegationChain\\n                // is after the sender, then all of the other delegates after \\n                // the sender are removed and the receiver is appended at the \\n                // end of the delegationChain\\n                if (receiverDIdx == NOTFOUND || receiverDIdx > senderDIdx) {\\n                    idPledge = _undelegate(\\n                        idPledge,\\n                        amount,\\n                        p.delegationChain.length - senderDIdx - 1\\n                    );\\n                    _appendDelegate(idPledge, amount, idReceiver);\\n                    return;\\n                }\\n\\n                // And is already part of the delegate chain but is before the\\n                //  sender, then the sender and all of the other delegates after\\n                //  the RECEIVER are removed from the delegationChain\\n                _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - receiverDIdx - 1\\n                );\\n                return;\\n            }\\n\\n            // And the receiver is a Project, all the delegates after the sender\\n            //  are removed and the amount is pre-committed to the project\\n            if (receiver.adminType == PledgeAdminType.Project) {\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - senderDIdx - 1\\n                );\\n                _proposeAssignProject(idPledge, amount, idReceiver);\\n                return;\\n            }\\n        }\\n        assert(false);  // When the sender is not an owner or a delegate\\n    }\\n\\n    /// @notice `transferOwnershipToProject` allows for the transfer of\\n    ///  ownership to the project, but it can also be called by a project\\n    ///  to un-delegate everyone by setting one's own id for the idReceiver\\n    /// @param idPledge the id of the pledge to be transfered.\\n    /// @param amount Quantity of value that's being transfered\\n    /// @param idReceiver The new owner of the project (or self to un-delegate)\\n    function _transferOwnershipToProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Ensure that the pledge is not already at max pledge depth\\n        // and the project has not been canceled\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 oldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,                     // Set the new owner\\n            new uint64[](0),                // clear the delegation chain\\n            0,\\n            0,\\n            oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }   \\n\\n\\n    /// @notice `transferOwnershipToGiver` allows for the transfer of\\n    ///  value back to the Giver, value is placed in a pledged state\\n    ///  without being attached to a project, delegation chain, or time line.\\n    /// @param idPledge the id of the pledge to be transferred.\\n    /// @param amount Quantity of value that's being transferred\\n    /// @param idReceiver The new owner of the pledge\\n    function _transferOwnershipToGiver(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,\\n            new uint64[](0),\\n            0,\\n            0,\\n            0,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's being chained.\\n    /// @param idReceiver The delegate to be added at the end of the chain\\n    function _appendDelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.delegationChain.length < MAX_DELEGATES);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length + 1\\n        );\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n\\n        // Make the last item in the array the idReceiver\\n        newDelegationChain[p.delegationChain.length] = idReceiver;\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's shifted from delegates.\\n    /// @param q Number (or depth) of delegates to remove\\n    /// @return toPledge The id for the pledge being adjusted or created\\n    function _undelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint q\\n    ) internal returns (uint64 toPledge)\\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length - q\\n        );\\n\\n        for (uint i = 0; i < p.delegationChain.length - q; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n        toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `proposeAssignProject` proposes the assignment of a pledge\\n    ///  to a specific project.\\n    /// @dev This function should potentially be named more specifically.\\n    /// @param idPledge the id of the pledge that will be assigned.\\n    /// @param amount Quantity of value this pledge leader would be assigned.\\n    /// @param idReceiver The project this pledge will potentially \\n    ///  be assigned to.\\n    function _proposeAssignProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            idReceiver,\\n            uint64(_getTime() + _maxCommitTime(p)),\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `doTransfer` is designed to allow for pledge amounts to be \\n    ///  shifted around internally.\\n    /// @param from This is the id of the pledge from which value will be transferred.\\n    /// @param to This is the id of the pledge that value will be transferred to.\\n    /// @param _amount The amount of value that will be transferred.\\n    function _doTransfer(uint64 from, uint64 to, uint _amount) internal {\\n        uint amount = _callPlugins(true, from, to, _amount);\\n        if (from == to) {\\n            return;\\n        }\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        Pledge storage pFrom = _findPledge(from);\\n        Pledge storage pTo = _findPledge(to);\\n\\n        require(pFrom.amount >= amount);\\n        pFrom.amount -= amount;\\n        pTo.amount += amount;\\n        require(pTo.amount >= amount);\\n\\n        Transfer(from, to, amount);\\n        _callPlugins(false, from, to, amount);\\n    }\\n\\n    /// @notice A getter to find the longest commitTime out of the owner and all\\n    ///  the delegates for a specified pledge\\n    /// @param p The Pledge being queried\\n    /// @return The maximum commitTime out of the owner and all the delegates\\n    function _maxCommitTime(Pledge p) internal view returns(uint64 commitTime) {\\n        PledgeAdmin storage a = _findAdmin(p.owner);\\n        commitTime = a.commitTime; // start with the owner's commitTime\\n\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            a = _findAdmin(p.delegationChain[i]);\\n\\n            // If a delegate's commitTime is longer, make it the new commitTime\\n            if (a.commitTime > commitTime) {\\n                commitTime = a.commitTime;\\n            }\\n        }\\n    }\\n\\n    /// @notice A getter to find the oldest pledge that hasn't been canceled\\n    /// @param idPledge The starting place to lookup the pledges\\n    /// @return The oldest idPledge that hasn't been canceled (DUH!)\\n    function _getOldestPledgeNotCanceled(\\n        uint64 idPledge\\n    ) internal view returns(uint64)\\n    {\\n        if (idPledge == 0) {\\n            return 0;\\n        }\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage admin = _findAdmin(p.owner);\\n        \\n        if (admin.adminType == PledgeAdminType.Giver) {\\n            return idPledge;\\n        }\\n\\n        assert(admin.adminType == PledgeAdminType.Project);\\n        if (!isProjectCanceled(p.owner)) {\\n            return idPledge;\\n        }\\n\\n        return _getOldestPledgeNotCanceled(p.oldPledge);\\n    }\\n\\n    /// @notice `callPlugin` is used to trigger the general functions in the\\n    ///  plugin for any actions needed before and after a transfer happens.\\n    ///  Specifically what this does in relation to the plugin is something\\n    ///  that largely depends on the functions of that plugin. This function\\n    ///  is generally called in pairs, once before, and once after a transfer.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param adminId This should be the Id of the *trusted* individual\\n    ///  who has control over this plugin.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param context The situation that is triggering the plugin. See plugin\\n    ///  for a full description of contexts.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPlugin(\\n        bool before,\\n        uint64 adminId,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        uint newAmount;\\n        allowedAmount = amount;\\n        PledgeAdmin storage admin = _findAdmin(adminId);\\n\\n        // Checks admin has a plugin assigned and a non-zero amount is requested\\n        if (address(admin.plugin) != 0 && allowedAmount > 0) {\\n            // There are two separate functions called in the plugin.\\n            // One is called before the transfer and one after\\n            if (before) {\\n                newAmount = admin.plugin.beforeTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n                require(newAmount <= allowedAmount);\\n                allowedAmount = newAmount;\\n            } else {\\n                admin.plugin.afterTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice `callPluginsPledge` is used to apply plugin calls to\\n    ///  the delegate chain and the intended project if there is one.\\n    ///  It does so in either a transferring or receiving context based\\n    ///  on the `p` and  `fromPledge` parameters.\\n    /// @param before This toggle determines whether the plugin call is occuring\\n    ///  before or after a transfer.\\n    /// @param idPledge This is the id of the pledge on which this plugin\\n    ///  is being called.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPluginsPledge(\\n        bool before,\\n        uint64 idPledge,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        // Determine if callPlugin is being applied in a receiving\\n        // or transferring context\\n        uint64 offset = idPledge == fromPledge ? 0 : 256;\\n        allowedAmount = amount;\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Always call the plugin on the owner\\n        allowedAmount = _callPlugin(\\n            before,\\n            p.owner,\\n            fromPledge,\\n            toPledge,\\n            offset,\\n            p.token,\\n            allowedAmount\\n        );\\n\\n        // Apply call plugin to all delegates\\n        for (uint64 i = 0; i < p.delegationChain.length; i++) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.delegationChain[i],\\n                fromPledge,\\n                toPledge,\\n                offset + i + 1,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n\\n        // If there is an intended project also call the plugin in\\n        // either a transferring or receiving context based on offset\\n        // on the intended project\\n        if (p.intendedProject > 0) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.intendedProject,\\n                fromPledge,\\n                toPledge,\\n                offset + 255,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice `callPlugins` calls `callPluginsPledge` once for the transfer\\n    ///  context and once for the receiving context. The aggregated \\n    ///  allowed amount is then returned.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param fromPledge This is the Id from which value is being transferred.\\n    /// @param toPledge This is the Id that value is being transferred to.\\n    /// @param amount The amount of value that is being transferred.\\n    function _callPlugins(\\n        bool before,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        allowedAmount = amount;\\n\\n        // Call the plugins in the transfer context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            fromPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n\\n        // Call the plugins in the receive context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            toPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n    }\\n\\n/////////////\\n// Test functions\\n/////////////\\n\\n    /// @notice Basic helper function to return the current time\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n}\\n\",\"keccak256\":\"0xbd10aeb8cd8834c63bb58034f93ed213ee8ed4f38682cc3808bdf1f5c7d79df3\"},\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./LiquidPledgingACLHelpers.sol\\\";\\n\\ncontract LiquidPledgingPlugins is AragonApp, LiquidPledgingStorage, LiquidPledgingACLHelpers {\\n\\n    bytes32 constant public PLUGIN_MANAGER_ROLE = keccak256(\\\"PLUGIN_MANAGER_ROLE\\\");\\n\\n    /**\\n    * @dev adds an instance of a plugin to the whitelist\\n    */\\n    function addValidPluginInstance(address addr) auth(PLUGIN_MANAGER_ROLE) external {\\n        pluginInstanceWhitelist[addr] = true;\\n    }\\n\\n    /**\\n    * @dev add a contract to the plugin whitelist.\\n    * @notice Proxy contracts should never be added using this method. Each individual\\n    *         proxy instance should be added by calling `addValidPluginInstance`\\n    */\\n    function addValidPluginContract(bytes32 contractHash) auth(PLUGIN_MANAGER_ROLE) public {\\n        pluginContractWhitelist[contractHash] = true;\\n    }\\n\\n    function addValidPluginContracts(bytes32[] contractHashes) external auth(PLUGIN_MANAGER_ROLE) {\\n        for (uint8 i = 0; i < contractHashes.length; i++) {\\n            addValidPluginContract(contractHashes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev removes a contract from the plugin whitelist\\n    */\\n    function removeValidPluginContract(bytes32 contractHash) external authP(PLUGIN_MANAGER_ROLE, arr(contractHash)) {\\n        pluginContractWhitelist[contractHash] = false;\\n    }\\n\\n    /**\\n    * @dev removes an instance of a plugin to the whitelist\\n    */\\n    function removeValidPluginInstance(address addr) external authP(PLUGIN_MANAGER_ROLE, arr(addr)) {\\n        pluginInstanceWhitelist[addr] = false;\\n    }\\n\\n    /**\\n    * @dev enable/disable the plugin whitelist.\\n    * @notice you better know what you're doing if you are going to disable it\\n    */\\n    function useWhitelist(bool useWhitelist) external auth(PLUGIN_MANAGER_ROLE) {\\n        whitelistDisabled = !useWhitelist;\\n    }\\n\\n    /**\\n    * check if the contract at the provided address is in the plugin whitelist\\n    */\\n    function isValidPlugin(address addr) public view returns(bool) {\\n        if (whitelistDisabled || addr == 0x0) {\\n            return true;\\n        }\\n\\n        // first check pluginInstances\\n        if (pluginInstanceWhitelist[addr]) {\\n            return true;\\n        }\\n\\n        // if the addr isn't a valid instance, check the contract code\\n        bytes32 contractHash = getCodeHash(addr);\\n\\n        return pluginContractWhitelist[contractHash];\\n    }\\n\\n    /**\\n    * @return the hash of the code for the given address\\n    */\\n    function getCodeHash(address addr) public view returns(bytes32) {\\n        bytes memory o_code;\\n        assembly {\\n            // retrieve the size of the code\\n            let size := extcodesize(addr)\\n            // allocate output byte array\\n            o_code := mload(0x40)\\n            mstore(o_code, size) // store length in memory\\n            // actually retrieve the code\\n            extcodecopy(addr, add(o_code, 0x20), 0, size)\\n        }\\n        return keccak256(o_code);\\n    }\\n}\",\"keccak256\":\"0x109373f81759324d3d39f0b2b8fd02072c2b0e502901c14e1b06ca91a05a5ae2\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"},\"giveth-liquidpledging/contracts/PledgeAdmins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\nimport \\\"./LiquidPledgingPlugins.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\ncontract PledgeAdmins is AragonApp, LiquidPledgingPlugins {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_SUBPROJECT_LEVEL = 20;\\n    uint constant MAX_INTERPROJECT_LEVEL = 20;\\n\\n    // Events\\n    event GiverAdded(uint64 indexed idGiver, string url);\\n    event GiverUpdated(uint64 indexed idGiver, string url);\\n    event DelegateAdded(uint64 indexed idDelegate, string url);\\n    event DelegateUpdated(uint64 indexed idDelegate, string url);\\n    event ProjectAdded(uint64 indexed idProject, string url);\\n    event ProjectUpdated(uint64 indexed idProject, string url);\\n\\n////////////////////\\n// Public functions\\n////////////////////\\n\\n    /// @notice Creates a Giver Admin with the `msg.sender` as the Admin address\\n    /// @param name The name used to identify the Giver\\n    /// @param url The link to the Giver's profile often an IPFS hash\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param plugin This is Giver's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idGiver The id number used to reference this Admin\\n    function addGiver(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idGiver)\\n    {\\n        return addGiver(\\n            msg.sender,\\n            name,\\n            url,\\n            commitTime,\\n            plugin\\n        );\\n    }\\n\\n    function addGiver(\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) public returns (uint64 idGiver)\\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idGiver = uint64(admins.length);\\n\\n        // Save the fields\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Giver,\\n                addr,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        GiverAdded(idGiver, url);\\n    }\\n\\n    /// @notice Updates a Giver's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Giver\\n    /// @param idGiver This is the Admin id number used to specify the Giver\\n    /// @param newAddr The new address that represents this Giver\\n    /// @param newName The new name used to identify the Giver\\n    /// @param newUrl The new link to the Giver's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    function updateGiver(\\n        uint64 idGiver,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage giver = _findAdmin(idGiver);\\n        require(msg.sender == giver.addr);\\n        require(giver.adminType == PledgeAdminType.Giver); // Must be a Giver\\n        giver.addr = newAddr;\\n        giver.name = newName;\\n        giver.url = newUrl;\\n        giver.commitTime = newCommitTime;\\n\\n        GiverUpdated(idGiver, newUrl);\\n    }\\n\\n    /// @notice Creates a Delegate Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Delegate\\n    /// @param url The link to the Delegate's profile often an IPFS hash\\n    /// @param commitTime Sets the length of time in seconds that this delegate\\n    ///  can be vetoed. Whenever this delegate is in a delegate chain the time\\n    ///  allowed to veto any event must be greater than or equal to this time.\\n    /// @param plugin This is Delegate's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idxDelegate The id number used to reference this Delegate within\\n    ///  the PLEDGE_ADMIN array\\n    function addDelegate(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idDelegate) \\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idDelegate = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Delegate,\\n                msg.sender,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        DelegateAdded(idDelegate, url);\\n    }\\n\\n    /// @notice Updates a Delegate's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Delegate\\n    /// @param idDelegate The Admin id number used to specify the Delegate\\n    /// @param newAddr The new address that represents this Delegate\\n    /// @param newName The new name used to identify the Delegate\\n    /// @param newUrl The new link to the Delegate's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds that this\\n    ///  delegate can be vetoed. Whenever this delegate is in a delegate chain\\n    ///  the time allowed to veto any event must be greater than or equal to\\n    ///  this time.\\n    function updateDelegate(\\n        uint64 idDelegate,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        require(msg.sender == delegate.addr);\\n        require(delegate.adminType == PledgeAdminType.Delegate);\\n        delegate.addr = newAddr;\\n        delegate.name = newName;\\n        delegate.url = newUrl;\\n        delegate.commitTime = newCommitTime;\\n\\n        DelegateUpdated(idDelegate, newUrl);\\n    }\\n\\n    /// @notice Creates a Project Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Project\\n    /// @param url The link to the Project's profile often an IPFS hash\\n    /// @param projectAdmin The address for the trusted project manager\\n    /// @param parentProject The Admin id number for the parent project or 0 if\\n    ///  there is no parentProject\\n    /// @param commitTime Sets the length of time in seconds the Project has to\\n    ///   veto when the Project delegates to another Delegate and they pledge\\n    ///   those funds to a project\\n    /// @param plugin This is Project's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idProject The id number used to reference this Admin\\n    function addProject(\\n        string name,\\n        string url,\\n        address projectAdmin,\\n        uint64 parentProject,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idProject) \\n    {\\n        require(isValidPlugin(plugin));\\n\\n        if (parentProject != 0) {\\n            PledgeAdmin storage a = _findAdmin(parentProject);\\n            // getProjectLevel will check that parentProject has a `Project` adminType\\n            require(_getProjectLevel(a) < MAX_SUBPROJECT_LEVEL);\\n        }\\n\\n        idProject = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Project,\\n                projectAdmin,\\n                commitTime,\\n                parentProject,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        ProjectAdded(idProject, url);\\n    }\\n\\n    /// @notice Updates a Project's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin or a parentProject,\\n    ///  and it must be called by the current address of the Project\\n    /// @param idProject The Admin id number used to specify the Project\\n    /// @param newAddr The new address that represents this Project\\n    /// @param newName The new name used to identify the Project\\n    /// @param newUrl The new link to the Project's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Project has\\n    ///  to veto when the Project delegates to a Delegate and they pledge those\\n    ///  funds to a project\\n    function updateProject(\\n        uint64 idProject,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n\\n        require(msg.sender == project.addr);\\n        require(project.adminType == PledgeAdminType.Project);\\n\\n        project.addr = newAddr;\\n        project.name = newName;\\n        project.url = newUrl;\\n        project.commitTime = newCommitTime;\\n\\n        ProjectUpdated(idProject, newUrl);\\n    }\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice A constant getter used to check how many total Admins exist\\n    /// @return The total number of admins (Givers, Delegates and Projects) .\\n    function numberOfPledgeAdmins() external view returns(uint) {\\n        return admins.length - 1;\\n    }\\n\\n    /// @notice A constant getter to check the details of a specified Admin\\n    /// @return addr Account or contract address for admin\\n    /// @return name Name of the pledgeAdmin\\n    /// @return url The link to the Project's profile often an IPFS hash\\n    /// @return commitTime The length of time in seconds the Admin has to veto\\n    ///   when the Admin delegates to a Delegate and that Delegate pledges those\\n    ///   funds to a project\\n    /// @return parentProject The Admin id number for the parent project or 0\\n    ///  if there is no parentProject\\n    /// @return canceled 0 for Delegates & Givers, true if a Project has been\\n    ///  canceled\\n    /// @return plugin This is Project's liquidPledging plugin allowing for\\n    ///  extended functionality\\n    function getPledgeAdmin(uint64 idAdmin) external view returns (\\n        PledgeAdminType adminType,\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        uint64 parentProject,\\n        bool canceled,\\n        address plugin\\n    ) {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        adminType = a.adminType;\\n        addr = a.addr;\\n        name = a.name;\\n        url = a.url;\\n        commitTime = a.commitTime;\\n        parentProject = a.parentProject;\\n        canceled = a.canceled;\\n        plugin = address(a.plugin);\\n    }\\n\\n    /// @notice A getter to find if a specified Project has been canceled\\n    /// @param projectId The Admin id number used to specify the Project\\n    /// @return True if the Project has been canceled\\n    function isProjectCanceled(uint64 projectId)\\n        public view returns (bool)\\n    {\\n        PledgeAdmin storage a = _findAdmin(projectId);\\n\\n        if (a.adminType == PledgeAdminType.Giver) {\\n            return false;\\n        }\\n\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.canceled) {\\n            return true;\\n        }\\n        if (a.parentProject == 0) {\\n            return false;\\n        }\\n\\n        return isProjectCanceled(a.parentProject);\\n    }\\n\\n///////////////////\\n// Internal methods\\n///////////////////\\n\\n    /// @notice A getter to look up a Admin's details\\n    /// @param idAdmin The id for the Admin to lookup\\n    /// @return The PledgeAdmin struct for the specified Admin\\n    function _findAdmin(uint64 idAdmin) internal view returns (PledgeAdmin storage) {\\n        require(idAdmin < admins.length);\\n        return admins[idAdmin];\\n    }\\n\\n    /// @notice Find the level of authority a specific Project has\\n    ///  using a recursive loop\\n    /// @param a The project admin being queried\\n    /// @return The level of authority a specific Project has\\n    function _getProjectLevel(PledgeAdmin a) internal view returns(uint64) {\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.parentProject == 0) {\\n            return(1);\\n        }\\n\\n        PledgeAdmin storage parent = _findAdmin(a.parentProject);\\n        return _getProjectLevel(parent) + 1;\\n    }\\n}\",\"keccak256\":\"0x06bc6171a12d31aaa05dce4217e107555f8289182046a0bd8da615c38faae3f5\"},\"giveth-liquidpledging/contracts/Pledges.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\n\\ncontract Pledges is AragonApp, LiquidPledgingStorage {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_DELEGATES = 10;\\n\\n    // a constant for when a delegate is requested that is not in the system\\n    uint64 constant  NOTFOUND = 0xFFFFFFFFFFFFFFFF;\\n\\n/////////////////////////////\\n// Public constant functions\\n////////////////////////////\\n\\n    /// @notice A constant getter that returns the total number of pledges\\n    /// @return The total number of Pledges in the system\\n    function numberOfPledges() external view returns (uint) {\\n        return pledges.length - 1;\\n    }\\n\\n    /// @notice A getter that returns the details of the specified pledge\\n    /// @param idPledge the id number of the pledge being queried\\n    /// @return the amount, owner, the number of delegates (but not the actual\\n    ///  delegates, the intendedProject (if any), the current commit time and\\n    ///  the previous pledge this pledge was derived from\\n    function getPledge(uint64 idPledge) external view returns(\\n        uint amount,\\n        uint64 owner,\\n        uint64 nDelegates,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState pledgeState\\n    ) {\\n        Pledge memory p = _findPledge(idPledge);\\n        amount = p.amount;\\n        owner = p.owner;\\n        nDelegates = uint64(p.delegationChain.length);\\n        intendedProject = p.intendedProject;\\n        commitTime = p.commitTime;\\n        oldPledge = p.oldPledge;\\n        token = p.token;\\n        pledgeState = p.pledgeState;\\n    }\\n\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice This creates a Pledge with an initial amount of 0 if one is not\\n    ///  created already; otherwise it finds the pledge with the specified\\n    ///  attributes; all pledges technically exist, if the pledge hasn't been\\n    ///  created in this system yet it simply isn't in the hash array\\n    ///  hPledge2idx[] yet\\n    /// @param owner The owner of the pledge being looked up\\n    /// @param delegationChain The list of delegates in order of authority\\n    /// @param intendedProject The project this pledge will Fund after the\\n    ///  commitTime has passed\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param oldPledge This value is used to store the pledge the current\\n    ///  pledge was came from, and in the case a Project is canceled, the Pledge\\n    ///  will revert back to it's previous state\\n    /// @param state The pledge state: Pledged, Paying, or state\\n    /// @return The hPledge2idx index number\\n    function _findOrCreatePledge(\\n        uint64 owner,\\n        uint64[] delegationChain,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState state\\n    ) internal returns (uint64)\\n    {\\n        bytes32 hPledge = keccak256(delegationChain, owner, intendedProject, commitTime, oldPledge, token, state);\\n        uint64 id = hPledge2idx[hPledge];\\n        if (id > 0) {\\n            return id;\\n        }\\n\\n        id = uint64(pledges.length);\\n        hPledge2idx[hPledge] = id;\\n        pledges.push(\\n            Pledge(\\n                0,\\n                delegationChain,\\n                owner,\\n                intendedProject,\\n                commitTime,\\n                oldPledge,\\n                token,\\n                state\\n            )\\n        );\\n        return id;\\n    }\\n\\n    /// @param idPledge the id of the pledge to load from storage\\n    /// @return The Pledge\\n    function _findPledge(uint64 idPledge) internal view returns(Pledge storage) {\\n        require(idPledge < pledges.length);\\n        return pledges[idPledge];\\n    }\\n\\n    /// @notice A getter that searches the delegationChain for the level of\\n    ///  authority a specific delegate has within a Pledge\\n    /// @param p The Pledge that will be searched\\n    /// @param idDelegate The specified delegate that's searched for\\n    /// @return If the delegate chain contains the delegate with the\\n    ///  `admins` array index `idDelegate` this returns that delegates\\n    ///  corresponding index in the delegationChain. Otherwise it returns\\n    ///  the NOTFOUND constant\\n    function _getDelegateIdx(Pledge p, uint64 idDelegate) internal pure returns(uint64) {\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            if (p.delegationChain[i] == idDelegate) {\\n                return uint64(i);\\n            }\\n        }\\n        return NOTFOUND;\\n    }\\n\\n    /// @notice A getter to find how many old \\\"parent\\\" pledges a specific Pledge\\n    ///  had using a self-referential loop\\n    /// @param p The Pledge being queried\\n    /// @return The number of old \\\"parent\\\" pledges a specific Pledge had\\n    function _getPledgeLevel(Pledge p) internal view returns(uint) {\\n        if (p.oldPledge == 0) {\\n            return 0;\\n        }\\n        Pledge storage oldP = _findPledge(p.oldPledge);\\n        return _getPledgeLevel(oldP) + 1; // a loop lookup\\n    }\\n}\\n\",\"keccak256\":\"0x9c7a60dff92f94d518d0c4a40d5434cd23680f79fd364ae855575ae4ca683797\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "addDelegate(string,string,uint64,address)": {
              "notice": "Creates a Delegate Admin with the `msg.sender` as the Admin addr"
            },
            "addGiver(string,string,uint64,address)": {
              "notice": "/////////////////Creates a Giver Admin with the `msg.sender` as the Admin address"
            },
            "addGiverAndDonate(uint64)": {
              "notice": "Make a donation in Ether, basically forwarding to addGiverAndDonate method,  setting msg.sender as the \"giver\" of this donation"
            },
            "addGiverAndDonate(uint64,address)": {
              "notice": "Make a donation in Ether on behalf of another Giver  basically forwarding to addGiverAndDonate method"
            },
            "addGiverAndDonate(uint64,address,address,uint256)": {
              "notice": "Create a \"giver\" pledge admin for the given `donorAddress` & donate "
            },
            "addGiverAndDonate(uint64,address,uint256)": {
              "notice": "Create a \"giver\" pledge admin for the sender & donate "
            },
            "addProject(string,string,address,uint64,uint64,address)": {
              "notice": "Creates a Project Admin with the `msg.sender` as the Admin addr"
            },
            "addValidPluginContract(bytes32)": {
              "notice": "Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`"
            },
            "cancelPayment(uint64,uint256)": {
              "notice": "`onlyVault` Cancels a withdraw request, changing the PledgeState  from Paying back to Pledged"
            },
            "cancelPledge(uint64,uint256)": {
              "notice": "Transfers `amount` in `idPledge` back to the `oldPledge` that  that sent it there in the first place, a Ctrl-z "
            },
            "cancelProject(uint64)": {
              "notice": "Changes the `project.canceled` flag to `true`; cannot be undone"
            },
            "confirmPayment(uint64,uint256)": {
              "notice": "`onlyVault` Confirms a withdraw request changing the PledgeState  from Paying to Paid"
            },
            "donate(uint64,uint64)": {
              "notice": "Make a donation in Ether, basically forwarding to donate method  setting the msg.sender as the \"giver\" of the donation"
            },
            "donate(uint64,uint64,address,uint256)": {
              "notice": "This is how value enters the system and how pledges are created;  the ether is sent to the vault, a pledge for the Giver is created (or  found), the amount of ETH donated in wei is added to the `amount` in  the Giver's Pledge, and an LP transfer is done to the idReceiver for  the full amount"
            },
            "getPledge(uint64)": {
              "notice": "A getter that returns the details of the specified pledge"
            },
            "getPledgeAdmin(uint64)": {
              "notice": "A constant getter to check the details of a specified Admin"
            },
            "getPledgeDelegate(uint64,uint64)": {
              "notice": "//////////////////////////Getter to find Delegate w/ the Pledge ID & the Delegate index"
            },
            "initialize(address)": {
              "notice": "////////////"
            },
            "isProjectCanceled(uint64)": {
              "notice": "A getter to find if a specified Project has been canceled"
            },
            "isValidPlugin(address)": {
              "notice": "check if the contract at the provided address is in the plugin whitelist"
            },
            "mNormalizePledge(uint64[])": {
              "notice": "`mNormalizePledge` allows for multiple pledges to be  normalized efficiently"
            },
            "mTransfer(uint64,uint256[],uint64)": {
              "notice": "Transfers multiple amounts within multiple Pledges in an  efficient single call "
            },
            "mWithdraw(uint256[])": {
              "notice": "Authorizes multiple amounts within multiple Pledges to be  withdrawn from the `vault` in an efficient single call "
            },
            "normalizePledge(uint64)": {
              "notice": "////////////////Only affects pledges with the Pledged PledgeState for 2 things:   #1: Checks if the pledge should be committed. This means that       if the pledge has an intendedProject and it is past the       commitTime, it changes the owner to be the proposed project       (The UI will have to read the commit time and manually do what       this function does to the pledge for the end user       at the expiration of the commitTime)     ///   #2: Checks to make sure that if there has been a cancellation in the       chain of projects, the pledge's owner has been changed       appropriately.     /// This function can be called by anybody at anytime on any pledge.  In general it can be called to force the calls of the affected   plugins, which also need to be predicted by the UI"
            },
            "numberOfPledgeAdmins()": {
              "notice": "//////////////////////////A constant getter used to check how many total Admins exist"
            },
            "numberOfPledges()": {
              "notice": "/////////////////////////A constant getter that returns the total number of pledges"
            },
            "transfer(uint64,uint64,uint256,uint64)": {
              "notice": "Transfers amounts between pledges for internal accounting"
            },
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            },
            "updateDelegate(uint64,address,string,string,uint64)": {
              "notice": "Updates a Delegate's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Delegate"
            },
            "updateGiver(uint64,address,string,string,uint64)": {
              "notice": "Updates a Giver's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Giver"
            },
            "updateProject(uint64,address,string,string,uint64)": {
              "notice": "Updates a Project's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin or a parentProject,  and it must be called by the current address of the Project"
            },
            "useWhitelist(bool)": {
              "notice": "you better know what you're doing if you are going to disable it"
            },
            "withdraw(uint64,uint256)": {
              "notice": "Authorizes a payment be made from the `vault` can be used by the  Giver to veto a pre-committed donation from a Delegate to an  intendedProject"
            }
          }
        }
      }
    },
    "giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol": {
      "LiquidPledgingACLHelpers": {
        "abi": [],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a72305820787f7d1a7c751ed134a07aef55438a1a4fbd1180faed2990b448636ce00724a60029",
            "sourceMap": "26:482:30:-;;;;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600080fd00a165627a7a72305820787f7d1a7c751ed134a07aef55438a1a4fbd1180faed2990b448636ce00724a60029",
            "sourceMap": "26:482:30:-;;;;;"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "10600",
              "executionCost": "61",
              "totalCost": "10661"
            },
            "internal": {
              "arr(bool)": "infinite",
              "arr(uint64,uint64,address,uint256,address)": "infinite"
            }
          },
          "methodIdentifiers": {}
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":\"LiquidPledgingACLHelpers\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "giveth-liquidpledging/contracts/LiquidPledgingBase.sol": {
      "LiquidPledgingBase": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "whitelistDisabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "projectId",
                "type": "uint64"
              }
            ],
            "name": "isProjectCanceled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "PLUGIN_MANAGER_ROLE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfPledges",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              },
              {
                "name": "idxDelegate",
                "type": "uint64"
              }
            ],
            "name": "getPledgeDelegate",
            "outputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHashes",
                "type": "bytes32[]"
              }
            ],
            "name": "addValidPluginContracts",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "useWhitelist",
                "type": "bool"
              }
            ],
            "name": "useWhitelist",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              }
            ],
            "name": "getPledge",
            "outputs": [
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "owner",
                "type": "uint64"
              },
              {
                "name": "nDelegates",
                "type": "uint64"
              },
              {
                "name": "intendedProject",
                "type": "uint64"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "oldPledge",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "pledgeState",
                "type": "uint8"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "isValidPlugin",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              }
            ],
            "name": "normalizePledge",
            "outputs": [
              {
                "name": "",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addDelegate",
            "outputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfPledgeAdmins",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "removeValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addGiver",
            "outputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "projectAdmin",
                "type": "address"
              },
              {
                "name": "parentProject",
                "type": "uint64"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addProject",
            "outputs": [
              {
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "addValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addGiver",
            "outputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getCodeHash",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "removeValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_vault",
                "type": "address"
              }
            ],
            "name": "initialize",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "addValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateDelegate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateGiver",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idAdmin",
                "type": "uint64"
              }
            ],
            "name": "getPledgeAdmin",
            "outputs": [
              {
                "name": "adminType",
                "type": "uint8"
              },
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "parentProject",
                "type": "uint64"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idProject",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateProject",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "from",
                "type": "uint256"
              },
              {
                "indexed": true,
                "name": "to",
                "type": "uint256"
              },
              {
                "indexed": false,
                "name": "amount",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint256"
              }
            ],
            "name": "CancelProject",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "GiverAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "GiverUpdated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "DelegateAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "DelegateUpdated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "ProjectAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "ProjectUpdated",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "addDelegate(string,string,uint64,address)": {
              "params": {
                "commitTime": "Sets the length of time in seconds that this delegate  can be vetoed. Whenever this delegate is in a delegate chain the time  allowed to veto any event must be greater than or equal to this time.",
                "name": "The name used to identify the Delegate",
                "plugin": "This is Delegate's liquid pledge plugin allowing for  extended functionality",
                "url": "The link to the Delegate's profile often an IPFS hash"
              },
              "return": "idxDelegate The id number used to reference this Delegate within  the PLEDGE_ADMIN array"
            },
            "addGiver(string,string,uint64,address)": {
              "params": {
                "commitTime": "The length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project",
                "name": "The name used to identify the Giver",
                "plugin": "This is Giver's liquid pledge plugin allowing for  extended functionality",
                "url": "The link to the Giver's profile often an IPFS hash"
              },
              "return": "idGiver The id number used to reference this Admin"
            },
            "addProject(string,string,address,uint64,uint64,address)": {
              "params": {
                "commitTime": "Sets the length of time in seconds the Project has to   veto when the Project delegates to another Delegate and they pledge   those funds to a project",
                "name": "The name used to identify the Project",
                "parentProject": "The Admin id number for the parent project or 0 if  there is no parentProject",
                "plugin": "This is Project's liquid pledge plugin allowing for  extended functionality",
                "projectAdmin": "The address for the trusted project manager",
                "url": "The link to the Project's profile often an IPFS hash"
              },
              "return": "idProject The id number used to reference this Admin"
            },
            "addValidPluginContract(bytes32)": {
              "details": "add a contract to the plugin whitelist."
            },
            "addValidPluginInstance(address)": {
              "details": "adds an instance of a plugin to the whitelist"
            },
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "getCodeHash(address)": {
              "return": "the hash of the code for the given address"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "getPledge(uint64)": {
              "params": {
                "idPledge": "the id number of the pledge being queried"
              },
              "return": "the amount, owner, the number of delegates (but not the actual  delegates, the intendedProject (if any), the current commit time and  the previous pledge this pledge was derived from"
            },
            "getPledgeAdmin(uint64)": {
              "return": "addr Account or contract address for adminname Name of the pledgeAdminurl The link to the Project's profile often an IPFS hashcommitTime The length of time in seconds the Admin has to veto   when the Admin delegates to a Delegate and that Delegate pledges those   funds to a projectparentProject The Admin id number for the parent project or 0  if there is no parentProjectcanceled 0 for Delegates & Givers, true if a Project has been  canceledplugin This is Project's liquidPledging plugin allowing for  extended functionality"
            },
            "getPledgeDelegate(uint64,uint64)": {
              "params": {
                "idPledge": "The id number representing the pledge being queried",
                "idxDelegate": "The index number for the delegate in this Pledge "
              }
            },
            "initialize(address)": {
              "params": {
                "_vault": "The vault where the ETH backing the pledges is stored"
              }
            },
            "isProjectCanceled(uint64)": {
              "params": {
                "projectId": "The Admin id number used to specify the Project"
              },
              "return": "True if the Project has been canceled"
            },
            "normalizePledge(uint64)": {
              "params": {
                "idPledge": "This is the id of the pledge that will be normalized"
              },
              "return": "The normalized Pledge!"
            },
            "numberOfPledgeAdmins()": {
              "return": "The total number of admins (Givers, Delegates and Projects) ."
            },
            "numberOfPledges()": {
              "return": "The total number of Pledges in the system"
            },
            "removeValidPluginContract(bytes32)": {
              "details": "removes a contract from the plugin whitelist"
            },
            "removeValidPluginInstance(address)": {
              "details": "removes an instance of a plugin to the whitelist"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            },
            "updateDelegate(uint64,address,string,string,uint64)": {
              "params": {
                "idDelegate": "The Admin id number used to specify the Delegate",
                "newAddr": "The new address that represents this Delegate",
                "newCommitTime": "Sets the length of time in seconds that this  delegate can be vetoed. Whenever this delegate is in a delegate chain  the time allowed to veto any event must be greater than or equal to  this time.",
                "newName": "The new name used to identify the Delegate",
                "newUrl": "The new link to the Delegate's profile often an IPFS hash"
              }
            },
            "updateGiver(uint64,address,string,string,uint64)": {
              "params": {
                "idGiver": "This is the Admin id number used to specify the Giver",
                "newAddr": "The new address that represents this Giver",
                "newCommitTime": "Sets the length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project",
                "newName": "The new name used to identify the Giver",
                "newUrl": "The new link to the Giver's profile often an IPFS hash"
              }
            },
            "updateProject(uint64,address,string,string,uint64)": {
              "params": {
                "idProject": "The Admin id number used to specify the Project",
                "newAddr": "The new address that represents this Project",
                "newCommitTime": "Sets the length of time in seconds the Project has  to veto when the Project delegates to a Delegate and they pledge those  funds to a project",
                "newName": "The new name used to identify the Project",
                "newUrl": "The new link to the Project's profile often an IPFS hash"
              }
            },
            "useWhitelist(bool)": {
              "details": "enable/disable the plugin whitelist."
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526069805460ff19169055341561001957600080fd5b61369a806100286000396000f3006060604052600436106101be5763ffffffff60e060020a600035041663178e607981146101c35780631c8e8568146101e85780632101a6ad1461020f57806324fea3b01461022e5780632a8ec8cc146102415780632f6b64ca1461025457806332ce8ebc1461031057806332f0a3b514610330578063387402911461035f5780633f657a46146103775780634eafbcd51461040557806350f8a8031461042457806352dc7dcc1461045f5780635503d9ba146104a157806360b1e057146104b45780636293c702146104c75780636e802c6a146104e657806372116e92146105a057806379f4542e146105f15780637e7db6e1146106105780637f61fa931461062f57806380afdea81461067157806381ea4408146106845780638322fff2146106a35780638b3dd749146106b65780639b3fdf4c146106c95780639d4941d8146106dc578063a1658fad146106fb578063b12b5f761461075e578063c4d66de814610774578063c8ae070f14610793578063cc19ecf7146107a9578063d4aae0c4146107f5578063db7c231414610808578063eba8ba0614610854578063f6b24b1c146109aa578063f92a79ff146109f6578063fbfa77cf14610a47575b600080fd5b34156101ce57600080fd5b6101d6610a5a565b60405190815260200160405180910390f35b34156101f357600080fd5b6101fb610a7e565b604051901515815260200160405180910390f35b341561021a57600080fd5b6101fb6001604060020a0360043516610a87565b341561023957600080fd5b6101d6610b2e565b341561024c57600080fd5b6101d6610b50565b341561025f57600080fd5b6102796001604060020a0360043581169060243516610b5b565b6040516001604060020a0384168152600160a060020a038316602082015260606040820181815290820183818151815260200191508051906020019080838360005b838110156102d35780820151838201526020016102bb565b50505050905090810190601f1680156103005780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561031b57600080fd5b61032e6004803560248101910135610c89565b005b341561033b57600080fd5b610343610d23565b604051600160a060020a03909116815260200160405180910390f35b341561036a57600080fd5b61032e6004351515610da3565b341561038257600080fd5b6103966001604060020a0360043516610e09565b6040518881526001604060020a038089166020830152878116604083015286811660608301528581166080830152841660a0820152600160a060020a03831660c082015260e081018260028111156103ea57fe5b60ff1681526020019850505050505050505060405180910390f35b341561041057600080fd5b6101fb600160a060020a0360043516610fa9565b341561042f57600080fd5b6104436001604060020a0360043516611020565b6040516001604060020a03909116815260200160405180910390f35b341561046a57600080fd5b61044360246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a036064351661123d565b34156104ac57600080fd5b6101d66114cf565b34156104bf57600080fd5b6101d66114d9565b34156104d257600080fd5b61032e600160a060020a03600435166114fd565b34156104f157600080fd5b61044360048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650505083356001604060020a03169360200135600160a060020a0316925061155e915050565b34156105ab57600080fd5b6104436024600480358281019290820135918135918201910135600160a060020a036044358116906001604060020a036064358116916084359091169060a435166117c6565b34156105fc57600080fd5b61032e600160a060020a0360043516611c7d565b341561061b57600080fd5b6101fb600160a060020a0360043516611cf5565b341561063a57600080fd5b61044360246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a0360643516611cfb565b341561067c57600080fd5b6101d6611d77565b341561068f57600080fd5b6101d6600160a060020a0360043516611d7d565b34156106ae57600080fd5b610343611dff565b34156106c157600080fd5b6101d6611e04565b34156106d457600080fd5b6101d6611e0a565b34156106e757600080fd5b61032e600160a060020a0360043516611e2e565b341561070657600080fd5b6101fb60048035600160a060020a0316906024803591906064906044359081019083013580602080820201604051908101604052809392919081815260200183836020028082843750949650611fa695505050505050565b341561076957600080fd5b61032e6004356120e4565b341561077f57600080fd5b61032e600160a060020a036004351661213c565b341561079e57600080fd5b61032e6004356121a5565b34156107b457600080fd5b61032e600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612214565b341561080057600080fd5b61034361231d565b341561081357600080fd5b61032e600480356001604060020a039081169160248035600160a060020a03169260443580830193908101359260643590810192910135906084351661232c565b341561085f57600080fd5b6108736001604060020a0360043516612435565b6040518089600281111561088357fe5b60ff168152600160a060020a0389811660208301526001604060020a038781166080840152861660a083015284151560c0830152831660e08201526101008282038101604083019081529160608101910189818151815260200191508051906020019080838360005b838110156109045780820151838201526020016108ec565b50505050905090810190601f1680156109315780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561096757808201518382015260200161094f565b50505050905090810190601f1680156109945780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34156109b557600080fd5b61032e600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612609565b3415610a0157600080fd5b61034360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061271295505050505050565b3415610a5257600080fd5b6103436127ee565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b600080610a9383612802565b90506000815460ff166002811115610aa757fe5b1415610ab65760009150610b28565b6002815460ff166002811115610ac857fe5b14610acf57fe5b600181015468010000000000000000900460ff1615610af15760019150610b28565b60018101546001604060020a03161515610b0e5760009150610b28565b6001810154610b25906001604060020a0316610a87565b91505b50919050565b60405160008051602061362f8339815191528152601301604051809103902081565b606554600019015b90565b600080610b6661327a565b600080610b7287612848565b915081600101600187036001604060020a0316815481101515610b9157fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a03169450610bc585612802565b90508060000160019054906101000a9004600160a060020a03169350806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b5050505050925050509250925092565b600060405160008051602061362f83398151915281526013016040518091039020610cd433826000604051805910610cbe5750595b9080825280602002602001820160405250611fa6565b1515610cdf57600080fd5b600091505b60ff821683901015610d1d57610d12848460ff8516818110610d0257fe5b90506020020135600019166121a5565b600190910190610ce4565b50505050565b60008054600160a060020a03161515610d3b57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d8457600080fd5b6102c65a03f11515610d9557600080fd5b505050604051805191505090565b60405160008051602061362f83398151915281526013016040518091039020610deb33826000604051805910610cbe5750599080825280602002602001820160405250611fa6565b1515610df657600080fd5b506069805460ff19169115919091179055565b600080600080600080600080610e1d61328c565b610e268a612848565b61010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ebe57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411610e7b5790505b50505091835250506002828101546001604060020a0380821660208501526801000000000000000082048116604085015270010000000000000000000000000000000082048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019174010000000000000000000000000000000000000000900460ff1690811115610f5757fe5b6002811115610f6257fe5b90525090508051985080604001519750806020015151965080606001519550806080015194508060a0015193508060c0015192508060e00151915050919395975091939597565b606954600090819060ff1680610fc65750600160a060020a038316155b15610fd45760019150610b28565b600160a060020a03831660009081526068602052604090205460ff1615610ffe5760019150610b28565b61100783611d7d565b60009081526067602052604090205460ff169392505050565b60008060008061102f85612848565b92506000600384015474010000000000000000000000000000000000000000900460ff16600281111561105e57fe5b1461106b57849350611235565b60028301546000680100000000000000009091046001604060020a03161180156110bc5750600283015470010000000000000000000000000000000090046001604060020a03166110ba612879565b115b15611204576002830154600184018054611188926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561115457602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116111115790505b505050506002870154600388015460009250829160c060020a90046001604060020a031690600160a060020a03168261287d565b60028401549092506111e4906801000000000000000090046001604060020a031660006040518059106111b85750595b9080825280602002602001820160405250600386015460009081908790600160a060020a03168261287d565b90506111f585828560000154612bb0565b80945061120185612848565b92505b61120d85612c8e565b90506001604060020a03808216908616146112315761123185828560000154612bb0565b8093505b505050919050565b600061124882610fa9565b151561125357600080fd5b506064805490816001810161126883826132d8565b91600052602060002090600402016000610100604051908101604052806001815260200133600160a060020a03168152602001876001604060020a0316815260200160006001604060020a0316815260200160001515815260200186600160a060020a031681526020018b8b8080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff1916600183600281111561135957fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a0260008051602061364f833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020190805161144f929160200190613304565b5060e08201518160030190805161146a929160200190613304565b50505050806001604060020a03167fd921f0ff8d5f67ca22b52c5b4be3463a8cabd9d95c28a02dd7c86f9deb3329be86866040516020808252810182905280604081018484808284378201915050935050505060405180910390a29695505050505050565b6064546000190190565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b60405160008051602061362f8339815191528152601301604051809103902061152582612d56565b611530338383611fa6565b151561153b57600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b600061156982610fa9565b151561157457600080fd5b506064805490816001810161158983826132d8565b916000526020600020906004020160006101006040519081016040528060008152600160a060020a03808c1660208301526001604060020a03891660408301526000606083018190526080830152871660a082015260c081018a905260e00188905291905081518154829060ff1916600183600281111561160657fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a0260008051602061364f833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c0820151816002019080516116fc929160200190613304565b5060e082015181600301908051611717929160200190613304565b50505050806001604060020a03167fad9c62a4382fd0ddbc4a0cf6c2bc7df75b0b8beb786ff59014f39daaea7f232f8560405160208082528190810183818151815260200191508051906020019080838360005b8381101561178357808201518382015260200161176b565b50505050905090810190601f1680156117b05780820380516001836020036101000a031916815260200191505b509250505060405180910390a295945050505050565b6000806117d283610fa9565b15156117dd57600080fd5b6001604060020a038516156119ff576117f585612802565b905060146119ec826101006040519081016040528154909190829060ff16600281111561181e57fe5b600281111561182957fe5b81528154610100808204600160a060020a0390811660208086019190915260a860020a9093046001604060020a03908116604080870191909152600180880154928316606088015268010000000000000000830460ff1615156080880152690100000000000000000090920490921660a08601526002808701805460c090970196909592811615909402600019019093169290920491601f83018190048102019051908101604052809291908181526020018280546001816001161561010002031660029004801561193c5780601f106119115761010080835404028352916020019161193c565b820191906000526020600020905b81548152906001019060200180831161191f57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b505050505081525050612d76565b6001604060020a0316106119ff57600080fd5b6064805492508260018101611a1483826132d8565b9160005260206000209060040201600061010060405190810160405280600281526020018a600160a060020a03168152602001886001604060020a03168152602001896001604060020a0316815260200160001515815260200187600160a060020a031681526020018e8e8080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081526020018c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff19166001836002811115611b0457fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a0260008051602061364f833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611bfa929160200190613304565b5060e082015181600301908051611c15929160200190613304565b50505050816001604060020a03167f9958fc92731727637b02f1ac1e6caf2814442c27e1d962f0c477cd14280f586d89896040516020808252810182905280604081018484808284378201915050935050505060405180910390a25098975050505050505050565b60405160008051602061362f83398151915281526013016040518091039020611cc533826000604051805910610cbe5750599080825280602002602001820160405250611fa6565b1515611cd057600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b6000611d6c3388888080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505087878080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050868661155e565b979650505050505050565b60015481565b6000611d8761327a565b823b604051915080825280600060208401863c50806040518082805190602001908083835b60208310611dcb5780518252601f199092019160209182019101611dac565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b600080611e3a83611cf5565b1515611e4557600080fd5b611e4d610d23565b9150611e5882612dea565b1515611e6357600080fd5b600160a060020a0383161515611eb55781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515611eb057600080fd5b611fa1565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611f0c57600080fd5b6102c65a03f11515611f1d57600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611f8557600080fd5b6102c65a03f11515611f9657600080fd5b505050604051805150505b505050565b6000611fb061327a565b60008084511115611fc957835160200290508391508082525b600054600160a060020a031615806120da575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b83811015612070578082015183820152602001612058565b50505050905090810190601f16801561209d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156120be57600080fd5b6102c65a03f115156120cf57600080fd5b505050604051805190505b9695505050505050565b60405160008051602061362f8339815191528152601301604051809103902061210c82612e10565b612117338383611fa6565b151561212257600080fd5b50506000908152606760205260409020805460ff19169055565b6003541561214957600080fd5b600160a060020a038116151561215e57600080fd5b612166612e21565b6069805461010060a860020a031916610100600160a060020a0384160217905560016121936064826132d8565b5060016121a160658261337e565b5050565b60405160008051602061362f833981519152815260130160405180910390206121ed33826000604051805910610cbe5750599080825280602002602001820160405250611fa6565b15156121f857600080fd5b506000908152606760205260409020805460ff19166001179055565b600061221f88612802565b805490915033600160a060020a03908116610100909204161461224157600080fd5b6001815460ff16600281111561225357fe5b1461225d57600080fd5b805461010060a860020a031916610100600160a060020a038916021781556122896002820187876133aa565b506122986003820185856133aa565b5080546001604060020a0380841660a860020a0260008051602061364f83398151915290921691909117825588167f6586deed9fa035704e9886588d904801e7e86d1ebd926905fa03a0018531b2fd85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600054600160a060020a031681565b600061233788612802565b805490915033600160a060020a03908116610100909204161461235957600080fd5b6000815460ff16600281111561236b57fe5b1461237557600080fd5b805461010060a860020a031916610100600160a060020a038916021781556123a16002820187876133aa565b506123b06003820185856133aa565b5080546001604060020a0380841660a860020a0260008051602061364f83398151915290921691909117825588167f4b2f87168338ea08f27c7f7b2dfe4e61feb620ffe9a6a6a18afeaf94546075bf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b60008061244061327a565b61244861327a565b60008060008060006124598a612802565b80546002808301805460ff84169d5061010093849004600160a060020a03169c5093945092600181161590920260001901909116046020601f8201819004810201604051908101604052809291908181526020018280546001816001161561010002031660029004801561250e5780601f106124e35761010080835404028352916020019161250e565b820191906000526020600020905b8154815290600101906020018083116124f157829003601f168201915b50505050509650806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125ad5780601f10612582576101008083540402835291602001916125ad565b820191906000526020600020905b81548152906001019060200180831161259057829003601f168201915b505084546001909501549c9e9b9d50999b929a60a860020a9094046001604060020a039081169a5083169850505068010000000000000000810460ff16955069010000000000000000009004600160a060020a03169350915050565b600061261488612802565b805490915033600160a060020a03908116610100909204161461263657600080fd5b6002815460ff16600281111561264857fe5b1461265257600080fd5b805461010060a860020a031916610100600160a060020a0389160217815561267e6002820187876133aa565b5061268d6003820185856133aa565b5080546001604060020a0380841660a860020a0260008051602061364f83398151915290921691909117825588167fab039fa652845d2aa9439ffe6f2130ee7203ed63f29b71bed5b3b74f27c5870785856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600061271c612e3b565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561278357808201518382015260200161276b565b50505050905090810190601f1680156127b05780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156127ce57600080fd5b6102c65a03f115156127df57600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b6064546000906001604060020a0383161061281c57600080fd5b606480546001604060020a03841690811061283357fe5b90600052602060002090600402019050919050565b6065546000906001604060020a0383161061286257600080fd5b606580546001604060020a03841690811061283357fe5b4290565b6000806000888a898989898960405180888051906020019060200280838360005b838110156128b657808201518382015260200161289e565b50505060c060020a6001604060020a03808d168202959093019485528a83168102600886015289831681026010860152918816909102601884015250506c01000000000000000000000000600160a060020a03851602602082015260340182600281111561292057fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019750505050505050506040519081900390206000818152606660205260408120549193506001604060020a03909116915081111561298a57809250612ba3565b50606580546000838152606660205260409020805467ffffffffffffffff19166001604060020a0383161790558154909190600181016129ca838261337e565b9160005260206000209060040201600061010060405190810160405280600081526020018d81526020018e6001604060020a031681526020018c6001604060020a031681526020018b6001604060020a031681526020018a6001604060020a0316815260200189600160a060020a03168152602001886002811115612a4b57fe5b905291905081518155602082015181600101908051612a6e929160200190613418565b50604082015160028201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160020160086101000a8154816001604060020a0302191690836001604060020a0316021790555060808201518160020160106101000a8154816001604060020a0302191690836001604060020a0316021790555060a08201518160020160186101000a8154816001604060020a0302191690836001604060020a0316021790555060c082015160038201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560e082015160038201805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000836002811115612b9757fe5b02179055505050508092505b5050979650505050505050565b6000806000612bc26001878787612ed2565b9250846001604060020a0316866001604060020a03161415612be357612c86565b821515612bef57612c86565b612bf886612848565b9150612c0385612848565b825490915083901015612c1557600080fd5b815483900382558054830180825583901015612c3057600080fd5b846001604060020a0316866001604060020a03167faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f68560405190815260200160405180910390a3612c846000878786612ed2565b505b505050505050565b600080806001604060020a0384161515612cab5760009250612d4f565b612cb484612848565b6002810154909250612cce906001604060020a0316612802565b90506000815460ff166002811115612ce257fe5b1415612cf057839250612d4f565b6002815460ff166002811115612d0257fe5b14612d0957fe5b6002820154612d20906001604060020a0316610a87565b1515612d2e57839250612d4f565b6002820154612d4c9060c060020a90046001604060020a0316612c8e565b92505b5050919050565b612d5e61327a565b612d7082600160a060020a0316612ef8565b92915050565b600080600283516002811115612d8857fe5b14612d8f57fe5b82606001516001604060020a03161515612dac5760019150610b28565b612db98360600151612802565b9050612de0816101006040519081016040528154909190829060ff16600281111561181e57fe5b6001019392505050565b600080600160a060020a0383161515612e065760009150610b28565b50506000903b1190565b612e1861327a565b612d7082612ef8565b60035415612e2e57600080fd5b612e36612f3f565b600355565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612eae57600080fd5b6102c65a03f11515612ebf57600080fd5b50505060405180519250829150505b5090565b80612ee08585808685612f43565b9050612eef8584868685612f43565b95945050505050565b612f0061327a565b6001604051805910612f0f5750595b908082528060200260200182016040525090508181600081518110612f3057fe5b60209081029091010152919050565b4390565b600080600080866001604060020a0316886001604060020a031614612f6a57610100612f6d565b60005b61ffff169250849350612f7f88612848565b60028101546003820154919350612fb1918b916001604060020a0316908a908a908890600160a060020a03168a6130b5565b9350600090505b60018201546001604060020a03821610156130445761303a8983600101836001604060020a0316815481101515612feb57fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a031689898588016001018760030160009054906101000a9004600160a060020a03168a6130b5565b9350600101612fb8565b60028201546000680100000000000000009091046001604060020a031611156130a957600282015460038301546130a6918b91680100000000000000009091046001604060020a0316908a908a9060ff890190600160a060020a03168a6130b5565b93505b50505095945050505050565b806000806130c289612802565b600181015490915069010000000000000000009004600160a060020a0316158015906130ee5750600083115b15612ba35789156131c657600181015469010000000000000000009004600160a060020a03166331c51a008a8a8a8a8a8a60006040516020015260405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401602060405180830381600087803b151561319557600080fd5b6102c65a03f115156131a657600080fd5b5050506040518051925050828211156131be57600080fd5b819250612ba3565b600181015469010000000000000000009004600160a060020a0316630da5e18c8a8a8a8a8a8a60405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401600060405180830381600087803b151561325957600080fd5b6102c65a03f1151561326a57600080fd5b5050505050979650505050505050565b60206040519081016040526000815290565b61010060405190810160405280600081526020016132a861327a565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b815481835581811511611fa157600402816004028360005260206000209182019101611fa191906134cc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061334557805160ff1916838001178555613372565b82800160010185558215613372579182015b82811115613372578251825591602001919060010190613357565b50612ece929150613533565b815481835581811511611fa157600402816004028360005260206000209182019101611fa1919061354d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133eb5782800160ff19823516178555613372565b82800160010185558215613372579182015b828111156133725782358255916020019190600101906133fd565b828054828255906000526020600020906003016004900481019282156134c05791602002820160005b8382111561348b57835183826101000a8154816001604060020a0302191690836001604060020a031602179055509260200192600801602081600701049283019260010302613441565b80156134be5782816101000a8154906001604060020a03021916905560080160208160070104928301926001030261348b565b505b50612ece92915061359d565b610b5891905b80821115612ece5780547fffffff000000000000000000000000000000000000000000000000000000000090811682556001820180549091169055600061351c60028301826135c2565b61352a6003830160006135c2565b506004016134d2565b610b5891905b80821115612ece5760008155600101613539565b610b5891905b80821115612ece57600080825561356d6001830182613609565b506000600282015560038101805474ffffffffffffffffffffffffffffffffffffffffff19169055600401613553565b610b5891905b80821115612ece57805467ffffffffffffffff191681556001016135a3565b50805460018160011615610100020316600290046000825580601f106135e85750613606565b601f0160209004906000526020600020908101906136069190613533565b50565b50805460008255600301600490049060005260206000209081019061360691906135335600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000ffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffa165627a7a7230582012279f7f3d0b28733620f7d2ff5d020d1c2d993616a34351ad39e6d82e2afbf00029",
            "sourceMap": "1133:23347:31:-;;;2538:37:33;;;-1:-1:-1;;2538:37:33;;;1133:23347:31;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106101be5763ffffffff60e060020a600035041663178e607981146101c35780631c8e8568146101e85780632101a6ad1461020f57806324fea3b01461022e5780632a8ec8cc146102415780632f6b64ca1461025457806332ce8ebc1461031057806332f0a3b514610330578063387402911461035f5780633f657a46146103775780634eafbcd51461040557806350f8a8031461042457806352dc7dcc1461045f5780635503d9ba146104a157806360b1e057146104b45780636293c702146104c75780636e802c6a146104e657806372116e92146105a057806379f4542e146105f15780637e7db6e1146106105780637f61fa931461062f57806380afdea81461067157806381ea4408146106845780638322fff2146106a35780638b3dd749146106b65780639b3fdf4c146106c95780639d4941d8146106dc578063a1658fad146106fb578063b12b5f761461075e578063c4d66de814610774578063c8ae070f14610793578063cc19ecf7146107a9578063d4aae0c4146107f5578063db7c231414610808578063eba8ba0614610854578063f6b24b1c146109aa578063f92a79ff146109f6578063fbfa77cf14610a47575b600080fd5b34156101ce57600080fd5b6101d6610a5a565b60405190815260200160405180910390f35b34156101f357600080fd5b6101fb610a7e565b604051901515815260200160405180910390f35b341561021a57600080fd5b6101fb6001604060020a0360043516610a87565b341561023957600080fd5b6101d6610b2e565b341561024c57600080fd5b6101d6610b50565b341561025f57600080fd5b6102796001604060020a0360043581169060243516610b5b565b6040516001604060020a0384168152600160a060020a038316602082015260606040820181815290820183818151815260200191508051906020019080838360005b838110156102d35780820151838201526020016102bb565b50505050905090810190601f1680156103005780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b341561031b57600080fd5b61032e6004803560248101910135610c89565b005b341561033b57600080fd5b610343610d23565b604051600160a060020a03909116815260200160405180910390f35b341561036a57600080fd5b61032e6004351515610da3565b341561038257600080fd5b6103966001604060020a0360043516610e09565b6040518881526001604060020a038089166020830152878116604083015286811660608301528581166080830152841660a0820152600160a060020a03831660c082015260e081018260028111156103ea57fe5b60ff1681526020019850505050505050505060405180910390f35b341561041057600080fd5b6101fb600160a060020a0360043516610fa9565b341561042f57600080fd5b6104436001604060020a0360043516611020565b6040516001604060020a03909116815260200160405180910390f35b341561046a57600080fd5b61044360246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a036064351661123d565b34156104ac57600080fd5b6101d66114cf565b34156104bf57600080fd5b6101d66114d9565b34156104d257600080fd5b61032e600160a060020a03600435166114fd565b34156104f157600080fd5b61044360048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f016020809104026020016040519081016040528181529291906020840183838082843750949650505083356001604060020a03169360200135600160a060020a0316925061155e915050565b34156105ab57600080fd5b6104436024600480358281019290820135918135918201910135600160a060020a036044358116906001604060020a036064358116916084359091169060a435166117c6565b34156105fc57600080fd5b61032e600160a060020a0360043516611c7d565b341561061b57600080fd5b6101fb600160a060020a0360043516611cf5565b341561063a57600080fd5b61044360246004803582810192908201359181359182019101356001604060020a0360443516600160a060020a0360643516611cfb565b341561067c57600080fd5b6101d6611d77565b341561068f57600080fd5b6101d6600160a060020a0360043516611d7d565b34156106ae57600080fd5b610343611dff565b34156106c157600080fd5b6101d6611e04565b34156106d457600080fd5b6101d6611e0a565b34156106e757600080fd5b61032e600160a060020a0360043516611e2e565b341561070657600080fd5b6101fb60048035600160a060020a0316906024803591906064906044359081019083013580602080820201604051908101604052809392919081815260200183836020028082843750949650611fa695505050505050565b341561076957600080fd5b61032e6004356120e4565b341561077f57600080fd5b61032e600160a060020a036004351661213c565b341561079e57600080fd5b61032e6004356121a5565b34156107b457600080fd5b61032e600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612214565b341561080057600080fd5b61034361231d565b341561081357600080fd5b61032e600480356001604060020a039081169160248035600160a060020a03169260443580830193908101359260643590810192910135906084351661232c565b341561085f57600080fd5b6108736001604060020a0360043516612435565b6040518089600281111561088357fe5b60ff168152600160a060020a0389811660208301526001604060020a038781166080840152861660a083015284151560c0830152831660e08201526101008282038101604083019081529160608101910189818151815260200191508051906020019080838360005b838110156109045780820151838201526020016108ec565b50505050905090810190601f1680156109315780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561096757808201518382015260200161094f565b50505050905090810190601f1680156109945780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34156109b557600080fd5b61032e600480356001604060020a039081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516612609565b3415610a0157600080fd5b61034360046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061271295505050505050565b3415610a5257600080fd5b6103436127ee565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b600080610a9383612802565b90506000815460ff166002811115610aa757fe5b1415610ab65760009150610b28565b6002815460ff166002811115610ac857fe5b14610acf57fe5b600181015468010000000000000000900460ff1615610af15760019150610b28565b60018101546001604060020a03161515610b0e5760009150610b28565b6001810154610b25906001604060020a0316610a87565b91505b50919050565b60405160008051602061362f8339815191528152601301604051809103902081565b606554600019015b90565b600080610b6661327a565b600080610b7287612848565b915081600101600187036001604060020a0316815481101515610b9157fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a03169450610bc585612802565b90508060000160019054906101000a9004600160a060020a03169350806002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c795780601f10610c4e57610100808354040283529160200191610c79565b820191906000526020600020905b815481529060010190602001808311610c5c57829003601f168201915b5050505050925050509250925092565b600060405160008051602061362f83398151915281526013016040518091039020610cd433826000604051805910610cbe5750595b9080825280602002602001820160405250611fa6565b1515610cdf57600080fd5b600091505b60ff821683901015610d1d57610d12848460ff8516818110610d0257fe5b90506020020135600019166121a5565b600190910190610ce4565b50505050565b60008054600160a060020a03161515610d3b57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610d8457600080fd5b6102c65a03f11515610d9557600080fd5b505050604051805191505090565b60405160008051602061362f83398151915281526013016040518091039020610deb33826000604051805910610cbe5750599080825280602002602001820160405250611fa6565b1515610df657600080fd5b506069805460ff19169115919091179055565b600080600080600080600080610e1d61328c565b610e268a612848565b61010060405190810160405290816000820154815260200160018201805480602002602001604051908101604052809291908181526020018280548015610ebe57602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a031681526020019060080190602082600701049283019260010382029150808411610e7b5790505b50505091835250506002828101546001604060020a0380821660208501526801000000000000000082048116604085015270010000000000000000000000000000000082048116606085015260c060020a9091041660808301526003830154600160a060020a03811660a084015260c09092019174010000000000000000000000000000000000000000900460ff1690811115610f5757fe5b6002811115610f6257fe5b90525090508051985080604001519750806020015151965080606001519550806080015194508060a0015193508060c0015192508060e00151915050919395975091939597565b606954600090819060ff1680610fc65750600160a060020a038316155b15610fd45760019150610b28565b600160a060020a03831660009081526068602052604090205460ff1615610ffe5760019150610b28565b61100783611d7d565b60009081526067602052604090205460ff169392505050565b60008060008061102f85612848565b92506000600384015474010000000000000000000000000000000000000000900460ff16600281111561105e57fe5b1461106b57849350611235565b60028301546000680100000000000000009091046001604060020a03161180156110bc5750600283015470010000000000000000000000000000000090046001604060020a03166110ba612879565b115b15611204576002830154600184018054611188926001604060020a0316919060208082020160405190810160405280929190818152602001828054801561115457602002820191906000526020600020906000905b82829054906101000a90046001604060020a03166001604060020a0316815260200190600801906020826007010492830192600103820291508084116111115790505b505050506002870154600388015460009250829160c060020a90046001604060020a031690600160a060020a03168261287d565b60028401549092506111e4906801000000000000000090046001604060020a031660006040518059106111b85750595b9080825280602002602001820160405250600386015460009081908790600160a060020a03168261287d565b90506111f585828560000154612bb0565b80945061120185612848565b92505b61120d85612c8e565b90506001604060020a03808216908616146112315761123185828560000154612bb0565b8093505b505050919050565b600061124882610fa9565b151561125357600080fd5b506064805490816001810161126883826132d8565b91600052602060002090600402016000610100604051908101604052806001815260200133600160a060020a03168152602001876001604060020a0316815260200160006001604060020a0316815260200160001515815260200186600160a060020a031681526020018b8b8080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff1916600183600281111561135957fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a0260008051602061364f833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020190805161144f929160200190613304565b5060e08201518160030190805161146a929160200190613304565b50505050806001604060020a03167fd921f0ff8d5f67ca22b52c5b4be3463a8cabd9d95c28a02dd7c86f9deb3329be86866040516020808252810182905280604081018484808284378201915050935050505060405180910390a29695505050505050565b6064546000190190565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b60405160008051602061362f8339815191528152601301604051809103902061152582612d56565b611530338383611fa6565b151561153b57600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b600061156982610fa9565b151561157457600080fd5b506064805490816001810161158983826132d8565b916000526020600020906004020160006101006040519081016040528060008152600160a060020a03808c1660208301526001604060020a03891660408301526000606083018190526080830152871660a082015260c081018a905260e00188905291905081518154829060ff1916600183600281111561160657fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a0260008051602061364f833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c0820151816002019080516116fc929160200190613304565b5060e082015181600301908051611717929160200190613304565b50505050806001604060020a03167fad9c62a4382fd0ddbc4a0cf6c2bc7df75b0b8beb786ff59014f39daaea7f232f8560405160208082528190810183818151815260200191508051906020019080838360005b8381101561178357808201518382015260200161176b565b50505050905090810190601f1680156117b05780820380516001836020036101000a031916815260200191505b509250505060405180910390a295945050505050565b6000806117d283610fa9565b15156117dd57600080fd5b6001604060020a038516156119ff576117f585612802565b905060146119ec826101006040519081016040528154909190829060ff16600281111561181e57fe5b600281111561182957fe5b81528154610100808204600160a060020a0390811660208086019190915260a860020a9093046001604060020a03908116604080870191909152600180880154928316606088015268010000000000000000830460ff1615156080880152690100000000000000000090920490921660a08601526002808701805460c090970196909592811615909402600019019093169290920491601f83018190048102019051908101604052809291908181526020018280546001816001161561010002031660029004801561193c5780601f106119115761010080835404028352916020019161193c565b820191906000526020600020905b81548152906001019060200180831161191f57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156119de5780601f106119b3576101008083540402835291602001916119de565b820191906000526020600020905b8154815290600101906020018083116119c157829003601f168201915b505050505081525050612d76565b6001604060020a0316106119ff57600080fd5b6064805492508260018101611a1483826132d8565b9160005260206000209060040201600061010060405190810160405280600281526020018a600160a060020a03168152602001886001604060020a03168152602001896001604060020a0316815260200160001515815260200187600160a060020a031681526020018e8e8080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081526020018c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff19166001836002811115611b0457fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a0319909116178155604082015181546001604060020a039190911660a860020a0260008051602061364f833981519152909116178155606082015160018201805467ffffffffffffffff19166001604060020a03929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611bfa929160200190613304565b5060e082015181600301908051611c15929160200190613304565b50505050816001604060020a03167f9958fc92731727637b02f1ac1e6caf2814442c27e1d962f0c477cd14280f586d89896040516020808252810182905280604081018484808284378201915050935050505060405180910390a25098975050505050505050565b60405160008051602061362f83398151915281526013016040518091039020611cc533826000604051805910610cbe5750599080825280602002602001820160405250611fa6565b1515611cd057600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b6000611d6c3388888080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505087878080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050868661155e565b979650505050505050565b60015481565b6000611d8761327a565b823b604051915080825280600060208401863c50806040518082805190602001908083835b60208310611dcb5780518252601f199092019160209182019101611dac565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b600080611e3a83611cf5565b1515611e4557600080fd5b611e4d610d23565b9150611e5882612dea565b1515611e6357600080fd5b600160a060020a0383161515611eb55781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f193505050501515611eb057600080fd5b611fa1565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b1515611f0c57600080fd5b6102c65a03f11515611f1d57600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515611f8557600080fd5b6102c65a03f11515611f9657600080fd5b505050604051805150505b505050565b6000611fb061327a565b60008084511115611fc957835160200290508391508082525b600054600160a060020a031615806120da575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b83811015612070578082015183820152602001612058565b50505050905090810190601f16801561209d5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156120be57600080fd5b6102c65a03f115156120cf57600080fd5b505050604051805190505b9695505050505050565b60405160008051602061362f8339815191528152601301604051809103902061210c82612e10565b612117338383611fa6565b151561212257600080fd5b50506000908152606760205260409020805460ff19169055565b6003541561214957600080fd5b600160a060020a038116151561215e57600080fd5b612166612e21565b6069805461010060a860020a031916610100600160a060020a0384160217905560016121936064826132d8565b5060016121a160658261337e565b5050565b60405160008051602061362f833981519152815260130160405180910390206121ed33826000604051805910610cbe5750599080825280602002602001820160405250611fa6565b15156121f857600080fd5b506000908152606760205260409020805460ff19166001179055565b600061221f88612802565b805490915033600160a060020a03908116610100909204161461224157600080fd5b6001815460ff16600281111561225357fe5b1461225d57600080fd5b805461010060a860020a031916610100600160a060020a038916021781556122896002820187876133aa565b506122986003820185856133aa565b5080546001604060020a0380841660a860020a0260008051602061364f83398151915290921691909117825588167f6586deed9fa035704e9886588d904801e7e86d1ebd926905fa03a0018531b2fd85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600054600160a060020a031681565b600061233788612802565b805490915033600160a060020a03908116610100909204161461235957600080fd5b6000815460ff16600281111561236b57fe5b1461237557600080fd5b805461010060a860020a031916610100600160a060020a038916021781556123a16002820187876133aa565b506123b06003820185856133aa565b5080546001604060020a0380841660a860020a0260008051602061364f83398151915290921691909117825588167f4b2f87168338ea08f27c7f7b2dfe4e61feb620ffe9a6a6a18afeaf94546075bf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b60008061244061327a565b61244861327a565b60008060008060006124598a612802565b80546002808301805460ff84169d5061010093849004600160a060020a03169c5093945092600181161590920260001901909116046020601f8201819004810201604051908101604052809291908181526020018280546001816001161561010002031660029004801561250e5780601f106124e35761010080835404028352916020019161250e565b820191906000526020600020905b8154815290600101906020018083116124f157829003601f168201915b50505050509650806003018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156125ad5780601f10612582576101008083540402835291602001916125ad565b820191906000526020600020905b81548152906001019060200180831161259057829003601f168201915b505084546001909501549c9e9b9d50999b929a60a860020a9094046001604060020a039081169a5083169850505068010000000000000000810460ff16955069010000000000000000009004600160a060020a03169350915050565b600061261488612802565b805490915033600160a060020a03908116610100909204161461263657600080fd5b6002815460ff16600281111561264857fe5b1461265257600080fd5b805461010060a860020a031916610100600160a060020a0389160217815561267e6002820187876133aa565b5061268d6003820185856133aa565b5080546001604060020a0380841660a860020a0260008051602061364f83398151915290921691909117825588167fab039fa652845d2aa9439ffe6f2130ee7203ed63f29b71bed5b3b74f27c5870785856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600061271c612e3b565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561278357808201518382015260200161276b565b50505050905090810190601f1680156127b05780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156127ce57600080fd5b6102c65a03f115156127df57600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b6064546000906001604060020a0383161061281c57600080fd5b606480546001604060020a03841690811061283357fe5b90600052602060002090600402019050919050565b6065546000906001604060020a0383161061286257600080fd5b606580546001604060020a03841690811061283357fe5b4290565b6000806000888a898989898960405180888051906020019060200280838360005b838110156128b657808201518382015260200161289e565b50505060c060020a6001604060020a03808d168202959093019485528a83168102600886015289831681026010860152918816909102601884015250506c01000000000000000000000000600160a060020a03851602602082015260340182600281111561292057fe5b60ff167f01000000000000000000000000000000000000000000000000000000000000000281526001019750505050505050506040519081900390206000818152606660205260408120549193506001604060020a03909116915081111561298a57809250612ba3565b50606580546000838152606660205260409020805467ffffffffffffffff19166001604060020a0383161790558154909190600181016129ca838261337e565b9160005260206000209060040201600061010060405190810160405280600081526020018d81526020018e6001604060020a031681526020018c6001604060020a031681526020018b6001604060020a031681526020018a6001604060020a0316815260200189600160a060020a03168152602001886002811115612a4b57fe5b905291905081518155602082015181600101908051612a6e929160200190613418565b50604082015160028201805467ffffffffffffffff19166001604060020a039290921691909117905560608201518160020160086101000a8154816001604060020a0302191690836001604060020a0316021790555060808201518160020160106101000a8154816001604060020a0302191690836001604060020a0316021790555060a08201518160020160186101000a8154816001604060020a0302191690836001604060020a0316021790555060c082015160038201805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a039290921691909117905560e082015160038201805474ff0000000000000000000000000000000000000000191674010000000000000000000000000000000000000000836002811115612b9757fe5b02179055505050508092505b5050979650505050505050565b6000806000612bc26001878787612ed2565b9250846001604060020a0316866001604060020a03161415612be357612c86565b821515612bef57612c86565b612bf886612848565b9150612c0385612848565b825490915083901015612c1557600080fd5b815483900382558054830180825583901015612c3057600080fd5b846001604060020a0316866001604060020a03167faf6151f5085accf2d57e1e7bf7601d3b3982e0de7e9a90f032f8554de9c104f68560405190815260200160405180910390a3612c846000878786612ed2565b505b505050505050565b600080806001604060020a0384161515612cab5760009250612d4f565b612cb484612848565b6002810154909250612cce906001604060020a0316612802565b90506000815460ff166002811115612ce257fe5b1415612cf057839250612d4f565b6002815460ff166002811115612d0257fe5b14612d0957fe5b6002820154612d20906001604060020a0316610a87565b1515612d2e57839250612d4f565b6002820154612d4c9060c060020a90046001604060020a0316612c8e565b92505b5050919050565b612d5e61327a565b612d7082600160a060020a0316612ef8565b92915050565b600080600283516002811115612d8857fe5b14612d8f57fe5b82606001516001604060020a03161515612dac5760019150610b28565b612db98360600151612802565b9050612de0816101006040519081016040528154909190829060ff16600281111561181e57fe5b6001019392505050565b600080600160a060020a0383161515612e065760009150610b28565b50506000903b1190565b612e1861327a565b612d7082612ef8565b60035415612e2e57600080fd5b612e36612f3f565b600355565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515612eae57600080fd5b6102c65a03f11515612ebf57600080fd5b50505060405180519250829150505b5090565b80612ee08585808685612f43565b9050612eef8584868685612f43565b95945050505050565b612f0061327a565b6001604051805910612f0f5750595b908082528060200260200182016040525090508181600081518110612f3057fe5b60209081029091010152919050565b4390565b600080600080866001604060020a0316886001604060020a031614612f6a57610100612f6d565b60005b61ffff169250849350612f7f88612848565b60028101546003820154919350612fb1918b916001604060020a0316908a908a908890600160a060020a03168a6130b5565b9350600090505b60018201546001604060020a03821610156130445761303a8983600101836001604060020a0316815481101515612feb57fe5b90600052602060002090600491828204019190066008029054906101000a90046001604060020a031689898588016001018760030160009054906101000a9004600160a060020a03168a6130b5565b9350600101612fb8565b60028201546000680100000000000000009091046001604060020a031611156130a957600282015460038301546130a6918b91680100000000000000009091046001604060020a0316908a908a9060ff890190600160a060020a03168a6130b5565b93505b50505095945050505050565b806000806130c289612802565b600181015490915069010000000000000000009004600160a060020a0316158015906130ee5750600083115b15612ba35789156131c657600181015469010000000000000000009004600160a060020a03166331c51a008a8a8a8a8a8a60006040516020015260405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401602060405180830381600087803b151561319557600080fd5b6102c65a03f115156131a657600080fd5b5050506040518051925050828211156131be57600080fd5b819250612ba3565b600181015469010000000000000000009004600160a060020a0316630da5e18c8a8a8a8a8a8a60405160e060020a63ffffffff89160281526001604060020a0396871660048201529486166024860152928516604485015293166064830152600160a060020a03909216608482015260a481019190915260c401600060405180830381600087803b151561325957600080fd5b6102c65a03f1151561326a57600080fd5b5050505050979650505050505050565b60206040519081016040526000815290565b61010060405190810160405280600081526020016132a861327a565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b815481835581811511611fa157600402816004028360005260206000209182019101611fa191906134cc565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061334557805160ff1916838001178555613372565b82800160010185558215613372579182015b82811115613372578251825591602001919060010190613357565b50612ece929150613533565b815481835581811511611fa157600402816004028360005260206000209182019101611fa1919061354d565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106133eb5782800160ff19823516178555613372565b82800160010185558215613372579182015b828111156133725782358255916020019190600101906133fd565b828054828255906000526020600020906003016004900481019282156134c05791602002820160005b8382111561348b57835183826101000a8154816001604060020a0302191690836001604060020a031602179055509260200192600801602081600701049283019260010302613441565b80156134be5782816101000a8154906001604060020a03021916905560080160208160070104928301926001030261348b565b505b50612ece92915061359d565b610b5891905b80821115612ece5780547fffffff000000000000000000000000000000000000000000000000000000000090811682556001820180549091169055600061351c60028301826135c2565b61352a6003830160006135c2565b506004016134d2565b610b5891905b80821115612ece5760008155600101613539565b610b5891905b80821115612ece57600080825561356d6001830182613609565b506000600282015560038101805474ffffffffffffffffffffffffffffffffffffffffff19169055600401613553565b610b5891905b80821115612ece57805467ffffffffffffffff191681556001016135a3565b50805460018160011615610100020316600290046000825580601f106135e85750613606565b601f0160209004906000526020600020908101906136069190613533565b50565b50805460008255600301600490049060005260206000209081019061360691906135335600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000ffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffa165627a7a7230582012279f7f3d0b28733620f7d2ff5d020d1c2d993616a34351ad39e6d82e2afbf00029",
            "sourceMap": "1133:23347:31:-;;;;;;;;;-1:-1:-1;;;1133:23347:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11584:478:34;;;;;;;;;;-1:-1:-1;;;;;11584:478:34;;;;;1061:78:32;;;;;;;;;;;;1446:98:35;;;;;;;;;;;;2289:399:31;;;;;;;;;;-1:-1:-1;;;;;2289:399:31;;;;;;;;;;;;;-1:-1:-1;;;;;2289:399:31;;;;-1:-1:-1;;;;;2289:399:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1746:226:32;;;;;;;;;;;;;;;;;;;;;;;1226::8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1226:226:8;;;;;;;;;;;;;;2602:126:32;;;;;;;;;;;;;;;;1905:613:35;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2828:450:32;;;;;;;;;;-1:-1:-1;;;;;2828:450:32;;;;;3758:1304:31;;;;;;;;;;-1:-1:-1;;;;;3758:1304:31;;;;;;;;-1:-1:-1;;;;;3758:1304:31;;;;;;;;;;;;;;4892:589:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4892:589:34;;;-1:-1:-1;;;;;4892:589:34;;;;;9934:101;;;;;;;;;;;;565:118:18;;;;;;;;;;;;2304:150:32;;;;;;;;;;-1:-1:-1;;;;;2304:150:32;;;;;2442:611:34;;;;;;;;;;;;;-1:-1:-1;;;;;2442:611:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2442:611:34;;-1:-1:-1;;;2442:611:34;;-1:-1:-1;;;;;2442:611:34;;;;;-1:-1:-1;;;;;2442:611:34;;-1:-1:-1;2442:611:34;;-1:-1:-1;;2442:611:34;7548:901;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7548:901:34;;;;;-1:-1:-1;;;;;7548:901:34;;;;;;;;;;;;;;;;1218:134:32;;;;;;;;;;-1:-1:-1;;;;;1218:134:32;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;2123:313:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2123:313:34;;;-1:-1:-1;;;;;2123:313:34;;;;;113:20:7;;;;;;;;;;;;3356:485:32;;;;;;;;;;-1:-1:-1;;;;;3356:485:32;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;689:115:18;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;2049:174:32;;;;;;;;;;;;;;1703:258:31;;;;;;;;;;-1:-1:-1;;;;;1703:258:31;;;;;1592:148:32;;;;;;;;;;;;;;6235:542:34;;;;;;;;;;;;;-1:-1:-1;;;;;6235:542:34;;;;;;;-1:-1:-1;;;;;6235:542:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;86:21:7;;;;;;;;;;;;3693:522:34;;;;;;;;;;;;;-1:-1:-1;;;;;3693:522:34;;;;;;;-1:-1:-1;;;;;3693:522:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;10803:574;;;;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10803:574:34;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9153:531:34;;;;;;;;;;;;;-1:-1:-1;;;;;9153:531:34;;;;;;;-1:-1:-1;;;;;9153:531:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;2582:21:33;;;;;;;;;;;;448:111:18;493:66;448:111;:::o;2538:37:33:-;;;;;;:::o;11584:478:34:-;11658:4;11678:21;11702;11713:9;11702:10;:21::i;:::-;11678:45;-1:-1:-1;11753:21:34;11738:11;;;;:36;;;;;;;;;11734:79;;;11797:5;11790:12;;;;11734:79;11845:23;11830:11;;;;:38;;;;;;;;;11823:46;;;;11884:10;;;;;;;;;11880:52;;;11917:4;11910:11;;;;11880:52;11945:15;;;;-1:-1:-1;;;;;11945:15:34;:20;11941:63;;;11988:5;11981:12;;;;11941:63;12039:15;;;;12021:34;;-1:-1:-1;;;;;12039:15:34;12021:17;:34::i;:::-;12014:41;;11584:478;;;;;:::o;1061:78:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;1061:78;:::o;1446:98:35:-;1519:7;:14;-1:-1:-1;;1519:18:35;1446:98;;:::o;2289:399:31:-;2384:17;2411:12;2433:11;;:::i;:::-;2461:16;2568:28;2480:21;2492:8;2480:11;:21::i;:::-;2461:40;;2524:1;:17;;2556:1;2542:11;:15;-1:-1:-1;;;;;2524:34:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2524:34:31;2511:47;;2599:22;2610:10;2599;:22::i;:::-;2568:53;;2638:8;:13;;;;;;;;;;-1:-1:-1;;;;;2638:13:31;2631:20;;2668:8;:13;;2661:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2289:399;;;;;;;:::o;1746:226:32:-;1855:7;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;1865:1:32;1855:11;;1850:116;1868:25;;;;;;1850:116;;;1914:41;1937:14;;:17;;;;;;;;;;;;;;;;;;;1914:22;:41::i;:::-;1895:3;;;;;1850:116;;;1746:226;;;;:::o;1226::8:-;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1226:226:8;:::o;2602:126:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;2688:17:32;:33;;-1:-1:-1;;2688:33:32;2708:13;;2688:33;;;;;;2602:126::o;1905:613:35:-;1972:11;1993:12;2015:17;2042:22;2074:17;2101:16;2127:13;2150:23;2190:15;;:::i;:::-;2208:21;2220:8;2208:11;:21::i;:::-;2190:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2190:39:35;-1:-1:-1;;;;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2190:39:35;;;-1:-1:-1;;2190:39:35;;;;;-1:-1:-1;;;;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2190:39:35;;;;;;;;;;;;-1:-1:-1;;;;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2190:39:35;-1:-1:-1;2190:39:35;2248:8;2239:17;;2274:1;:7;;;2266:15;;2311:1;:17;;;:24;2291:45;;2364:1;:17;;;2346:35;;2404:1;:12;;;2391:25;;2438:1;:11;;;2426:23;;2467:1;:7;;;2459:15;;2498:1;:13;;;2484:27;;1905:613;;;;;;;;;;:::o;2828:450:32:-;2905:17;;2885:4;;;;2905:17;;;:32;;-1:-1:-1;;;;;;2926:11:32;;;2905:32;2901:74;;;2960:4;2953:11;;;;2901:74;-1:-1:-1;;;;;3028:29:32;;;;;;:23;:29;;;;;;;;3024:71;;;3080:4;3073:11;;;;3024:71;3199:17;3211:4;3199:11;:17::i;:::-;3234:37;;;;:23;:37;;;;;;;;;2828:450;-1:-1:-1;;;2828:450:32:o;3758:1304:31:-;3815:6;3833:16;4231;4486:15;3852:21;3864:8;3852:11;:21::i;:::-;3833:40;-1:-1:-1;4019:19:31;4002:13;;;;;;;;;:36;;;;;;;;;3998:82;;4061:8;4054:15;;;;3998:82;4161:17;;;;4181:1;4161:17;;;;-1:-1:-1;;;;;4161:17:31;:21;4160:55;;;;-1:-1:-1;4202:12:31;;;;;;;-1:-1:-1;;;;;4202:12:31;4189:10;:8;:10::i;:::-;:25;4160:55;4156:714;;;4287:7;;;;;4312:17;;4250:222;;;;-1:-1:-1;;;;;4287:7:31;;4312:17;4250:222;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4250:222:31;-1:-1:-1;;;;;4250:222:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;4385:11:31;;;;4414:7;;;;4347:1;;-1:-1:-1;4347:1:31;;-1:-1:-1;;;4385:11:31;;-1:-1:-1;;;;;4385:11:31;;-1:-1:-1;;;;;4414:7:31;4347:1;4250:19;:222::i;:::-;4541:17;;;;4231:241;;-1:-1:-1;4504:228:31;;4541:17;;;-1:-1:-1;;;;;4541:17:31;4589:1;4576:15;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;4674:7:31;;;;4609:1;;;;4647:9;;-1:-1:-1;;;;;4674:7:31;4609:1;4504:19;:228::i;:::-;4486:246;;4746:41;4758:8;4768;4778:1;:8;;;4746:11;:41::i;:::-;4812:8;4801:19;;4838:21;4850:8;4838:11;:21::i;:::-;4834:25;;4156:714;4891:37;4919:8;4891:27;:37::i;:::-;4880:48;-1:-1:-1;;;;;;4942:20:31;;;;;;;4938:92;;4978:41;4990:8;5000;5010:1;:8;;;4978:11;:41::i;:::-;5047:8;5040:15;;3758:1304;;;;;;;:::o;4892:589:34:-;5043:17;5085:21;5099:6;5085:13;:21::i;:::-;5077:30;;;;;;;;-1:-1:-1;5154:6:34;:13;;;;5179:254;;;;5154:6;5179:254;;:::i;:::-;;;;;;;;;;;;5204:219;;;;;;;;;5233:24;5204:219;;;;5275:10;-1:-1:-1;;;;;5204:219:34;;;;;5303:10;-1:-1:-1;;;;;5204:219:34;;;;;5331:1;-1:-1:-1;;;;;5204:219:34;;;;;5350:5;5204:219;;;;;;5373:6;-1:-1:-1;;;;;5204:219:34;;;;;5397:4;;5204:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5419:3;;5204:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5204:219:34;;;;-1:-1:-1;5179:254:34;;;-1:-1:-1;5179:254:34;;-1:-1:-1;;5179:254:34;;;;;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;;;-1:-1:-1;;;;;;5179:254:34;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;-1:-1:-1;;;5179:254:34;-1:-1:-1;;;;;;;;;;;5179:254:34;;;;;;;;;;;;;;;-1:-1:-1;;5179:254:34;-1:-1:-1;;;;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;;-1:-1:-1;;;;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;5458:10;-1:-1:-1;;;;;5444:30:34;;5470:3;;5444:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4892:589;;;;;;;;:::o;9934:101::-;10011:6;:13;-1:-1:-1;;10011:17:34;9934:101;:::o;565:118:18:-;617:66;565:118;:::o;2304:150:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2389:9;2393:4;2389:3;:9::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;;;;;;2410:29:32;2442:5;2410:29;;;:23;:29;;;;;:37;;-1:-1:-1;;2410:37:32;;;2304:150::o;2442:611:34:-;2610:14;2648:21;2662:6;2648:13;:21::i;:::-;2640:30;;;;;;;;-1:-1:-1;2714:6:34;:13;;;;2766:245;;;;2714:6;2766:245;;:::i;:::-;;;;;;;;;;;;2791:210;;;;;;;;;2820:21;2791:210;;-1:-1:-1;;;;;2791:210:34;;;;;;;-1:-1:-1;;;;;2791:210:34;;;;;;-1:-1:-1;2791:210:34;;;;;;;;;;;;;;;;;;;;;;;;;;;2766:245;;-1:-1:-1;2766:245:34;;;;;;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;;;-1:-1:-1;;;;;;2766:245:34;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;-1:-1:-1;;;2766:245:34;-1:-1:-1;;;;;;;;;;;2766:245:34;;;;;;;;;;;;;;;-1:-1:-1;;2766:245:34;-1:-1:-1;;;;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;;-1:-1:-1;;;;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3033:7;-1:-1:-1;;;;;3022:24:34;;3042:3;3022:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2442:611:34;;;;;;;:::o;7548:901::-;7758:16;7870:21;7799;7813:6;7799:13;:21::i;:::-;7791:30;;;;;;;;-1:-1:-1;;;;;7836:18:34;;;7832:250;;7894:25;7905:13;7894:10;:25::i;:::-;7870:49;;1096:2;8028:19;8045:1;8028:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8028:19:34;;;;;;;;;;;-1:-1:-1;;;8028:19:34;;;-1:-1:-1;;;;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:19::i;:::-;-1:-1:-1;;;;;8028:42:34;;8020:51;;;;;;8111:6;:13;;;-1:-1:-1;8111:13:34;8136:267;;;;8111:6;8136:267;;:::i;:::-;;;;;;;;;;;;8161:232;;;;;;;;;8190:23;8161:232;;;;8231:12;-1:-1:-1;;;;;8161:232:34;;;;;8261:10;-1:-1:-1;;;;;8161:232:34;;;;;8289:13;-1:-1:-1;;;;;8161:232:34;;;;;8320:5;8161:232;;;;;;8343:6;-1:-1:-1;;;;;8161:232:34;;;;;8367:4;;8161:232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8389:3;;8161:232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8161:232:34;;;;-1:-1:-1;8136:267:34;;;-1:-1:-1;8136:267:34;;-1:-1:-1;;8136:267:34;;;;;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;;;-1:-1:-1;;;;;;8136:267:34;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;-1:-1:-1;;;8136:267:34;-1:-1:-1;;;;;;;;;;;8136:267:34;;;;;;;;;;;;;;;-1:-1:-1;;8136:267:34;-1:-1:-1;;;;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;;-1:-1:-1;;;;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;8427:9;-1:-1:-1;;;;;8414:28:34;;8438:3;;8414:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7548:901;;;;;;;;;;;:::o;1218:134:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;;;;;;1309:29:32;;;;;:23;:29;;;;;:36;;-1:-1:-1;;1309:36:32;1341:4;1309:36;;;1218:134::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;2123:313:34:-;2271:14;2308:121;2330:10;2354:4;;2308:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2372:3;;2308:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2389:10;2413:6;2308:8;:121::i;:::-;2301:128;2123:313;-1:-1:-1;;;;;;;2123:313:34:o;113:20:7:-;;;;:::o;3356:485:32:-;3411:7;3430:19;;:::i;:::-;3551:4;3539:11;3627:4;3621:5;3611:21;;3660:4;3652:6;3645;3786:4;3783:1;3776:4;3768:6;3764:3;3758:4;3746:11;3468:333;3827:6;3817:17;;;;;;;;;;;;;36:153:-1;66:2;58;;36:153;;182:3;176:5;164:6;;-1:-1;;139:3;;;;98:2;89:3;;;;114;36:153;;;274:1;267:3;263:2;259:3;254;250;246;315:4;311:3;305;299:5;295:3;356:4;350:3;344:5;340:3;377:2;365:6;;;-1:-1;;;3:399;;;;;-1:-1;3:399;;-1:-1;;3:399;;;;;;3810:24:32;;3356:485;;;;:::o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;689:115:18:-;738:66;689:115;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;2049:174:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2142:17;2146:12;2142:3;:17::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;2211:5:32;2171:37;;;:23;:37;;;;;:45;;-1:-1:-1;;2171:45:32;;;2049:174::o;1703:258:31:-;140:19:13;;:24;132:33;;;;;;-1:-1:-1;;;;;1773:13:31;;;;1765:22;;;;;;1797:13;:11;:13::i;:::-;1821:5;:24;;-1:-1:-1;;;;;;1821:24:31;;-1:-1:-1;;;;;1821:24:31;;;;;;-1:-1:-1;1856:17:31;:6;-1:-1:-1;1856:17:31;:::i;:::-;-1:-1:-1;1926:1:31;1909:18;:7;1926:1;1909:18;:::i;:::-;;1703:258;:::o;1592:148:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;1689:37:32;;;;:23;:37;;;;;:44;;-1:-1:-1;;1689:44:32;1729:4;1689:44;;;1592:148::o;6235:542:34:-;6418:28;6449:22;6460:10;6449;:22::i;:::-;6503:13;;6418:53;;-1:-1:-1;6489:10:34;-1:-1:-1;;;;;6489:27:34;;;6503:13;;;;;6489:27;6481:36;;;;;;6557:24;6535:18;;;;:46;;;;;;;;;6527:55;;;;;;6592:23;;-1:-1:-1;;;;;;6592:23:34;;-1:-1:-1;;;;;6592:23:34;;;;;;6625;:13;;;6641:7;;6625:23;:::i;:::-;-1:-1:-1;6658:21:34;:12;;;6673:6;;6658:21;:::i;:::-;-1:-1:-1;6689:35:34;;-1:-1:-1;;;;;6689:35:34;;;-1:-1:-1;;;6689:35:34;-1:-1:-1;;;;;;;;;;;6689:35:34;;;;;;;;;6735;;;6763:6;;6735:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6235:542;;;;;;;;:::o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;3693:522:34:-;3870:25;3898:19;3909:7;3898:10;:19::i;:::-;3949:10;;3870:47;;-1:-1:-1;3935:10:34;-1:-1:-1;;;;;3935:24:34;;;3949:10;;;;;3935:24;3927:33;;;;;;3997:21;3978:15;;;;:40;;;;;;;;;3970:49;;;;;;4048:20;;-1:-1:-1;;;;;;4048:20:34;;-1:-1:-1;;;;;4048:20:34;;;;;;4078;:10;;;4091:7;;4078:20;:::i;:::-;-1:-1:-1;4108:18:34;:9;;;4120:6;;4108:18;:::i;:::-;-1:-1:-1;4136:32:34;;-1:-1:-1;;;;;4136:32:34;;;-1:-1:-1;;;4136:32:34;-1:-1:-1;;;;;;;;;;;4136:32:34;;;;;;;;;4179:29;;;4201:6;;4179:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3693:522;;;;;;;;:::o;10803:574::-;10875:25;10910:12;10932:11;;:::i;:::-;10953:10;;:::i;:::-;10973:17;11000:20;11030:13;11053:14;11084:21;11108:19;11119:7;11108:10;:19::i;:::-;11149:11;;11200:6;;;;11193:13;;11149:11;;;;-1:-1:-1;11149:11:34;11177:6;;;;-1:-1:-1;;;;;11177:6:34;;-1:-1:-1;11149:11:34;;-1:-1:-1;11200:6:34;11149:11;11193:13;;;;;;-1:-1:-1;;11193:13:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11222:1;:5;;11216:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11250:12:34;;11288:15;;;;;10803:574;;;;-1:-1:-1;10803:574:34;;11216:11;;-1:-1:-1;;;11250:12:34;;;-1:-1:-1;;;;;11250:12:34;;;;-1:-1:-1;11288:15:34;;;-1:-1:-1;;;11324:10:34;;;;;;-1:-1:-1;11361:8:34;;;-1:-1:-1;;;;;11361:8:34;;-1:-1:-1;10803:574:34;-1:-1:-1;;10803:574:34:o;9153:531::-;9334:27;9364:21;9375:9;9364:10;:21::i;:::-;9418:12;;9334:51;;-1:-1:-1;9404:10:34;-1:-1:-1;;;;;9404:26:34;;;9418:12;;;;;9404:26;9396:35;;;;;;9470:23;9449:17;;;;:44;;;;;;;;;9441:53;;;;;;9505:22;;-1:-1:-1;;;;;;9505:22:34;;-1:-1:-1;;;;;9505:22:34;;;;;;9537;:12;;;9552:7;;9537:22;:::i;:::-;-1:-1:-1;9569:20:34;:11;;;9583:6;;9569:20;:::i;:::-;-1:-1:-1;9599:34:34;;-1:-1:-1;;;;;9599:34:34;;;-1:-1:-1;;;9599:34:34;-1:-1:-1;;;;;;;;;;;9599:34:34;;;;;;;;;9644:33;;;9670:6;;9644:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9153:531;;;;;;;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;2582:21:33:-;;;;;;-1:-1:-1;;;;;2582:21:33;;:::o;12300:161:34:-;12408:6;:13;12359:11;;-1:-1:-1;;;;;12398:23:34;;;12390:32;;;;;;12439:6;:15;;-1:-1:-1;;;;;12439:15:34;;;;;;;;;;;;;;;;;;;12432:22;;12300:161;;;:::o;4558::35:-;4663:7;:14;4618:6;;-1:-1:-1;;;;;4652:25:35;;;4644:34;;;;;;4695:7;:17;;-1:-1:-1;;;;;4695:17:35;;;;;;;;24402:76:31;24468:3;24402:76;:::o;3617:842:35:-;3861:6;3883:15;3998:9;3911:15;3928:5;3935:15;3952:10;3964:9;3975:5;3982;3901:87;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;-1:-1;;;;;;;;;;;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1;;3:109;-1:-1;;;;;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4010:20:35;;;;:11;:20;;;;;;3:109:-1;;-1:-1;;;;;;4010:20:35;;;;-1:-1:-1;4044:6:35;;4040:46;;;4073:2;4066:9;;;;4040:46;-1:-1:-1;4108:7:35;:14;;4133:20;;;;:11;:20;;;;;:25;;-1:-1:-1;;4133:25:35;-1:-1:-1;;;;;4133:25:35;;;;;4168:265;;4108:14;;:7;-1:-1:-1;4168:265:35;;;4108:7;4168:265;;:::i;:::-;;;;;;;;;;;;4194:229;;;;;;;;;4218:1;4194:229;;;;4237:15;4194:229;;;;4270:5;-1:-1:-1;;;;;4194:229:35;;;;;4293:15;-1:-1:-1;;;;;4194:229:35;;;;;4326:10;-1:-1:-1;;;;;4194:229:35;;;;;4354:9;-1:-1:-1;;;;;4194:229:35;;;;;4381:5;-1:-1:-1;;;;;4194:229:35;;;;;4404:5;4194:229;;;;;;;;;;4168:265;;-1:-1:-1;4168:265:35;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;4168:265:35;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4168:265:35;;;;;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4168:265:35;;;;;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4168:265:35;;;;;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;-1:-1:-1;;4168:265:35;-1:-1:-1;;;;;4168:265:35;;;;;;;;;;;;;;;;;;;-1:-1:-1;;4168:265:35;;;;;;;;;;;;;;;;;;;4450:2;4443:9;;3617:842;;;;;;;;;;;;:::o;16445:573:31:-;16523:11;16698:20;16748:18;16537:37;16550:4;16556;16562:2;16566:7;16537:12;:37::i;:::-;16523:51;;16596:2;-1:-1:-1;;;;;16588:10:31;:4;-1:-1:-1;;;;;16588:10:31;;16584:47;;;16614:7;;16584:47;16644:11;;16640:48;;;16671:7;;16640:48;16721:17;16733:4;16721:11;:17::i;:::-;16698:40;;16769:15;16781:2;16769:11;:15::i;:::-;16803:12;;16748:36;;-1:-1:-1;16803:22:31;;;;16795:31;;;;;;16836:22;;;;;;;16868:20;;;;;;;16906;;;;16898:29;;;;;;16953:2;-1:-1:-1;;;;;16938:26:31;16947:4;-1:-1:-1;;;;;16938:26:31;;16957:6;16938:26;;;;;;;;;;;;;;16974:37;16987:5;16994:4;17000:2;17004:6;16974:12;:37::i;:::-;;16445:573;;;;;;;:::o;18001:583::-;18091:6;;;-1:-1:-1;;;;;18117:13:31;;;18113:52;;;18153:1;18146:8;;;;18113:52;18194:21;18206:8;18194:11;:21::i;:::-;18264:7;;;;18175:40;;-1:-1:-1;18253:19:31;;-1:-1:-1;;;;;18264:7:31;18253:10;:19::i;:::-;18225:47;-1:-1:-1;18314:21:31;18295:15;;;;:40;;;;;;;;;18291:86;;;18358:8;18351:15;;;;18291:86;18413:23;18394:15;;;;:42;;;;;;;;;18387:50;;;;18470:7;;;;18452:26;;-1:-1:-1;;;;;18470:7:31;18452:17;:26::i;:::-;18451:27;18447:73;;;18501:8;18494:15;;;;18447:73;18565:11;;;;18537:40;;-1:-1:-1;;;18565:11:31;;-1:-1:-1;;;;;18565:11:31;18537:27;:40::i;:::-;18530:47;;18001:583;;;;;;:::o;355:101:2:-;403:11;;:::i;:::-;433:16;445:2;-1:-1:-1;;;;;437:11:2;433:3;:16::i;:::-;426:23;355:101;-1:-1:-1;;355:101:2:o;12677:316:34:-;12740:6;;12780:23;12765:1;:11;:38;;;;;;;;;12758:46;;;;12819:1;:15;;;-1:-1:-1;;;;;12819:20:34;;12815:60;;;12862:1;12855:9;;;;12815:60;12914:27;12925:1;:15;;;12914:10;:27::i;:::-;12885:56;;12958:24;12975:6;12958:24;;;;;;;;;;;;;;;;;;;;;;;;;12985:1;12958:28;;12677:316;-1:-1:-1;;;12677:316:34:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;-1:-1:-1;;289:1:14;244:11;;282:8;;53:244::o;116:101:2:-;164:11;;:::i;:::-;194:16;206:2;194:3;:16::i;576:96:13:-;140:19;;:24;132:33;;;;;;649:16;:14;:16::i;:::-;627:19;:38;576:96::o;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1195:37:16;;-1:-1:-1;;1088:200:16;;;:::o;23635:649:31:-;23826:6;23911:145;23943:6;23963:10;;24011:8;23826:6;23911:18;:145::i;:::-;23895:161;;24134:143;24166:6;24186:8;24208:10;24232:8;24254:13;24134:18;:143::i;:::-;24118:159;23635:649;-1:-1:-1;;;;;23635:649:31:o;1359:117:2:-;1407:11;;:::i;:::-;1448:1;1434:16;;;;;;;;;;;;;;;;;;;;;;;;1430:20;;1467:2;1460:1;1462;1460:4;;;;;;;;;;;;;;;;:9;1359:117;;-1:-1:-1;1359:117:2:o;856:94:13:-;931:12;856:94;:::o;21548:1549:31:-;21719:18;21856:13;21946:16;22298:8;21884:10;-1:-1:-1;;;;;21872:22:31;:8;-1:-1:-1;;;;;21872:22:31;;:32;;21901:3;21872:32;;;21897:1;21872:32;21856:48;;;;21930:6;21914:22;;21965:21;21977:8;21965:11;:21::i;:::-;22105:7;;;;22192;;;;21946:40;;-1:-1:-1;22060:176:31;;22085:6;;-1:-1:-1;;;;;22105:7:31;;22126:10;;22150:8;;22172:6;;-1:-1:-1;;;;;22192:7:31;22213:13;22060:11;:176::i;:::-;22044:192;;22309:1;22298:12;;22293:324;22316:17;;;:24;-1:-1:-1;;;;;22312:28:31;;;22293:324;;;22377:229;22406:6;22430:1;:17;;22448:1;-1:-1:-1;;;;;22430:20:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;22430:20:31;22468:10;22496:8;22531:1;22522:6;:10;22535:1;22522:14;22554:1;:7;;;;;;;;;;-1:-1:-1;;;;;22554:7:31;22579:13;22377:11;:229::i;:::-;22361:245;-1:-1:-1;22342:3:31;;22293:324;;;22803:17;;;;22823:1;22803:17;;;;-1:-1:-1;;;;;22803:17:31;:21;22799:292;;;22909:17;;;;23028:7;;;;22856:224;;22885:6;;22909:17;;;;-1:-1:-1;;;;;22909:17:31;;22944:10;;22972:8;;23007:3;22998:12;;;-1:-1:-1;;;;;23028:7:31;23053:13;22856:11;:224::i;:::-;22840:240;;22799:292;21548:1549;;;;;;;;;;:::o;19555:1287::-;19840:6;19765:18;;19884:19;19895:7;19884:10;:19::i;:::-;20007:12;;;;;;-1:-1:-1;20007:12:31;;;-1:-1:-1;;;;;20007:12:31;19999:26;;;;:47;;;20045:1;20029:13;:17;19999:47;19995:841;;;20199:6;20195:631;;;20237:12;;;;;;;-1:-1:-1;;;;;20237:12:31;:27;20286:7;20315:10;20347:8;20377:7;20406:5;20433:6;20237:220;;;;;;;;-1:-1:-1;;;20237:220:31;;;;;;-1:-1:-1;;;;;20237:220:31;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20237:220:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;20483:26:31;;;;20475:35;;;;;;20544:9;20528:25;;20195:631;;;20592:12;;;;;;;-1:-1:-1;;;;;20592:12:31;:26;20640:7;20669:10;20701:8;20731:7;20760:5;20787:6;20592:219;;-1:-1:-1;;;20592:219:31;;;;;;-1:-1:-1;;;;;20592:219:31;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;20592:219:31;;;;;;;;;;;;;;;;-1:-1:-1;20592:219:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;19555:1287;;;;;;;;;;;:::o;1133:23347::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1133:23347:31;;;-1:-1:-1;1133:23347:31;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1133:23347:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1133:23347:31;;;;;-1:-1:-1;;;;;1133:23347:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1133:23347:31;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1133:23347:31;;;-1:-1:-1;1133:23347:31;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;1133:23347:31;;;;;;;;;;-1:-1:-1;;1133:23347:31;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1133:23347:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;:::i"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "2795600",
              "executionCost": "23258",
              "totalCost": "2818858"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "236",
              "ETH()": "820",
              "EVMSCRIPT_REGISTRY_APP()": "786",
              "EVMSCRIPT_REGISTRY_APP_ID()": "544",
              "PLUGIN_MANAGER_ROLE()": "infinite",
              "addDelegate(string,string,uint64,address)": "infinite",
              "addGiver(address,string,string,uint64,address)": "infinite",
              "addGiver(string,string,uint64,address)": "infinite",
              "addProject(string,string,address,uint64,uint64,address)": "infinite",
              "addValidPluginContract(bytes32)": "infinite",
              "addValidPluginContracts(bytes32[])": "infinite",
              "addValidPluginInstance(address)": "infinite",
              "allowRecoverability(address)": "743",
              "appId()": "898",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "getCodeHash(address)": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "964",
              "getPledge(uint64)": "infinite",
              "getPledgeAdmin(uint64)": "infinite",
              "getPledgeDelegate(uint64,uint64)": "infinite",
              "getRecoveryVault()": "infinite",
              "initialize(address)": "infinite",
              "isProjectCanceled(uint64)": "infinite",
              "isValidPlugin(address)": "infinite",
              "kernel()": "1293",
              "normalizePledge(uint64)": "infinite",
              "numberOfPledgeAdmins()": "731",
              "numberOfPledges()": "534",
              "removeValidPluginContract(bytes32)": "infinite",
              "removeValidPluginInstance(address)": "infinite",
              "transferToVault(address)": "infinite",
              "updateDelegate(uint64,address,string,string,uint64)": "infinite",
              "updateGiver(uint64,address,string,string,uint64)": "infinite",
              "updateProject(uint64,address,string,string,uint64)": "infinite",
              "useWhitelist(bool)": "infinite",
              "vault()": "1414",
              "whitelistDisabled()": "470"
            },
            "internal": {
              "_appendDelegate(uint64,uint256,uint64)": "infinite",
              "_callPlugin(bool,uint64,uint64,uint64,uint64,address,uint256)": "infinite",
              "_callPlugins(bool,uint64,uint64,uint256)": "infinite",
              "_callPluginsPledge(bool,uint64,uint64,uint64,uint256)": "infinite",
              "_checkAdminOwner(uint64)": "infinite",
              "_doTransfer(uint64,uint64,uint256)": "infinite",
              "_getOldestPledgeNotCanceled(uint64)": "infinite",
              "_getTime()": "14",
              "_maxCommitTime(struct LiquidPledgingStorage.Pledge memory)": "infinite",
              "_proposeAssignProject(uint64,uint256,uint64)": "infinite",
              "_transfer(uint64,uint64,uint256,uint64)": "infinite",
              "_transferOwnershipToGiver(uint64,uint256,uint64)": "infinite",
              "_transferOwnershipToProject(uint64,uint256,uint64)": "infinite",
              "_undelegate(uint64,uint256,uint256)": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "PLUGIN_MANAGER_ROLE()": "24fea3b0",
            "addDelegate(string,string,uint64,address)": "52dc7dcc",
            "addGiver(address,string,string,uint64,address)": "6e802c6a",
            "addGiver(string,string,uint64,address)": "7f61fa93",
            "addProject(string,string,address,uint64,uint64,address)": "72116e92",
            "addValidPluginContract(bytes32)": "c8ae070f",
            "addValidPluginContracts(bytes32[])": "32ce8ebc",
            "addValidPluginInstance(address)": "79f4542e",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "getCodeHash(address)": "81ea4408",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getPledge(uint64)": "3f657a46",
            "getPledgeAdmin(uint64)": "eba8ba06",
            "getPledgeDelegate(uint64,uint64)": "2f6b64ca",
            "getRecoveryVault()": "32f0a3b5",
            "initialize(address)": "c4d66de8",
            "isProjectCanceled(uint64)": "2101a6ad",
            "isValidPlugin(address)": "4eafbcd5",
            "kernel()": "d4aae0c4",
            "normalizePledge(uint64)": "50f8a803",
            "numberOfPledgeAdmins()": "5503d9ba",
            "numberOfPledges()": "2a8ec8cc",
            "removeValidPluginContract(bytes32)": "b12b5f76",
            "removeValidPluginInstance(address)": "6293c702",
            "transferToVault(address)": "9d4941d8",
            "updateDelegate(uint64,address,string,string,uint64)": "cc19ecf7",
            "updateGiver(uint64,address,string,string,uint64)": "db7c2314",
            "updateProject(uint64,address,string,string,uint64)": "f6b24b1c",
            "useWhitelist(bool)": "38740291",
            "vault()": "fbfa77cf",
            "whitelistDisabled()": "1c8e8568"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"isProjectCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLUGIN_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPledges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"},{\"name\":\"idxDelegate\",\"type\":\"uint64\"}],\"name\":\"getPledgeDelegate\",\"outputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addValidPluginContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"useWhitelist\",\"type\":\"bool\"}],\"name\":\"useWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"}],\"name\":\"getPledge\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"uint64\"},{\"name\":\"nDelegates\",\"type\":\"uint64\"},{\"name\":\"intendedProject\",\"type\":\"uint64\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"oldPledge\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"pledgeState\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidPlugin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"}],\"name\":\"normalizePledge\",\"outputs\":[{\"name\":\"\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPledgeAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addGiver\",\"outputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"projectAdmin\",\"type\":\"address\"},{\"name\":\"parentProject\",\"type\":\"uint64\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addGiver\",\"outputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCodeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"removeValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"addValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateGiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idAdmin\",\"type\":\"uint64\"}],\"name\":\"getPledgeAdmin\",\"outputs\":[{\"name\":\"adminType\",\"type\":\"uint8\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"parentProject\",\"type\":\"uint64\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint256\"}],\"name\":\"CancelProject\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idGiver\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"GiverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idGiver\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"GiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DelegateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProjectUpdated\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addDelegate(string,string,uint64,address)\":{\"params\":{\"commitTime\":\"Sets the length of time in seconds that this delegate  can be vetoed. Whenever this delegate is in a delegate chain the time  allowed to veto any event must be greater than or equal to this time.\",\"name\":\"The name used to identify the Delegate\",\"plugin\":\"This is Delegate's liquid pledge plugin allowing for  extended functionality\",\"url\":\"The link to the Delegate's profile often an IPFS hash\"},\"return\":\"idxDelegate The id number used to reference this Delegate within  the PLEDGE_ADMIN array\"},\"addGiver(string,string,uint64,address)\":{\"params\":{\"commitTime\":\"The length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project\",\"name\":\"The name used to identify the Giver\",\"plugin\":\"This is Giver's liquid pledge plugin allowing for  extended functionality\",\"url\":\"The link to the Giver's profile often an IPFS hash\"},\"return\":\"idGiver The id number used to reference this Admin\"},\"addProject(string,string,address,uint64,uint64,address)\":{\"params\":{\"commitTime\":\"Sets the length of time in seconds the Project has to   veto when the Project delegates to another Delegate and they pledge   those funds to a project\",\"name\":\"The name used to identify the Project\",\"parentProject\":\"The Admin id number for the parent project or 0 if  there is no parentProject\",\"plugin\":\"This is Project's liquid pledge plugin allowing for  extended functionality\",\"projectAdmin\":\"The address for the trusted project manager\",\"url\":\"The link to the Project's profile often an IPFS hash\"},\"return\":\"idProject The id number used to reference this Admin\"},\"addValidPluginContract(bytes32)\":{\"details\":\"add a contract to the plugin whitelist.\"},\"addValidPluginInstance(address)\":{\"details\":\"adds an instance of a plugin to the whitelist\"},\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"getCodeHash(address)\":{\"return\":\"the hash of the code for the given address\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getPledge(uint64)\":{\"params\":{\"idPledge\":\"the id number of the pledge being queried\"},\"return\":\"the amount, owner, the number of delegates (but not the actual  delegates, the intendedProject (if any), the current commit time and  the previous pledge this pledge was derived from\"},\"getPledgeAdmin(uint64)\":{\"return\":\"addr Account or contract address for adminname Name of the pledgeAdminurl The link to the Project's profile often an IPFS hashcommitTime The length of time in seconds the Admin has to veto   when the Admin delegates to a Delegate and that Delegate pledges those   funds to a projectparentProject The Admin id number for the parent project or 0  if there is no parentProjectcanceled 0 for Delegates & Givers, true if a Project has been  canceledplugin This is Project's liquidPledging plugin allowing for  extended functionality\"},\"getPledgeDelegate(uint64,uint64)\":{\"params\":{\"idPledge\":\"The id number representing the pledge being queried\",\"idxDelegate\":\"The index number for the delegate in this Pledge \"}},\"initialize(address)\":{\"params\":{\"_vault\":\"The vault where the ETH backing the pledges is stored\"}},\"isProjectCanceled(uint64)\":{\"params\":{\"projectId\":\"The Admin id number used to specify the Project\"},\"return\":\"True if the Project has been canceled\"},\"normalizePledge(uint64)\":{\"params\":{\"idPledge\":\"This is the id of the pledge that will be normalized\"},\"return\":\"The normalized Pledge!\"},\"numberOfPledgeAdmins()\":{\"return\":\"The total number of admins (Givers, Delegates and Projects) .\"},\"numberOfPledges()\":{\"return\":\"The total number of Pledges in the system\"},\"removeValidPluginContract(bytes32)\":{\"details\":\"removes a contract from the plugin whitelist\"},\"removeValidPluginInstance(address)\":{\"details\":\"removes an instance of a plugin to the whitelist\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"updateDelegate(uint64,address,string,string,uint64)\":{\"params\":{\"idDelegate\":\"The Admin id number used to specify the Delegate\",\"newAddr\":\"The new address that represents this Delegate\",\"newCommitTime\":\"Sets the length of time in seconds that this  delegate can be vetoed. Whenever this delegate is in a delegate chain  the time allowed to veto any event must be greater than or equal to  this time.\",\"newName\":\"The new name used to identify the Delegate\",\"newUrl\":\"The new link to the Delegate's profile often an IPFS hash\"}},\"updateGiver(uint64,address,string,string,uint64)\":{\"params\":{\"idGiver\":\"This is the Admin id number used to specify the Giver\",\"newAddr\":\"The new address that represents this Giver\",\"newCommitTime\":\"Sets the length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project\",\"newName\":\"The new name used to identify the Giver\",\"newUrl\":\"The new link to the Giver's profile often an IPFS hash\"}},\"updateProject(uint64,address,string,string,uint64)\":{\"params\":{\"idProject\":\"The Admin id number used to specify the Project\",\"newAddr\":\"The new address that represents this Project\",\"newCommitTime\":\"Sets the length of time in seconds the Project has  to veto when the Project delegates to a Delegate and they pledge those  funds to a project\",\"newName\":\"The new name used to identify the Project\",\"newUrl\":\"The new link to the Project's profile often an IPFS hash\"}},\"useWhitelist(bool)\":{\"details\":\"enable/disable the plugin whitelist.\"}}},\"userdoc\":{\"methods\":{\"addDelegate(string,string,uint64,address)\":{\"notice\":\"Creates a Delegate Admin with the `msg.sender` as the Admin addr\"},\"addGiver(string,string,uint64,address)\":{\"notice\":\"/////////////////Creates a Giver Admin with the `msg.sender` as the Admin address\"},\"addProject(string,string,address,uint64,uint64,address)\":{\"notice\":\"Creates a Project Admin with the `msg.sender` as the Admin addr\"},\"addValidPluginContract(bytes32)\":{\"notice\":\"Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`\"},\"getPledge(uint64)\":{\"notice\":\"A getter that returns the details of the specified pledge\"},\"getPledgeAdmin(uint64)\":{\"notice\":\"A constant getter to check the details of a specified Admin\"},\"getPledgeDelegate(uint64,uint64)\":{\"notice\":\"//////////////////////////Getter to find Delegate w/ the Pledge ID & the Delegate index\"},\"initialize(address)\":{\"notice\":\"////////////\"},\"isProjectCanceled(uint64)\":{\"notice\":\"A getter to find if a specified Project has been canceled\"},\"isValidPlugin(address)\":{\"notice\":\"check if the contract at the provided address is in the plugin whitelist\"},\"normalizePledge(uint64)\":{\"notice\":\"////////////////Only affects pledges with the Pledged PledgeState for 2 things:   #1: Checks if the pledge should be committed. This means that       if the pledge has an intendedProject and it is past the       commitTime, it changes the owner to be the proposed project       (The UI will have to read the commit time and manually do what       this function does to the pledge for the end user       at the expiration of the commitTime)     ///   #2: Checks to make sure that if there has been a cancellation in the       chain of projects, the pledge's owner has been changed       appropriately.     /// This function can be called by anybody at anytime on any pledge.  In general it can be called to force the calls of the affected   plugins, which also need to be predicted by the UI\"},\"numberOfPledgeAdmins()\":{\"notice\":\"//////////////////////////A constant getter used to check how many total Admins exist\"},\"numberOfPledges()\":{\"notice\":\"/////////////////////////A constant getter that returns the total number of pledges\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"updateDelegate(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Delegate's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Delegate\"},\"updateGiver(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Giver's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Giver\"},\"updateProject(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Project's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin or a parentProject,  and it must be called by the current address of the Project\"},\"useWhitelist(bool)\":{\"notice\":\"you better know what you're doing if you are going to disable it\"}}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/LiquidPledgingBase.sol\":\"LiquidPledgingBase\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"},\"giveth-liquidpledging/contracts/LiquidPledgingBase.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./PledgeAdmins.sol\\\";\\nimport \\\"./Pledges.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\n/// @dev `LiquidPledgingBase` is the base level contract used to carry out\\n///  liquidPledging's most basic functions, mostly handling and searching the\\n///  data structures\\ncontract LiquidPledgingBase is AragonApp, LiquidPledgingStorage, PledgeAdmins, Pledges {\\n\\n    event Transfer(uint indexed from, uint indexed to, uint amount);\\n    event CancelProject(uint indexed idProject);\\n\\n/////////////\\n// Modifiers\\n/////////////\\n\\n    /// @dev The `vault`is the only addresses that can call a function with this\\n    ///  modifier\\n    modifier onlyVault() {\\n        require(msg.sender == address(vault));\\n        _;\\n    }\\n\\n///////////////\\n// Constructor\\n///////////////\\n\\n    /// @param _vault The vault where the ETH backing the pledges is stored\\n    function initialize(address _vault) onlyInit public {\\n        require(_vault != 0x0);\\n        initialized();\\n\\n        vault = ILPVault(_vault);\\n\\n        admins.length = 1; // we reserve the 0 admin\\n        pledges.length = 1; // we reserve the 0 pledge\\n    }\\n\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice Getter to find Delegate w/ the Pledge ID & the Delegate index\\n    /// @param idPledge The id number representing the pledge being queried\\n    /// @param idxDelegate The index number for the delegate in this Pledge \\n    function getPledgeDelegate(uint64 idPledge, uint64 idxDelegate) external view returns(\\n        uint64 idDelegate,\\n        address addr,\\n        string name\\n    ) {\\n        Pledge storage p = _findPledge(idPledge);\\n        idDelegate = p.delegationChain[idxDelegate - 1];\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        addr = delegate.addr;\\n        name = delegate.name;\\n    }\\n\\n///////////////////\\n// Public functions\\n///////////////////\\n\\n    /// @notice Only affects pledges with the Pledged PledgeState for 2 things:\\n    ///   #1: Checks if the pledge should be committed. This means that\\n    ///       if the pledge has an intendedProject and it is past the\\n    ///       commitTime, it changes the owner to be the proposed project\\n    ///       (The UI will have to read the commit time and manually do what\\n    ///       this function does to the pledge for the end user\\n    ///       at the expiration of the commitTime)\\n    ///\\n    ///   #2: Checks to make sure that if there has been a cancellation in the\\n    ///       chain of projects, the pledge's owner has been changed\\n    ///       appropriately.\\n    ///\\n    /// This function can be called by anybody at anytime on any pledge.\\n    ///  In general it can be called to force the calls of the affected \\n    ///  plugins, which also need to be predicted by the UI\\n    /// @param idPledge This is the id of the pledge that will be normalized\\n    /// @return The normalized Pledge!\\n    function normalizePledge(uint64 idPledge) public returns(uint64) {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Check to make sure this pledge hasn't already been used \\n        // or is in the process of being used\\n        if (p.pledgeState != PledgeState.Pledged) {\\n            return idPledge;\\n        }\\n\\n        // First send to a project if it's proposed and committed\\n        if ((p.intendedProject > 0) && ( _getTime() > p.commitTime)) {\\n            uint64 oldPledge = _findOrCreatePledge(\\n                p.owner,\\n                p.delegationChain,\\n                0,\\n                0,\\n                p.oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            uint64 toPledge = _findOrCreatePledge(\\n                p.intendedProject,\\n                new uint64[](0),\\n                0,\\n                0,\\n                oldPledge,\\n                p.token,\\n                PledgeState.Pledged\\n            );\\n            _doTransfer(idPledge, toPledge, p.amount);\\n            idPledge = toPledge;\\n            p = _findPledge(idPledge);\\n        }\\n\\n        toPledge = _getOldestPledgeNotCanceled(idPledge);\\n        if (toPledge != idPledge) {\\n            _doTransfer(idPledge, toPledge, p.amount);\\n        }\\n\\n        return toPledge;\\n    }\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice A check to see if the msg.sender is the owner or the\\n    ///  plugin contract for a specific Admin\\n    /// @param idAdmin The id of the admin being checked\\n    function _checkAdminOwner(uint64 idAdmin) internal view {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        require(msg.sender == address(a.plugin) || msg.sender == a.addr);\\n    }\\n\\n    function _transfer( \\n        uint64 idSender,\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal\\n    {\\n        require(idReceiver > 0); // prevent burning value\\n        idPledge = normalizePledge(idPledge);\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage receiver = _findAdmin(idReceiver);\\n\\n        require(p.pledgeState == PledgeState.Pledged);\\n\\n        // If the sender is the owner of the Pledge\\n        if (p.owner == idSender) {\\n\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                _transferOwnershipToGiver(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Project) {\\n                _transferOwnershipToProject(idPledge, amount, idReceiver);\\n                return;\\n            } else if (receiver.adminType == PledgeAdminType.Delegate) {\\n\\n                uint recieverDIdx = _getDelegateIdx(p, idReceiver);\\n                if (p.intendedProject > 0 && recieverDIdx != NOTFOUND) {\\n                    // if there is an intendedProject and the receiver is in the delegationChain,\\n                    // then we want to preserve the delegationChain as this is a veto of the\\n                    // intendedProject by the owner\\n\\n                    if (recieverDIdx == p.delegationChain.length - 1) {\\n                        uint64 toPledge = _findOrCreatePledge(\\n                            p.owner,\\n                            p.delegationChain,\\n                            0,\\n                            0,\\n                            p.oldPledge,\\n                            p.token,\\n                            PledgeState.Pledged);\\n                        _doTransfer(idPledge, toPledge, amount);\\n                        return;\\n                    }\\n\\n                    _undelegate(idPledge, amount, p.delegationChain.length - receiverDIdx - 1);\\n                    return;\\n                }\\n                // owner is not vetoing an intendedProject and is transferring the pledge to a delegate,\\n                // so we want to reset the delegationChain\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length\\n                );\\n                _appendDelegate(idPledge, amount, idReceiver);\\n                return;\\n            }\\n\\n            // This should never be reached as the receiver.adminType\\n            // should always be either a Giver, Project, or Delegate\\n            assert(false);\\n        }\\n\\n        // If the sender is a Delegate\\n        uint senderDIdx = _getDelegateIdx(p, idSender);\\n        if (senderDIdx != NOTFOUND) {\\n\\n            // And the receiver is another Giver\\n            if (receiver.adminType == PledgeAdminType.Giver) {\\n                // Only transfer to the Giver who owns the pledge\\n                assert(p.owner == idReceiver);\\n                _undelegate(idPledge, amount, p.delegationChain.length);\\n                return;\\n            }\\n\\n            // And the receiver is another Delegate\\n            if (receiver.adminType == PledgeAdminType.Delegate) {\\n                uint receiverDIdx = _getDelegateIdx(p, idReceiver);\\n\\n                // And not in the delegationChain or part of the delegationChain\\n                // is after the sender, then all of the other delegates after \\n                // the sender are removed and the receiver is appended at the \\n                // end of the delegationChain\\n                if (receiverDIdx == NOTFOUND || receiverDIdx > senderDIdx) {\\n                    idPledge = _undelegate(\\n                        idPledge,\\n                        amount,\\n                        p.delegationChain.length - senderDIdx - 1\\n                    );\\n                    _appendDelegate(idPledge, amount, idReceiver);\\n                    return;\\n                }\\n\\n                // And is already part of the delegate chain but is before the\\n                //  sender, then the sender and all of the other delegates after\\n                //  the RECEIVER are removed from the delegationChain\\n                _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - receiverDIdx - 1\\n                );\\n                return;\\n            }\\n\\n            // And the receiver is a Project, all the delegates after the sender\\n            //  are removed and the amount is pre-committed to the project\\n            if (receiver.adminType == PledgeAdminType.Project) {\\n                idPledge = _undelegate(\\n                    idPledge,\\n                    amount,\\n                    p.delegationChain.length - senderDIdx - 1\\n                );\\n                _proposeAssignProject(idPledge, amount, idReceiver);\\n                return;\\n            }\\n        }\\n        assert(false);  // When the sender is not an owner or a delegate\\n    }\\n\\n    /// @notice `transferOwnershipToProject` allows for the transfer of\\n    ///  ownership to the project, but it can also be called by a project\\n    ///  to un-delegate everyone by setting one's own id for the idReceiver\\n    /// @param idPledge the id of the pledge to be transfered.\\n    /// @param amount Quantity of value that's being transfered\\n    /// @param idReceiver The new owner of the project (or self to un-delegate)\\n    function _transferOwnershipToProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Ensure that the pledge is not already at max pledge depth\\n        // and the project has not been canceled\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 oldPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,                     // Set the new owner\\n            new uint64[](0),                // clear the delegation chain\\n            0,\\n            0,\\n            oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }   \\n\\n\\n    /// @notice `transferOwnershipToGiver` allows for the transfer of\\n    ///  value back to the Giver, value is placed in a pledged state\\n    ///  without being attached to a project, delegation chain, or time line.\\n    /// @param idPledge the id of the pledge to be transferred.\\n    /// @param amount Quantity of value that's being transferred\\n    /// @param idReceiver The new owner of the pledge\\n    function _transferOwnershipToGiver(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            idReceiver,\\n            new uint64[](0),\\n            0,\\n            0,\\n            0,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's being chained.\\n    /// @param idReceiver The delegate to be added at the end of the chain\\n    function _appendDelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(p.delegationChain.length < MAX_DELEGATES);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length + 1\\n        );\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n\\n        // Make the last item in the array the idReceiver\\n        newDelegationChain[p.delegationChain.length] = idReceiver;\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `appendDelegate` allows for a delegate to be added onto the\\n    ///  end of the delegate chain for a given Pledge.\\n    /// @param idPledge the id of the pledge thats delegate chain will be modified.\\n    /// @param amount Quantity of value that's shifted from delegates.\\n    /// @param q Number (or depth) of delegates to remove\\n    /// @return toPledge The id for the pledge being adjusted or created\\n    function _undelegate(\\n        uint64 idPledge,\\n        uint amount,\\n        uint q\\n    ) internal returns (uint64 toPledge)\\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n        uint64[] memory newDelegationChain = new uint64[](\\n            p.delegationChain.length - q\\n        );\\n\\n        for (uint i = 0; i < p.delegationChain.length - q; i++) {\\n            newDelegationChain[i] = p.delegationChain[i];\\n        }\\n        toPledge = _findOrCreatePledge(\\n            p.owner,\\n            newDelegationChain,\\n            0,\\n            0,\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `proposeAssignProject` proposes the assignment of a pledge\\n    ///  to a specific project.\\n    /// @dev This function should potentially be named more specifically.\\n    /// @param idPledge the id of the pledge that will be assigned.\\n    /// @param amount Quantity of value this pledge leader would be assigned.\\n    /// @param idReceiver The project this pledge will potentially \\n    ///  be assigned to.\\n    function _proposeAssignProject(\\n        uint64 idPledge,\\n        uint amount,\\n        uint64 idReceiver\\n    ) internal \\n    {\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        require(_getPledgeLevel(p) < MAX_INTERPROJECT_LEVEL);\\n        require(!isProjectCanceled(idReceiver));\\n\\n        uint64 toPledge = _findOrCreatePledge(\\n            p.owner,\\n            p.delegationChain,\\n            idReceiver,\\n            uint64(_getTime() + _maxCommitTime(p)),\\n            p.oldPledge,\\n            p.token,\\n            PledgeState.Pledged\\n        );\\n        _doTransfer(idPledge, toPledge, amount);\\n    }\\n\\n    /// @notice `doTransfer` is designed to allow for pledge amounts to be \\n    ///  shifted around internally.\\n    /// @param from This is the id of the pledge from which value will be transferred.\\n    /// @param to This is the id of the pledge that value will be transferred to.\\n    /// @param _amount The amount of value that will be transferred.\\n    function _doTransfer(uint64 from, uint64 to, uint _amount) internal {\\n        uint amount = _callPlugins(true, from, to, _amount);\\n        if (from == to) {\\n            return;\\n        }\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        Pledge storage pFrom = _findPledge(from);\\n        Pledge storage pTo = _findPledge(to);\\n\\n        require(pFrom.amount >= amount);\\n        pFrom.amount -= amount;\\n        pTo.amount += amount;\\n        require(pTo.amount >= amount);\\n\\n        Transfer(from, to, amount);\\n        _callPlugins(false, from, to, amount);\\n    }\\n\\n    /// @notice A getter to find the longest commitTime out of the owner and all\\n    ///  the delegates for a specified pledge\\n    /// @param p The Pledge being queried\\n    /// @return The maximum commitTime out of the owner and all the delegates\\n    function _maxCommitTime(Pledge p) internal view returns(uint64 commitTime) {\\n        PledgeAdmin storage a = _findAdmin(p.owner);\\n        commitTime = a.commitTime; // start with the owner's commitTime\\n\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            a = _findAdmin(p.delegationChain[i]);\\n\\n            // If a delegate's commitTime is longer, make it the new commitTime\\n            if (a.commitTime > commitTime) {\\n                commitTime = a.commitTime;\\n            }\\n        }\\n    }\\n\\n    /// @notice A getter to find the oldest pledge that hasn't been canceled\\n    /// @param idPledge The starting place to lookup the pledges\\n    /// @return The oldest idPledge that hasn't been canceled (DUH!)\\n    function _getOldestPledgeNotCanceled(\\n        uint64 idPledge\\n    ) internal view returns(uint64)\\n    {\\n        if (idPledge == 0) {\\n            return 0;\\n        }\\n\\n        Pledge storage p = _findPledge(idPledge);\\n        PledgeAdmin storage admin = _findAdmin(p.owner);\\n        \\n        if (admin.adminType == PledgeAdminType.Giver) {\\n            return idPledge;\\n        }\\n\\n        assert(admin.adminType == PledgeAdminType.Project);\\n        if (!isProjectCanceled(p.owner)) {\\n            return idPledge;\\n        }\\n\\n        return _getOldestPledgeNotCanceled(p.oldPledge);\\n    }\\n\\n    /// @notice `callPlugin` is used to trigger the general functions in the\\n    ///  plugin for any actions needed before and after a transfer happens.\\n    ///  Specifically what this does in relation to the plugin is something\\n    ///  that largely depends on the functions of that plugin. This function\\n    ///  is generally called in pairs, once before, and once after a transfer.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param adminId This should be the Id of the *trusted* individual\\n    ///  who has control over this plugin.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param context The situation that is triggering the plugin. See plugin\\n    ///  for a full description of contexts.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPlugin(\\n        bool before,\\n        uint64 adminId,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        uint newAmount;\\n        allowedAmount = amount;\\n        PledgeAdmin storage admin = _findAdmin(adminId);\\n\\n        // Checks admin has a plugin assigned and a non-zero amount is requested\\n        if (address(admin.plugin) != 0 && allowedAmount > 0) {\\n            // There are two separate functions called in the plugin.\\n            // One is called before the transfer and one after\\n            if (before) {\\n                newAmount = admin.plugin.beforeTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n                require(newAmount <= allowedAmount);\\n                allowedAmount = newAmount;\\n            } else {\\n                admin.plugin.afterTransfer(\\n                    adminId,\\n                    fromPledge,\\n                    toPledge,\\n                    context,\\n                    token,\\n                    amount\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice `callPluginsPledge` is used to apply plugin calls to\\n    ///  the delegate chain and the intended project if there is one.\\n    ///  It does so in either a transferring or receiving context based\\n    ///  on the `p` and  `fromPledge` parameters.\\n    /// @param before This toggle determines whether the plugin call is occuring\\n    ///  before or after a transfer.\\n    /// @param idPledge This is the id of the pledge on which this plugin\\n    ///  is being called.\\n    /// @param fromPledge This is the Id from which value is being transfered.\\n    /// @param toPledge This is the Id that value is being transfered to.\\n    /// @param amount The amount of value that is being transfered.\\n    function _callPluginsPledge(\\n        bool before,\\n        uint64 idPledge,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        // Determine if callPlugin is being applied in a receiving\\n        // or transferring context\\n        uint64 offset = idPledge == fromPledge ? 0 : 256;\\n        allowedAmount = amount;\\n        Pledge storage p = _findPledge(idPledge);\\n\\n        // Always call the plugin on the owner\\n        allowedAmount = _callPlugin(\\n            before,\\n            p.owner,\\n            fromPledge,\\n            toPledge,\\n            offset,\\n            p.token,\\n            allowedAmount\\n        );\\n\\n        // Apply call plugin to all delegates\\n        for (uint64 i = 0; i < p.delegationChain.length; i++) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.delegationChain[i],\\n                fromPledge,\\n                toPledge,\\n                offset + i + 1,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n\\n        // If there is an intended project also call the plugin in\\n        // either a transferring or receiving context based on offset\\n        // on the intended project\\n        if (p.intendedProject > 0) {\\n            allowedAmount = _callPlugin(\\n                before,\\n                p.intendedProject,\\n                fromPledge,\\n                toPledge,\\n                offset + 255,\\n                p.token,\\n                allowedAmount\\n            );\\n        }\\n    }\\n\\n    /// @notice `callPlugins` calls `callPluginsPledge` once for the transfer\\n    ///  context and once for the receiving context. The aggregated \\n    ///  allowed amount is then returned.\\n    /// @param before This toggle determines whether the plugin call is occurring\\n    ///  before or after a transfer.\\n    /// @param fromPledge This is the Id from which value is being transferred.\\n    /// @param toPledge This is the Id that value is being transferred to.\\n    /// @param amount The amount of value that is being transferred.\\n    function _callPlugins(\\n        bool before,\\n        uint64 fromPledge,\\n        uint64 toPledge,\\n        uint amount\\n    ) internal returns (uint allowedAmount) \\n    {\\n        allowedAmount = amount;\\n\\n        // Call the plugins in the transfer context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            fromPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n\\n        // Call the plugins in the receive context\\n        allowedAmount = _callPluginsPledge(\\n            before,\\n            toPledge,\\n            fromPledge,\\n            toPledge,\\n            allowedAmount\\n        );\\n    }\\n\\n/////////////\\n// Test functions\\n/////////////\\n\\n    /// @notice Basic helper function to return the current time\\n    function _getTime() internal view returns (uint) {\\n        return now;\\n    }\\n}\\n\",\"keccak256\":\"0xbd10aeb8cd8834c63bb58034f93ed213ee8ed4f38682cc3808bdf1f5c7d79df3\"},\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./LiquidPledgingACLHelpers.sol\\\";\\n\\ncontract LiquidPledgingPlugins is AragonApp, LiquidPledgingStorage, LiquidPledgingACLHelpers {\\n\\n    bytes32 constant public PLUGIN_MANAGER_ROLE = keccak256(\\\"PLUGIN_MANAGER_ROLE\\\");\\n\\n    /**\\n    * @dev adds an instance of a plugin to the whitelist\\n    */\\n    function addValidPluginInstance(address addr) auth(PLUGIN_MANAGER_ROLE) external {\\n        pluginInstanceWhitelist[addr] = true;\\n    }\\n\\n    /**\\n    * @dev add a contract to the plugin whitelist.\\n    * @notice Proxy contracts should never be added using this method. Each individual\\n    *         proxy instance should be added by calling `addValidPluginInstance`\\n    */\\n    function addValidPluginContract(bytes32 contractHash) auth(PLUGIN_MANAGER_ROLE) public {\\n        pluginContractWhitelist[contractHash] = true;\\n    }\\n\\n    function addValidPluginContracts(bytes32[] contractHashes) external auth(PLUGIN_MANAGER_ROLE) {\\n        for (uint8 i = 0; i < contractHashes.length; i++) {\\n            addValidPluginContract(contractHashes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev removes a contract from the plugin whitelist\\n    */\\n    function removeValidPluginContract(bytes32 contractHash) external authP(PLUGIN_MANAGER_ROLE, arr(contractHash)) {\\n        pluginContractWhitelist[contractHash] = false;\\n    }\\n\\n    /**\\n    * @dev removes an instance of a plugin to the whitelist\\n    */\\n    function removeValidPluginInstance(address addr) external authP(PLUGIN_MANAGER_ROLE, arr(addr)) {\\n        pluginInstanceWhitelist[addr] = false;\\n    }\\n\\n    /**\\n    * @dev enable/disable the plugin whitelist.\\n    * @notice you better know what you're doing if you are going to disable it\\n    */\\n    function useWhitelist(bool useWhitelist) external auth(PLUGIN_MANAGER_ROLE) {\\n        whitelistDisabled = !useWhitelist;\\n    }\\n\\n    /**\\n    * check if the contract at the provided address is in the plugin whitelist\\n    */\\n    function isValidPlugin(address addr) public view returns(bool) {\\n        if (whitelistDisabled || addr == 0x0) {\\n            return true;\\n        }\\n\\n        // first check pluginInstances\\n        if (pluginInstanceWhitelist[addr]) {\\n            return true;\\n        }\\n\\n        // if the addr isn't a valid instance, check the contract code\\n        bytes32 contractHash = getCodeHash(addr);\\n\\n        return pluginContractWhitelist[contractHash];\\n    }\\n\\n    /**\\n    * @return the hash of the code for the given address\\n    */\\n    function getCodeHash(address addr) public view returns(bytes32) {\\n        bytes memory o_code;\\n        assembly {\\n            // retrieve the size of the code\\n            let size := extcodesize(addr)\\n            // allocate output byte array\\n            o_code := mload(0x40)\\n            mstore(o_code, size) // store length in memory\\n            // actually retrieve the code\\n            extcodecopy(addr, add(o_code, 0x20), 0, size)\\n        }\\n        return keccak256(o_code);\\n    }\\n}\",\"keccak256\":\"0x109373f81759324d3d39f0b2b8fd02072c2b0e502901c14e1b06ca91a05a5ae2\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"},\"giveth-liquidpledging/contracts/PledgeAdmins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\nimport \\\"./LiquidPledgingPlugins.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\ncontract PledgeAdmins is AragonApp, LiquidPledgingPlugins {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_SUBPROJECT_LEVEL = 20;\\n    uint constant MAX_INTERPROJECT_LEVEL = 20;\\n\\n    // Events\\n    event GiverAdded(uint64 indexed idGiver, string url);\\n    event GiverUpdated(uint64 indexed idGiver, string url);\\n    event DelegateAdded(uint64 indexed idDelegate, string url);\\n    event DelegateUpdated(uint64 indexed idDelegate, string url);\\n    event ProjectAdded(uint64 indexed idProject, string url);\\n    event ProjectUpdated(uint64 indexed idProject, string url);\\n\\n////////////////////\\n// Public functions\\n////////////////////\\n\\n    /// @notice Creates a Giver Admin with the `msg.sender` as the Admin address\\n    /// @param name The name used to identify the Giver\\n    /// @param url The link to the Giver's profile often an IPFS hash\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param plugin This is Giver's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idGiver The id number used to reference this Admin\\n    function addGiver(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idGiver)\\n    {\\n        return addGiver(\\n            msg.sender,\\n            name,\\n            url,\\n            commitTime,\\n            plugin\\n        );\\n    }\\n\\n    function addGiver(\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) public returns (uint64 idGiver)\\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idGiver = uint64(admins.length);\\n\\n        // Save the fields\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Giver,\\n                addr,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        GiverAdded(idGiver, url);\\n    }\\n\\n    /// @notice Updates a Giver's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Giver\\n    /// @param idGiver This is the Admin id number used to specify the Giver\\n    /// @param newAddr The new address that represents this Giver\\n    /// @param newName The new name used to identify the Giver\\n    /// @param newUrl The new link to the Giver's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    function updateGiver(\\n        uint64 idGiver,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage giver = _findAdmin(idGiver);\\n        require(msg.sender == giver.addr);\\n        require(giver.adminType == PledgeAdminType.Giver); // Must be a Giver\\n        giver.addr = newAddr;\\n        giver.name = newName;\\n        giver.url = newUrl;\\n        giver.commitTime = newCommitTime;\\n\\n        GiverUpdated(idGiver, newUrl);\\n    }\\n\\n    /// @notice Creates a Delegate Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Delegate\\n    /// @param url The link to the Delegate's profile often an IPFS hash\\n    /// @param commitTime Sets the length of time in seconds that this delegate\\n    ///  can be vetoed. Whenever this delegate is in a delegate chain the time\\n    ///  allowed to veto any event must be greater than or equal to this time.\\n    /// @param plugin This is Delegate's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idxDelegate The id number used to reference this Delegate within\\n    ///  the PLEDGE_ADMIN array\\n    function addDelegate(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idDelegate) \\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idDelegate = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Delegate,\\n                msg.sender,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        DelegateAdded(idDelegate, url);\\n    }\\n\\n    /// @notice Updates a Delegate's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Delegate\\n    /// @param idDelegate The Admin id number used to specify the Delegate\\n    /// @param newAddr The new address that represents this Delegate\\n    /// @param newName The new name used to identify the Delegate\\n    /// @param newUrl The new link to the Delegate's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds that this\\n    ///  delegate can be vetoed. Whenever this delegate is in a delegate chain\\n    ///  the time allowed to veto any event must be greater than or equal to\\n    ///  this time.\\n    function updateDelegate(\\n        uint64 idDelegate,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        require(msg.sender == delegate.addr);\\n        require(delegate.adminType == PledgeAdminType.Delegate);\\n        delegate.addr = newAddr;\\n        delegate.name = newName;\\n        delegate.url = newUrl;\\n        delegate.commitTime = newCommitTime;\\n\\n        DelegateUpdated(idDelegate, newUrl);\\n    }\\n\\n    /// @notice Creates a Project Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Project\\n    /// @param url The link to the Project's profile often an IPFS hash\\n    /// @param projectAdmin The address for the trusted project manager\\n    /// @param parentProject The Admin id number for the parent project or 0 if\\n    ///  there is no parentProject\\n    /// @param commitTime Sets the length of time in seconds the Project has to\\n    ///   veto when the Project delegates to another Delegate and they pledge\\n    ///   those funds to a project\\n    /// @param plugin This is Project's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idProject The id number used to reference this Admin\\n    function addProject(\\n        string name,\\n        string url,\\n        address projectAdmin,\\n        uint64 parentProject,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idProject) \\n    {\\n        require(isValidPlugin(plugin));\\n\\n        if (parentProject != 0) {\\n            PledgeAdmin storage a = _findAdmin(parentProject);\\n            // getProjectLevel will check that parentProject has a `Project` adminType\\n            require(_getProjectLevel(a) < MAX_SUBPROJECT_LEVEL);\\n        }\\n\\n        idProject = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Project,\\n                projectAdmin,\\n                commitTime,\\n                parentProject,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        ProjectAdded(idProject, url);\\n    }\\n\\n    /// @notice Updates a Project's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin or a parentProject,\\n    ///  and it must be called by the current address of the Project\\n    /// @param idProject The Admin id number used to specify the Project\\n    /// @param newAddr The new address that represents this Project\\n    /// @param newName The new name used to identify the Project\\n    /// @param newUrl The new link to the Project's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Project has\\n    ///  to veto when the Project delegates to a Delegate and they pledge those\\n    ///  funds to a project\\n    function updateProject(\\n        uint64 idProject,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n\\n        require(msg.sender == project.addr);\\n        require(project.adminType == PledgeAdminType.Project);\\n\\n        project.addr = newAddr;\\n        project.name = newName;\\n        project.url = newUrl;\\n        project.commitTime = newCommitTime;\\n\\n        ProjectUpdated(idProject, newUrl);\\n    }\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice A constant getter used to check how many total Admins exist\\n    /// @return The total number of admins (Givers, Delegates and Projects) .\\n    function numberOfPledgeAdmins() external view returns(uint) {\\n        return admins.length - 1;\\n    }\\n\\n    /// @notice A constant getter to check the details of a specified Admin\\n    /// @return addr Account or contract address for admin\\n    /// @return name Name of the pledgeAdmin\\n    /// @return url The link to the Project's profile often an IPFS hash\\n    /// @return commitTime The length of time in seconds the Admin has to veto\\n    ///   when the Admin delegates to a Delegate and that Delegate pledges those\\n    ///   funds to a project\\n    /// @return parentProject The Admin id number for the parent project or 0\\n    ///  if there is no parentProject\\n    /// @return canceled 0 for Delegates & Givers, true if a Project has been\\n    ///  canceled\\n    /// @return plugin This is Project's liquidPledging plugin allowing for\\n    ///  extended functionality\\n    function getPledgeAdmin(uint64 idAdmin) external view returns (\\n        PledgeAdminType adminType,\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        uint64 parentProject,\\n        bool canceled,\\n        address plugin\\n    ) {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        adminType = a.adminType;\\n        addr = a.addr;\\n        name = a.name;\\n        url = a.url;\\n        commitTime = a.commitTime;\\n        parentProject = a.parentProject;\\n        canceled = a.canceled;\\n        plugin = address(a.plugin);\\n    }\\n\\n    /// @notice A getter to find if a specified Project has been canceled\\n    /// @param projectId The Admin id number used to specify the Project\\n    /// @return True if the Project has been canceled\\n    function isProjectCanceled(uint64 projectId)\\n        public view returns (bool)\\n    {\\n        PledgeAdmin storage a = _findAdmin(projectId);\\n\\n        if (a.adminType == PledgeAdminType.Giver) {\\n            return false;\\n        }\\n\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.canceled) {\\n            return true;\\n        }\\n        if (a.parentProject == 0) {\\n            return false;\\n        }\\n\\n        return isProjectCanceled(a.parentProject);\\n    }\\n\\n///////////////////\\n// Internal methods\\n///////////////////\\n\\n    /// @notice A getter to look up a Admin's details\\n    /// @param idAdmin The id for the Admin to lookup\\n    /// @return The PledgeAdmin struct for the specified Admin\\n    function _findAdmin(uint64 idAdmin) internal view returns (PledgeAdmin storage) {\\n        require(idAdmin < admins.length);\\n        return admins[idAdmin];\\n    }\\n\\n    /// @notice Find the level of authority a specific Project has\\n    ///  using a recursive loop\\n    /// @param a The project admin being queried\\n    /// @return The level of authority a specific Project has\\n    function _getProjectLevel(PledgeAdmin a) internal view returns(uint64) {\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.parentProject == 0) {\\n            return(1);\\n        }\\n\\n        PledgeAdmin storage parent = _findAdmin(a.parentProject);\\n        return _getProjectLevel(parent) + 1;\\n    }\\n}\",\"keccak256\":\"0x06bc6171a12d31aaa05dce4217e107555f8289182046a0bd8da615c38faae3f5\"},\"giveth-liquidpledging/contracts/Pledges.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\n\\ncontract Pledges is AragonApp, LiquidPledgingStorage {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_DELEGATES = 10;\\n\\n    // a constant for when a delegate is requested that is not in the system\\n    uint64 constant  NOTFOUND = 0xFFFFFFFFFFFFFFFF;\\n\\n/////////////////////////////\\n// Public constant functions\\n////////////////////////////\\n\\n    /// @notice A constant getter that returns the total number of pledges\\n    /// @return The total number of Pledges in the system\\n    function numberOfPledges() external view returns (uint) {\\n        return pledges.length - 1;\\n    }\\n\\n    /// @notice A getter that returns the details of the specified pledge\\n    /// @param idPledge the id number of the pledge being queried\\n    /// @return the amount, owner, the number of delegates (but not the actual\\n    ///  delegates, the intendedProject (if any), the current commit time and\\n    ///  the previous pledge this pledge was derived from\\n    function getPledge(uint64 idPledge) external view returns(\\n        uint amount,\\n        uint64 owner,\\n        uint64 nDelegates,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState pledgeState\\n    ) {\\n        Pledge memory p = _findPledge(idPledge);\\n        amount = p.amount;\\n        owner = p.owner;\\n        nDelegates = uint64(p.delegationChain.length);\\n        intendedProject = p.intendedProject;\\n        commitTime = p.commitTime;\\n        oldPledge = p.oldPledge;\\n        token = p.token;\\n        pledgeState = p.pledgeState;\\n    }\\n\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice This creates a Pledge with an initial amount of 0 if one is not\\n    ///  created already; otherwise it finds the pledge with the specified\\n    ///  attributes; all pledges technically exist, if the pledge hasn't been\\n    ///  created in this system yet it simply isn't in the hash array\\n    ///  hPledge2idx[] yet\\n    /// @param owner The owner of the pledge being looked up\\n    /// @param delegationChain The list of delegates in order of authority\\n    /// @param intendedProject The project this pledge will Fund after the\\n    ///  commitTime has passed\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param oldPledge This value is used to store the pledge the current\\n    ///  pledge was came from, and in the case a Project is canceled, the Pledge\\n    ///  will revert back to it's previous state\\n    /// @param state The pledge state: Pledged, Paying, or state\\n    /// @return The hPledge2idx index number\\n    function _findOrCreatePledge(\\n        uint64 owner,\\n        uint64[] delegationChain,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState state\\n    ) internal returns (uint64)\\n    {\\n        bytes32 hPledge = keccak256(delegationChain, owner, intendedProject, commitTime, oldPledge, token, state);\\n        uint64 id = hPledge2idx[hPledge];\\n        if (id > 0) {\\n            return id;\\n        }\\n\\n        id = uint64(pledges.length);\\n        hPledge2idx[hPledge] = id;\\n        pledges.push(\\n            Pledge(\\n                0,\\n                delegationChain,\\n                owner,\\n                intendedProject,\\n                commitTime,\\n                oldPledge,\\n                token,\\n                state\\n            )\\n        );\\n        return id;\\n    }\\n\\n    /// @param idPledge the id of the pledge to load from storage\\n    /// @return The Pledge\\n    function _findPledge(uint64 idPledge) internal view returns(Pledge storage) {\\n        require(idPledge < pledges.length);\\n        return pledges[idPledge];\\n    }\\n\\n    /// @notice A getter that searches the delegationChain for the level of\\n    ///  authority a specific delegate has within a Pledge\\n    /// @param p The Pledge that will be searched\\n    /// @param idDelegate The specified delegate that's searched for\\n    /// @return If the delegate chain contains the delegate with the\\n    ///  `admins` array index `idDelegate` this returns that delegates\\n    ///  corresponding index in the delegationChain. Otherwise it returns\\n    ///  the NOTFOUND constant\\n    function _getDelegateIdx(Pledge p, uint64 idDelegate) internal pure returns(uint64) {\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            if (p.delegationChain[i] == idDelegate) {\\n                return uint64(i);\\n            }\\n        }\\n        return NOTFOUND;\\n    }\\n\\n    /// @notice A getter to find how many old \\\"parent\\\" pledges a specific Pledge\\n    ///  had using a self-referential loop\\n    /// @param p The Pledge being queried\\n    /// @return The number of old \\\"parent\\\" pledges a specific Pledge had\\n    function _getPledgeLevel(Pledge p) internal view returns(uint) {\\n        if (p.oldPledge == 0) {\\n            return 0;\\n        }\\n        Pledge storage oldP = _findPledge(p.oldPledge);\\n        return _getPledgeLevel(oldP) + 1; // a loop lookup\\n    }\\n}\\n\",\"keccak256\":\"0x9c7a60dff92f94d518d0c4a40d5434cd23680f79fd364ae855575ae4ca683797\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "addDelegate(string,string,uint64,address)": {
              "notice": "Creates a Delegate Admin with the `msg.sender` as the Admin addr"
            },
            "addGiver(string,string,uint64,address)": {
              "notice": "/////////////////Creates a Giver Admin with the `msg.sender` as the Admin address"
            },
            "addProject(string,string,address,uint64,uint64,address)": {
              "notice": "Creates a Project Admin with the `msg.sender` as the Admin addr"
            },
            "addValidPluginContract(bytes32)": {
              "notice": "Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`"
            },
            "getPledge(uint64)": {
              "notice": "A getter that returns the details of the specified pledge"
            },
            "getPledgeAdmin(uint64)": {
              "notice": "A constant getter to check the details of a specified Admin"
            },
            "getPledgeDelegate(uint64,uint64)": {
              "notice": "//////////////////////////Getter to find Delegate w/ the Pledge ID & the Delegate index"
            },
            "initialize(address)": {
              "notice": "////////////"
            },
            "isProjectCanceled(uint64)": {
              "notice": "A getter to find if a specified Project has been canceled"
            },
            "isValidPlugin(address)": {
              "notice": "check if the contract at the provided address is in the plugin whitelist"
            },
            "normalizePledge(uint64)": {
              "notice": "////////////////Only affects pledges with the Pledged PledgeState for 2 things:   #1: Checks if the pledge should be committed. This means that       if the pledge has an intendedProject and it is past the       commitTime, it changes the owner to be the proposed project       (The UI will have to read the commit time and manually do what       this function does to the pledge for the end user       at the expiration of the commitTime)     ///   #2: Checks to make sure that if there has been a cancellation in the       chain of projects, the pledge's owner has been changed       appropriately.     /// This function can be called by anybody at anytime on any pledge.  In general it can be called to force the calls of the affected   plugins, which also need to be predicted by the UI"
            },
            "numberOfPledgeAdmins()": {
              "notice": "//////////////////////////A constant getter used to check how many total Admins exist"
            },
            "numberOfPledges()": {
              "notice": "/////////////////////////A constant getter that returns the total number of pledges"
            },
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            },
            "updateDelegate(uint64,address,string,string,uint64)": {
              "notice": "Updates a Delegate's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Delegate"
            },
            "updateGiver(uint64,address,string,string,uint64)": {
              "notice": "Updates a Giver's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Giver"
            },
            "updateProject(uint64,address,string,string,uint64)": {
              "notice": "Updates a Project's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin or a parentProject,  and it must be called by the current address of the Project"
            },
            "useWhitelist(bool)": {
              "notice": "you better know what you're doing if you are going to disable it"
            }
          }
        }
      }
    },
    "giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol": {
      "LiquidPledgingPlugins": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "whitelistDisabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "PLUGIN_MANAGER_ROLE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHashes",
                "type": "bytes32[]"
              }
            ],
            "name": "addValidPluginContracts",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "useWhitelist",
                "type": "bool"
              }
            ],
            "name": "useWhitelist",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "isValidPlugin",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "removeValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "addValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getCodeHash",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "removeValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "addValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "addValidPluginContract(bytes32)": {
              "details": "add a contract to the plugin whitelist."
            },
            "addValidPluginInstance(address)": {
              "details": "adds an instance of a plugin to the whitelist"
            },
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "getCodeHash(address)": {
              "return": "the hash of the code for the given address"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "removeValidPluginContract(bytes32)": {
              "details": "removes a contract from the plugin whitelist"
            },
            "removeValidPluginInstance(address)": {
              "details": "removes an instance of a plugin to the whitelist"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            },
            "useWhitelist(bool)": {
              "details": "enable/disable the plugin whitelist."
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526069805460ff19169055341561001957600080fd5b610df2806100286000396000f3006060604052600436106101195763ffffffff60e060020a600035041663178e6079811461011e5780631c8e85681461014357806324fea3b01461016a57806332ce8ebc1461017d57806332f0a3b51461019d57806338740291146101cc5780634eafbcd5146101e457806360b1e057146102035780636293c7021461021657806379f4542e146102355780637e7db6e11461025457806380afdea81461027357806381ea4408146102865780638322fff2146102a55780638b3dd749146102b85780639b3fdf4c146102cb5780639d4941d8146102de578063a1658fad146102fd578063b12b5f7614610360578063c8ae070f14610376578063d4aae0c41461038c578063f92a79ff1461039f578063fbfa77cf146103f0575b600080fd5b341561012957600080fd5b610131610403565b60405190815260200160405180910390f35b341561014e57600080fd5b610156610427565b604051901515815260200160405180910390f35b341561017557600080fd5b610131610430565b341561018857600080fd5b61019b6004803560248101910135610452565b005b34156101a857600080fd5b6101b06104ec565b604051600160a060020a03909116815260200160405180910390f35b34156101d757600080fd5b61019b600435151561056c565b34156101ef57600080fd5b610156600160a060020a03600435166105d2565b341561020e57600080fd5b61013161064d565b341561022157600080fd5b61019b600160a060020a0360043516610671565b341561024057600080fd5b61019b600160a060020a03600435166106d2565b341561025f57600080fd5b610156600160a060020a036004351661074a565b341561027e57600080fd5b610131610750565b341561029157600080fd5b610131600160a060020a0360043516610756565b34156102b057600080fd5b6101b06107d8565b34156102c357600080fd5b6101316107dd565b34156102d657600080fd5b6101316107e3565b34156102e957600080fd5b61019b600160a060020a0360043516610807565b341561030857600080fd5b61015660048035600160a060020a031690602480359190606490604435908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965061097f95505050505050565b341561036b57600080fd5b61019b600435610abd565b341561038157600080fd5b61019b600435610b15565b341561039757600080fd5b6101b0610b84565b34156103aa57600080fd5b6101b060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b9395505050505050565b34156103fb57600080fd5b6101b0610c6f565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b604051600080516020610da78339815191528152601301604051809103902081565b6000604051600080516020610da78339815191528152601301604051809103902061049d338260006040518059106104875750595b908082528060200260200182016040525061097f565b15156104a857600080fd5b600091505b60ff8216839010156104e6576104db848460ff85168181106104cb57fe5b9050602002013560001916610b15565b6001909101906104ad565b50505050565b60008054600160a060020a0316151561050457600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561054d57600080fd5b6102c65a03f1151561055e57600080fd5b505050604051805191505090565b604051600080516020610da7833981519152815260130160405180910390206105b433826000604051805910610487575059908082528060200260200182016040525061097f565b15156105bf57600080fd5b506069805460ff19169115919091179055565b606954600090819060ff16806105ef5750600160a060020a038316155b156105fd5760019150610647565b600160a060020a03831660009081526068602052604090205460ff16156106275760019150610647565b61063083610756565b60008181526067602052604090205460ff16925090505b50919050565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b604051600080516020610da78339815191528152601301604051809103902061069982610c83565b6106a433838361097f565b15156106af57600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b604051600080516020610da78339815191528152601301604051809103902061071a33826000604051805910610487575059908082528060200260200182016040525061097f565b151561072557600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b60015481565b6000610760610d94565b823b604051915080825280600060208401863c50806040518082805190602001908083835b602083106107a45780518252601f199092019160209182019101610785565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b6000806108138361074a565b151561081e57600080fd5b6108266104ec565b915061083182610ca3565b151561083c57600080fd5b600160a060020a038316151561088e5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561088957600080fd5b61097a565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156108e557600080fd5b6102c65a03f115156108f657600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095e57600080fd5b6102c65a03f1151561096f57600080fd5b505050604051805150505b505050565b6000610989610d94565b600080845111156109a257835160200290508391508082525b600054600160a060020a03161580610ab3575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b83811015610a49578082015183820152602001610a31565b50505050905090810190601f168015610a765780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515610a9757600080fd5b6102c65a03f11515610aa857600080fd5b505050604051805190505b9695505050505050565b604051600080516020610da783398151915281526013016040518091039020610ae582610cc9565b610af033838361097f565b1515610afb57600080fd5b50506000908152606760205260409020805460ff19169055565b604051600080516020610da783398151915281526013016040518091039020610b5d33826000604051805910610487575059908082528060200260200182016040525061097f565b1515610b6857600080fd5b506000908152606760205260409020805460ff19166001179055565b600054600160a060020a031681565b6000610b9d610cda565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c04578082015183820152602001610bec565b50505050905090810190601f168015610c315780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515610c4f57600080fd5b6102c65a03f11515610c6057600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b610c8b610d94565b610c9d82600160a060020a0316610d4d565b92915050565b600080600160a060020a0383161515610cbf5760009150610647565b50506000903b1190565b610cd1610d94565b610c9d82610d4d565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610c4f57600080fd5b610d55610d94565b6001604051805910610d645750595b908082528060200260200182016040525090508181600081518110610d8557fe5b60209081029091010152919050565b602060405190810160405260008152905600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000a165627a7a72305820a269eb563e60bc299c449c7ba845f32bde1f6740e78d3f01b5a56cb2bfe4dbe30029",
            "sourceMap": "961:2882:32:-;;;2538:37:33;;;-1:-1:-1;;2538:37:33;;;961:2882:32;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106101195763ffffffff60e060020a600035041663178e6079811461011e5780631c8e85681461014357806324fea3b01461016a57806332ce8ebc1461017d57806332f0a3b51461019d57806338740291146101cc5780634eafbcd5146101e457806360b1e057146102035780636293c7021461021657806379f4542e146102355780637e7db6e11461025457806380afdea81461027357806381ea4408146102865780638322fff2146102a55780638b3dd749146102b85780639b3fdf4c146102cb5780639d4941d8146102de578063a1658fad146102fd578063b12b5f7614610360578063c8ae070f14610376578063d4aae0c41461038c578063f92a79ff1461039f578063fbfa77cf146103f0575b600080fd5b341561012957600080fd5b610131610403565b60405190815260200160405180910390f35b341561014e57600080fd5b610156610427565b604051901515815260200160405180910390f35b341561017557600080fd5b610131610430565b341561018857600080fd5b61019b6004803560248101910135610452565b005b34156101a857600080fd5b6101b06104ec565b604051600160a060020a03909116815260200160405180910390f35b34156101d757600080fd5b61019b600435151561056c565b34156101ef57600080fd5b610156600160a060020a03600435166105d2565b341561020e57600080fd5b61013161064d565b341561022157600080fd5b61019b600160a060020a0360043516610671565b341561024057600080fd5b61019b600160a060020a03600435166106d2565b341561025f57600080fd5b610156600160a060020a036004351661074a565b341561027e57600080fd5b610131610750565b341561029157600080fd5b610131600160a060020a0360043516610756565b34156102b057600080fd5b6101b06107d8565b34156102c357600080fd5b6101316107dd565b34156102d657600080fd5b6101316107e3565b34156102e957600080fd5b61019b600160a060020a0360043516610807565b341561030857600080fd5b61015660048035600160a060020a031690602480359190606490604435908101908301358060208082020160405190810160405280939291908181526020018383602002808284375094965061097f95505050505050565b341561036b57600080fd5b61019b600435610abd565b341561038157600080fd5b61019b600435610b15565b341561039757600080fd5b6101b0610b84565b34156103aa57600080fd5b6101b060046024813581810190830135806020601f82018190048102016040519081016040528181529291906020840183838082843750949650610b9395505050505050565b34156103fb57600080fd5b6101b0610c6f565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b604051600080516020610da78339815191528152601301604051809103902081565b6000604051600080516020610da78339815191528152601301604051809103902061049d338260006040518059106104875750595b908082528060200260200182016040525061097f565b15156104a857600080fd5b600091505b60ff8216839010156104e6576104db848460ff85168181106104cb57fe5b9050602002013560001916610b15565b6001909101906104ad565b50505050565b60008054600160a060020a0316151561050457600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561054d57600080fd5b6102c65a03f1151561055e57600080fd5b505050604051805191505090565b604051600080516020610da7833981519152815260130160405180910390206105b433826000604051805910610487575059908082528060200260200182016040525061097f565b15156105bf57600080fd5b506069805460ff19169115919091179055565b606954600090819060ff16806105ef5750600160a060020a038316155b156105fd5760019150610647565b600160a060020a03831660009081526068602052604090205460ff16156106275760019150610647565b61063083610756565b60008181526067602052604090205460ff16925090505b50919050565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b604051600080516020610da78339815191528152601301604051809103902061069982610c83565b6106a433838361097f565b15156106af57600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b604051600080516020610da78339815191528152601301604051809103902061071a33826000604051805910610487575059908082528060200260200182016040525061097f565b151561072557600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b60015481565b6000610760610d94565b823b604051915080825280600060208401863c50806040518082805190602001908083835b602083106107a45780518252601f199092019160209182019101610785565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b6000806108138361074a565b151561081e57600080fd5b6108266104ec565b915061083182610ca3565b151561083c57600080fd5b600160a060020a038316151561088e5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561088957600080fd5b61097a565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b15156108e557600080fd5b6102c65a03f115156108f657600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561095e57600080fd5b6102c65a03f1151561096f57600080fd5b505050604051805150505b505050565b6000610989610d94565b600080845111156109a257835160200290508391508082525b600054600160a060020a03161580610ab3575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b83811015610a49578082015183820152602001610a31565b50505050905090810190601f168015610a765780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515610a9757600080fd5b6102c65a03f11515610aa857600080fd5b505050604051805190505b9695505050505050565b604051600080516020610da783398151915281526013016040518091039020610ae582610cc9565b610af033838361097f565b1515610afb57600080fd5b50506000908152606760205260409020805460ff19169055565b604051600080516020610da783398151915281526013016040518091039020610b5d33826000604051805910610487575059908082528060200260200182016040525061097f565b1515610b6857600080fd5b506000908152606760205260409020805460ff19166001179055565b600054600160a060020a031681565b6000610b9d610cda565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610c04578082015183820152602001610bec565b50505050905090810190601f168015610c315780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b1515610c4f57600080fd5b6102c65a03f11515610c6057600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b610c8b610d94565b610c9d82600160a060020a0316610d4d565b92915050565b600080600160a060020a0383161515610cbf5760009150610647565b50506000903b1190565b610cd1610d94565b610c9d82610d4d565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b1515610c4f57600080fd5b610d55610d94565b6001604051805910610d645750595b908082528060200260200182016040525090508181600081518110610d8557fe5b60209081029091010152919050565b602060405190810160405260008152905600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000a165627a7a72305820a269eb563e60bc299c449c7ba845f32bde1f6740e78d3f01b5a56cb2bfe4dbe30029",
            "sourceMap": "961:2882:32:-;;;;;;;;;-1:-1:-1;;;961:2882:32;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1061:78:32;;;;;;;;;;;;1746:226;;;;;;;;;;;;;;;;;;;;;;;1226::8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1226:226:8;;;;;;;;;;;;;;2602:126:32;;;;;;;;;;;;;;;;2828:450;;;;;;;;;;-1:-1:-1;;;;;2828:450:32;;;;;565:118:18;;;;;;;;;;;;2304:150:32;;;;;;;;;;-1:-1:-1;;;;;2304:150:32;;;;;1218:134;;;;;;;;;;-1:-1:-1;;;;;1218:134:32;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;113:20:7;;;;;;;;;;;;3356:485:32;;;;;;;;;;-1:-1:-1;;;;;3356:485:32;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;689:115:18;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;2049:174:32;;;;;;;;;;;;;;1592:148;;;;;;;;;;;;;;86:21:7;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;2582:21:33;;;;;;;;;;;;448:111:18;493:66;448:111;:::o;2538:37:33:-;;;;;;:::o;1061:78:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;1061:78;:::o;1746:226::-;1855:7;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;1865:1:32;1855:11;;1850:116;1868:25;;;;;;1850:116;;;1914:41;1937:14;;:17;;;;;;;;;;;;;;;;;;;1914:22;:41::i;:::-;1895:3;;;;;1850:116;;;1746:226;;;;:::o;1226::8:-;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1226:226:8;:::o;2602:126:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;2688:17:32;:33;;-1:-1:-1;;2688:33:32;2708:13;;2688:33;;;;;;2602:126::o;2828:450::-;2905:17;;2885:4;;;;2905:17;;;:32;;-1:-1:-1;;;;;;2926:11:32;;;2905:32;2901:74;;;2960:4;2953:11;;;;2901:74;-1:-1:-1;;;;;3028:29:32;;;;;;:23;:29;;;;;;;;3024:71;;;3080:4;3073:11;;;;3024:71;3199:17;3211:4;3199:11;:17::i;:::-;3234:37;;;;:23;:37;;;;;;;;;-1:-1:-1;3176:40:32;-1:-1:-1;2828:450:32;;;;;:::o;565:118:18:-;617:66;565:118;:::o;2304:150:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2389:9;2393:4;2389:3;:9::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;;;;;;2410:29:32;2442:5;2410:29;;;:23;:29;;;;;:37;;-1:-1:-1;;2410:37:32;;;2304:150::o;1218:134::-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;;;;;;1309:29:32;;;;;:23;:29;;;;;:36;;-1:-1:-1;;1309:36:32;1341:4;1309:36;;;1218:134::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;113:20:7:-;;;;:::o;3356:485:32:-;3411:7;3430:19;;:::i;:::-;3551:4;3539:11;3627:4;3621:5;3611:21;;3660:4;3652:6;3645;3786:4;3783:1;3776:4;3768:6;3764:3;3758:4;3746:11;3468:333;3827:6;3817:17;;;;;;;;;;;;;36:153:-1;66:2;58;;36:153;;182:3;176:5;164:6;;-1:-1;;139:3;;;;98:2;89:3;;;;114;36:153;;;274:1;267:3;263:2;259:3;254;250;246;315:4;311:3;305;299:5;295:3;356:4;350:3;344:5;340:3;377:2;365:6;;;-1:-1;;;3:399;;;;;-1:-1;3:399;;-1:-1;;3:399;;;;;;3810:24:32;;3356:485;;;;:::o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;689:115:18:-;738:66;689:115;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;2049:174:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2142:17;2146:12;2142:3;:17::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;2211:5:32;2171:37;;;:23;:37;;;;;:45;;-1:-1:-1;;2171:45:32;;;2049:174::o;1592:148::-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;1689:37:32;;;;:23;:37;;;;;:44;;-1:-1:-1;;1689:44:32;1729:4;1689:44;;;1592:148::o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;2582:21:33:-;;;;;;-1:-1:-1;;;;;2582:21:33;;:::o;355:101:2:-;403:11;;:::i;:::-;433:16;445:2;-1:-1:-1;;;;;437:11:2;433:3;:16::i;:::-;426:23;355:101;-1:-1:-1;;355:101:2:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;-1:-1:-1;;289:1:14;244:11;;282:8;;53:244::o;116:101:2:-;164:11;;:::i;:::-;194:16;206:2;194:3;:16::i;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1359:117:2;1407:11;;:::i;:::-;1448:1;1434:16;;;;;;;;;;;;;;;;;;;;;;;;1430:20;;1467:2;1460:1;1462;1460:4;;;;;;;;;;;;;;;;:9;1359:117;;-1:-1:-1;1359:117:2:o;961:2882:32:-;;;;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "714000",
              "executionCost": "20960",
              "totalCost": "734960"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "236",
              "ETH()": "600",
              "EVMSCRIPT_REGISTRY_APP()": "566",
              "EVMSCRIPT_REGISTRY_APP_ID()": "390",
              "PLUGIN_MANAGER_ROLE()": "infinite",
              "addValidPluginContract(bytes32)": "infinite",
              "addValidPluginContracts(bytes32[])": "infinite",
              "addValidPluginInstance(address)": "infinite",
              "allowRecoverability(address)": "545",
              "appId()": "678",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "getCodeHash(address)": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "744",
              "getRecoveryVault()": "infinite",
              "isValidPlugin(address)": "infinite",
              "kernel()": "1029",
              "removeValidPluginContract(bytes32)": "infinite",
              "removeValidPluginInstance(address)": "infinite",
              "transferToVault(address)": "infinite",
              "useWhitelist(bool)": "infinite",
              "vault()": "1084",
              "whitelistDisabled()": "470"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "PLUGIN_MANAGER_ROLE()": "24fea3b0",
            "addValidPluginContract(bytes32)": "c8ae070f",
            "addValidPluginContracts(bytes32[])": "32ce8ebc",
            "addValidPluginInstance(address)": "79f4542e",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "getCodeHash(address)": "81ea4408",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getRecoveryVault()": "32f0a3b5",
            "isValidPlugin(address)": "4eafbcd5",
            "kernel()": "d4aae0c4",
            "removeValidPluginContract(bytes32)": "b12b5f76",
            "removeValidPluginInstance(address)": "6293c702",
            "transferToVault(address)": "9d4941d8",
            "useWhitelist(bool)": "38740291",
            "vault()": "fbfa77cf",
            "whitelistDisabled()": "1c8e8568"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLUGIN_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addValidPluginContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"useWhitelist\",\"type\":\"bool\"}],\"name\":\"useWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidPlugin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCodeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"removeValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"addValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"addValidPluginContract(bytes32)\":{\"details\":\"add a contract to the plugin whitelist.\"},\"addValidPluginInstance(address)\":{\"details\":\"adds an instance of a plugin to the whitelist\"},\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"getCodeHash(address)\":{\"return\":\"the hash of the code for the given address\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"removeValidPluginContract(bytes32)\":{\"details\":\"removes a contract from the plugin whitelist\"},\"removeValidPluginInstance(address)\":{\"details\":\"removes an instance of a plugin to the whitelist\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"useWhitelist(bool)\":{\"details\":\"enable/disable the plugin whitelist.\"}}},\"userdoc\":{\"methods\":{\"addValidPluginContract(bytes32)\":{\"notice\":\"Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`\"},\"isValidPlugin(address)\":{\"notice\":\"check if the contract at the provided address is in the plugin whitelist\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"useWhitelist(bool)\":{\"notice\":\"you better know what you're doing if you are going to disable it\"}}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":\"LiquidPledgingPlugins\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"},\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./LiquidPledgingACLHelpers.sol\\\";\\n\\ncontract LiquidPledgingPlugins is AragonApp, LiquidPledgingStorage, LiquidPledgingACLHelpers {\\n\\n    bytes32 constant public PLUGIN_MANAGER_ROLE = keccak256(\\\"PLUGIN_MANAGER_ROLE\\\");\\n\\n    /**\\n    * @dev adds an instance of a plugin to the whitelist\\n    */\\n    function addValidPluginInstance(address addr) auth(PLUGIN_MANAGER_ROLE) external {\\n        pluginInstanceWhitelist[addr] = true;\\n    }\\n\\n    /**\\n    * @dev add a contract to the plugin whitelist.\\n    * @notice Proxy contracts should never be added using this method. Each individual\\n    *         proxy instance should be added by calling `addValidPluginInstance`\\n    */\\n    function addValidPluginContract(bytes32 contractHash) auth(PLUGIN_MANAGER_ROLE) public {\\n        pluginContractWhitelist[contractHash] = true;\\n    }\\n\\n    function addValidPluginContracts(bytes32[] contractHashes) external auth(PLUGIN_MANAGER_ROLE) {\\n        for (uint8 i = 0; i < contractHashes.length; i++) {\\n            addValidPluginContract(contractHashes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev removes a contract from the plugin whitelist\\n    */\\n    function removeValidPluginContract(bytes32 contractHash) external authP(PLUGIN_MANAGER_ROLE, arr(contractHash)) {\\n        pluginContractWhitelist[contractHash] = false;\\n    }\\n\\n    /**\\n    * @dev removes an instance of a plugin to the whitelist\\n    */\\n    function removeValidPluginInstance(address addr) external authP(PLUGIN_MANAGER_ROLE, arr(addr)) {\\n        pluginInstanceWhitelist[addr] = false;\\n    }\\n\\n    /**\\n    * @dev enable/disable the plugin whitelist.\\n    * @notice you better know what you're doing if you are going to disable it\\n    */\\n    function useWhitelist(bool useWhitelist) external auth(PLUGIN_MANAGER_ROLE) {\\n        whitelistDisabled = !useWhitelist;\\n    }\\n\\n    /**\\n    * check if the contract at the provided address is in the plugin whitelist\\n    */\\n    function isValidPlugin(address addr) public view returns(bool) {\\n        if (whitelistDisabled || addr == 0x0) {\\n            return true;\\n        }\\n\\n        // first check pluginInstances\\n        if (pluginInstanceWhitelist[addr]) {\\n            return true;\\n        }\\n\\n        // if the addr isn't a valid instance, check the contract code\\n        bytes32 contractHash = getCodeHash(addr);\\n\\n        return pluginContractWhitelist[contractHash];\\n    }\\n\\n    /**\\n    * @return the hash of the code for the given address\\n    */\\n    function getCodeHash(address addr) public view returns(bytes32) {\\n        bytes memory o_code;\\n        assembly {\\n            // retrieve the size of the code\\n            let size := extcodesize(addr)\\n            // allocate output byte array\\n            o_code := mload(0x40)\\n            mstore(o_code, size) // store length in memory\\n            // actually retrieve the code\\n            extcodecopy(addr, add(o_code, 0x20), 0, size)\\n        }\\n        return keccak256(o_code);\\n    }\\n}\",\"keccak256\":\"0x109373f81759324d3d39f0b2b8fd02072c2b0e502901c14e1b06ca91a05a5ae2\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "addValidPluginContract(bytes32)": {
              "notice": "Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`"
            },
            "isValidPlugin(address)": {
              "notice": "check if the contract at the provided address is in the plugin whitelist"
            },
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            },
            "useWhitelist(bool)": {
              "notice": "you better know what you're doing if you are going to disable it"
            }
          }
        }
      }
    },
    "giveth-liquidpledging/contracts/LiquidPledgingStorage.sol": {
      "ILPVault": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_ref",
                "type": "bytes32"
              },
              {
                "name": "_dest",
                "type": "address"
              },
              {
                "name": "_token",
                "type": "address"
              },
              {
                "name": "_amount",
                "type": "uint256"
              }
            ],
            "name": "authorizePayment",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "payable": true,
            "stateMutability": "payable",
            "type": "fallback"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "",
            "sourceMap": ""
          },
          "gasEstimates": null,
          "methodIdentifiers": {
            "authorizePayment(bytes32,address,address,uint256)": "a5426df1"
          }
        },
        "metadata": "",
        "userdoc": {
          "methods": {}
        }
      },
      "LiquidPledgingStorage": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "whitelistDisabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {}
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526005805460ff19169055341561001957600080fd5b610100806100286000396000f30060606040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631c8e85688114604d578063fbfa77cf146071575b600080fd5b3415605757600080fd5b605d60aa565b604051901515815260200160405180910390f35b3415607b57600080fd5b608160b3565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60055460ff1681565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820b65cca452e3a53178a5dc18732c972b4c6fcfcafb60922cb65273cebb07517ea0029",
            "sourceMap": "636:2052:33:-;;;2538:37;;;-1:-1:-1;;2538:37:33;;;636:2052;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "60606040526004361060485763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416631c8e85688114604d578063fbfa77cf146071575b600080fd5b3415605757600080fd5b605d60aa565b604051901515815260200160405180910390f35b3415607b57600080fd5b608160b3565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60055460ff1681565b600554610100900473ffffffffffffffffffffffffffffffffffffffff16815600a165627a7a72305820b65cca452e3a53178a5dc18732c972b4c6fcfcafb60922cb65273cebb07517ea0029",
            "sourceMap": "636:2052:33:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2582:21;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37;;;;;;:::o;2582:21::-;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "51200",
              "executionCost": "20312",
              "totalCost": "71512"
            },
            "external": {
              "vault()": "421",
              "whitelistDisabled()": "385"
            }
          },
          "methodIdentifiers": {
            "vault()": "fbfa77cf",
            "whitelistDisabled()": "1c8e8568"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"whitelistDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":\"LiquidPledgingStorage\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"}},\"version\":1}",
        "userdoc": {
          "methods": {}
        }
      }
    },
    "giveth-liquidpledging/contracts/PledgeAdmins.sol": {
      "PledgeAdmins": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "whitelistDisabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "projectId",
                "type": "uint64"
              }
            ],
            "name": "isProjectCanceled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "PLUGIN_MANAGER_ROLE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHashes",
                "type": "bytes32[]"
              }
            ],
            "name": "addValidPluginContracts",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "useWhitelist",
                "type": "bool"
              }
            ],
            "name": "useWhitelist",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "isValidPlugin",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addDelegate",
            "outputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfPledgeAdmins",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "removeValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addGiver",
            "outputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "projectAdmin",
                "type": "address"
              },
              {
                "name": "parentProject",
                "type": "uint64"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addProject",
            "outputs": [
              {
                "name": "idProject",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "addValidPluginInstance",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "name": "addGiver",
            "outputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "addr",
                "type": "address"
              }
            ],
            "name": "getCodeHash",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "removeValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "contractHash",
                "type": "bytes32"
              }
            ],
            "name": "addValidPluginContract",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateDelegate",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateGiver",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idAdmin",
                "type": "uint64"
              }
            ],
            "name": "getPledgeAdmin",
            "outputs": [
              {
                "name": "adminType",
                "type": "uint8"
              },
              {
                "name": "addr",
                "type": "address"
              },
              {
                "name": "name",
                "type": "string"
              },
              {
                "name": "url",
                "type": "string"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "parentProject",
                "type": "uint64"
              },
              {
                "name": "canceled",
                "type": "bool"
              },
              {
                "name": "plugin",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "idProject",
                "type": "uint64"
              },
              {
                "name": "newAddr",
                "type": "address"
              },
              {
                "name": "newName",
                "type": "string"
              },
              {
                "name": "newUrl",
                "type": "string"
              },
              {
                "name": "newCommitTime",
                "type": "uint64"
              }
            ],
            "name": "updateProject",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "GiverAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idGiver",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "GiverUpdated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "DelegateAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idDelegate",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "DelegateUpdated",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "ProjectAdded",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "idProject",
                "type": "uint64"
              },
              {
                "indexed": false,
                "name": "url",
                "type": "string"
              }
            ],
            "name": "ProjectUpdated",
            "type": "event"
          }
        ],
        "devdoc": {
          "methods": {
            "addDelegate(string,string,uint64,address)": {
              "params": {
                "commitTime": "Sets the length of time in seconds that this delegate  can be vetoed. Whenever this delegate is in a delegate chain the time  allowed to veto any event must be greater than or equal to this time.",
                "name": "The name used to identify the Delegate",
                "plugin": "This is Delegate's liquid pledge plugin allowing for  extended functionality",
                "url": "The link to the Delegate's profile often an IPFS hash"
              },
              "return": "idxDelegate The id number used to reference this Delegate within  the PLEDGE_ADMIN array"
            },
            "addGiver(string,string,uint64,address)": {
              "params": {
                "commitTime": "The length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project",
                "name": "The name used to identify the Giver",
                "plugin": "This is Giver's liquid pledge plugin allowing for  extended functionality",
                "url": "The link to the Giver's profile often an IPFS hash"
              },
              "return": "idGiver The id number used to reference this Admin"
            },
            "addProject(string,string,address,uint64,uint64,address)": {
              "params": {
                "commitTime": "Sets the length of time in seconds the Project has to   veto when the Project delegates to another Delegate and they pledge   those funds to a project",
                "name": "The name used to identify the Project",
                "parentProject": "The Admin id number for the parent project or 0 if  there is no parentProject",
                "plugin": "This is Project's liquid pledge plugin allowing for  extended functionality",
                "projectAdmin": "The address for the trusted project manager",
                "url": "The link to the Project's profile often an IPFS hash"
              },
              "return": "idProject The id number used to reference this Admin"
            },
            "addValidPluginContract(bytes32)": {
              "details": "add a contract to the plugin whitelist."
            },
            "addValidPluginInstance(address)": {
              "details": "adds an instance of a plugin to the whitelist"
            },
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "getCodeHash(address)": {
              "return": "the hash of the code for the given address"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "getPledgeAdmin(uint64)": {
              "return": "addr Account or contract address for adminname Name of the pledgeAdminurl The link to the Project's profile often an IPFS hashcommitTime The length of time in seconds the Admin has to veto   when the Admin delegates to a Delegate and that Delegate pledges those   funds to a projectparentProject The Admin id number for the parent project or 0  if there is no parentProjectcanceled 0 for Delegates & Givers, true if a Project has been  canceledplugin This is Project's liquidPledging plugin allowing for  extended functionality"
            },
            "isProjectCanceled(uint64)": {
              "params": {
                "projectId": "The Admin id number used to specify the Project"
              },
              "return": "True if the Project has been canceled"
            },
            "numberOfPledgeAdmins()": {
              "return": "The total number of admins (Givers, Delegates and Projects) ."
            },
            "removeValidPluginContract(bytes32)": {
              "details": "removes a contract from the plugin whitelist"
            },
            "removeValidPluginInstance(address)": {
              "details": "removes an instance of a plugin to the whitelist"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            },
            "updateDelegate(uint64,address,string,string,uint64)": {
              "params": {
                "idDelegate": "The Admin id number used to specify the Delegate",
                "newAddr": "The new address that represents this Delegate",
                "newCommitTime": "Sets the length of time in seconds that this  delegate can be vetoed. Whenever this delegate is in a delegate chain  the time allowed to veto any event must be greater than or equal to  this time.",
                "newName": "The new name used to identify the Delegate",
                "newUrl": "The new link to the Delegate's profile often an IPFS hash"
              }
            },
            "updateGiver(uint64,address,string,string,uint64)": {
              "params": {
                "idGiver": "This is the Admin id number used to specify the Giver",
                "newAddr": "The new address that represents this Giver",
                "newCommitTime": "Sets the length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project",
                "newName": "The new name used to identify the Giver",
                "newUrl": "The new link to the Giver's profile often an IPFS hash"
              }
            },
            "updateProject(uint64,address,string,string,uint64)": {
              "params": {
                "idProject": "The Admin id number used to specify the Project",
                "newAddr": "The new address that represents this Project",
                "newCommitTime": "Sets the length of time in seconds the Project has  to veto when the Project delegates to a Delegate and they pledge those  funds to a project",
                "newName": "The new name used to identify the Project",
                "newUrl": "The new link to the Project's profile often an IPFS hash"
              }
            },
            "useWhitelist(bool)": {
              "details": "enable/disable the plugin whitelist."
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526069805460ff19169055341561001957600080fd5b612540806100286000396000f3006060604052600436106101875763ffffffff60e060020a600035041663178e6079811461018c5780631c8e8568146101b15780632101a6ad146101d857806324fea3b0146101f857806332ce8ebc1461020b57806332f0a3b51461022b578063387402911461025a5780634eafbcd51461027257806352dc7dcc146102915780635503d9ba146102f157806360b1e057146103045780636293c702146103175780636e802c6a1461033657806372116e92146103f157806379f4542e146104435780637e7db6e1146104625780637f61fa931461048157806380afdea8146104c457806381ea4408146104d75780638322fff2146104f65780638b3dd749146105095780639b3fdf4c1461051c5780639d4941d81461052f578063a1658fad1461054e578063b12b5f76146105b1578063c8ae070f146105c7578063cc19ecf7146105dd578063d4aae0c41461062a578063db7c23141461063d578063eba8ba061461068a578063f6b24b1c146107e2578063f92a79ff1461082f578063fbfa77cf14610880575b600080fd5b341561019757600080fd5b61019f610893565b60405190815260200160405180910390f35b34156101bc57600080fd5b6101c46108b7565b604051901515815260200160405180910390f35b34156101e357600080fd5b6101c467ffffffffffffffff600435166108c0565b341561020357600080fd5b61019f610969565b341561021657600080fd5b610229600480356024810191013561098b565b005b341561023657600080fd5b61023e610a25565b604051600160a060020a03909116815260200160405180910390f35b341561026557600080fd5b6102296004351515610aa6565b341561027d57600080fd5b6101c4600160a060020a0360043516610b0c565b341561029c57600080fd5b6102d4602460048035828101929082013591813591820191013567ffffffffffffffff60443516600160a060020a0360643516610b83565b60405167ffffffffffffffff909116815260200160405180910390f35b34156102fc57600080fd5b61019f610e1a565b341561030f57600080fd5b61019f610e24565b341561032257600080fd5b610229600160a060020a0360043516610e48565b341561034157600080fd5b6102d460048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050833567ffffffffffffffff169360200135600160a060020a03169250610ea9915050565b34156103fc57600080fd5b6102d46024600480358281019290820135918135918201910135600160a060020a0360443581169067ffffffffffffffff6064358116916084359091169060a43516611115565b341561044e57600080fd5b610229600160a060020a03600435166115d4565b341561046d57600080fd5b6101c4600160a060020a036004351661164c565b341561048c57600080fd5b6102d4602460048035828101929082013591813591820191013567ffffffffffffffff60443516600160a060020a0360643516611652565b34156104cf57600080fd5b61019f6116ce565b34156104e257600080fd5b61019f600160a060020a03600435166116d4565b341561050157600080fd5b61023e611756565b341561051457600080fd5b61019f61175b565b341561052757600080fd5b61019f611761565b341561053a57600080fd5b610229600160a060020a0360043516611785565b341561055957600080fd5b6101c460048035600160a060020a03169060248035919060649060443590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506118fd95505050505050565b34156105bc57600080fd5b610229600435611a3b565b34156105d257600080fd5b610229600435611a93565b34156105e857600080fd5b6102296004803567ffffffffffffffff9081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516611b02565b341561063557600080fd5b61023e611c0c565b341561064857600080fd5b6102296004803567ffffffffffffffff9081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516611c1b565b341561069557600080fd5b6106aa67ffffffffffffffff60043516611d25565b604051808960028111156106ba57fe5b60ff168152600160a060020a03898116602083015267ffffffffffffffff8781166080840152861660a083015284151560c0830152831660e08201526101008282038101604083019081529160608101910189818151815260200191508051906020019080838360005b8381101561073c578082015183820152602001610724565b50505050905090810190601f1680156107695780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561079f578082015183820152602001610787565b50505050905090810190601f1680156107cc5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34156107ed57600080fd5b6102296004803567ffffffffffffffff9081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516611efa565b341561083a57600080fd5b61023e60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061200495505050505050565b341561088b57600080fd5b61023e6120e0565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b6000806108cc836120f4565b90506000815460ff1660028111156108e057fe5b14156108ef5760009150610963565b6002815460ff16600281111561090157fe5b1461090857fe5b600181015468010000000000000000900460ff161561092a5760019150610963565b600181015467ffffffffffffffff1615156109485760009150610963565b60018101546109609067ffffffffffffffff166108c0565b91505b50919050565b6040516000805160206124d58339815191528152601301604051809103902081565b60006040516000805160206124d5833981519152815260130160405180910390206109d6338260006040518059106109c05750595b90808252806020026020018201604052506118fd565b15156109e157600080fd5b600091505b60ff821683901015610a1f57610a14848460ff8516818110610a0457fe5b9050602002013560001916611a93565b6001909101906109e6565b50505050565b60008054600160a060020a03161515610a3d57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a8657600080fd5b6102c65a03f11515610a9757600080fd5b50505060405180519150505b90565b6040516000805160206124d583398151915281526013016040518091039020610aee338260006040518059106109c057505990808252806020026020018201604052506118fd565b1515610af957600080fd5b506069805460ff19169115919091179055565b606954600090819060ff1680610b295750600160a060020a038316155b15610b375760019150610963565b600160a060020a03831660009081526068602052604090205460ff1615610b615760019150610963565b610b6a836116d4565b60009081526067602052604090205460ff169392505050565b6000610b8e82610b0c565b1515610b9957600080fd5b5060648054908160018101610bae83826122e6565b91600052602060002090600402016000610100604051908101604052806001815260200133600160a060020a031681526020018767ffffffffffffffff168152602001600067ffffffffffffffff16815260200160001515815260200186600160a060020a031681526020018b8b8080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff19166001836002811115610ca157fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a03199091161781556040820151815467ffffffffffffffff9190911660a860020a026000805160206124f5833981519152909116178155606082015160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051610d99929160200190612312565b5060e082015181600301908051610db4929160200190612312565b505050508067ffffffffffffffff167fd921f0ff8d5f67ca22b52c5b4be3463a8cabd9d95c28a02dd7c86f9deb3329be86866040516020808252810182905280604081018484808284378201915050935050505060405180910390a29695505050505050565b6064546000190190565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b6040516000805160206124d583398151915281526013016040518091039020610e708261213c565b610e7b3383836118fd565b1515610e8657600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b6000610eb482610b0c565b1515610ebf57600080fd5b5060648054908160018101610ed483826122e6565b916000526020600020906004020160006101006040519081016040528060008152600160a060020a03808c16602083015267ffffffffffffffff891660408301526000606083018190526080830152871660a082015260c081018a905260e00188905291905081518154829060ff19166001836002811115610f5257fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a03199091161781556040820151815467ffffffffffffffff9190911660a860020a026000805160206124f5833981519152909116178155606082015160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020190805161104a929160200190612312565b5060e082015181600301908051611065929160200190612312565b505050508067ffffffffffffffff167fad9c62a4382fd0ddbc4a0cf6c2bc7df75b0b8beb786ff59014f39daaea7f232f8560405160208082528190810183818151815260200191508051906020019080838360005b838110156110d25780820151838201526020016110ba565b50505050905090810190601f1680156110ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390a295945050505050565b60008061112183610b0c565b151561112c57600080fd5b67ffffffffffffffff85161561135157611145856120f4565b9050601461133d826101006040519081016040528154909190829060ff16600281111561116e57fe5b600281111561117957fe5b81528154610100808204600160a060020a0390811660208086019190915260a860020a90930467ffffffffffffffff908116604080870191909152600180880154928316606088015268010000000000000000830460ff1615156080880152690100000000000000000090920490921660a08601526002808701805460c090970196909592811615909402600019019093169290920491601f83018190048102019051908101604052809291908181526020018280546001816001161561010002031660029004801561128d5780601f106112625761010080835404028352916020019161128d565b820191906000526020600020905b81548152906001019060200180831161127057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561132f5780601f106113045761010080835404028352916020019161132f565b820191906000526020600020905b81548152906001019060200180831161131257829003601f168201915b50505050508152505061215c565b67ffffffffffffffff161061135157600080fd5b606480549250826001810161136683826122e6565b9160005260206000209060040201600061010060405190810160405280600281526020018a600160a060020a031681526020018867ffffffffffffffff1681526020018967ffffffffffffffff16815260200160001515815260200187600160a060020a031681526020018e8e8080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081526020018c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff1916600183600281111561145857fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a03199091161781556040820151815467ffffffffffffffff9190911660a860020a026000805160206124f5833981519152909116178155606082015160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611550929160200190612312565b5060e08201518160030190805161156b929160200190612312565b505050508167ffffffffffffffff167f9958fc92731727637b02f1ac1e6caf2814442c27e1d962f0c477cd14280f586d89896040516020808252810182905280604081018484808284378201915050935050505060405180910390a25098975050505050505050565b6040516000805160206124d58339815191528152601301604051809103902061161c338260006040518059106109c057505990808252806020026020018201604052506118fd565b151561162757600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b60006116c33388888080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505087878080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508686610ea9565b979650505050505050565b60015481565b60006116de61238c565b823b604051915080825280600060208401863c50806040518082805190602001908083835b602083106117225780518252601f199092019160209182019101611703565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b6000806117918361164c565b151561179c57600080fd5b6117a4610a25565b91506117af826121d1565b15156117ba57600080fd5b600160a060020a038316151561180c5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561180757600080fd5b6118f8565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561186357600080fd5b6102c65a03f1151561187457600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156118dc57600080fd5b6102c65a03f115156118ed57600080fd5b505050604051805150505b505050565b600061190761238c565b6000808451111561192057835160200290508391508082525b600054600160a060020a03161580611a31575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156119c75780820151838201526020016119af565b50505050905090810190601f1680156119f45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515611a1557600080fd5b6102c65a03f11515611a2657600080fd5b505050604051805190505b9695505050505050565b6040516000805160206124d583398151915281526013016040518091039020611a63826121f7565b611a6e3383836118fd565b1515611a7957600080fd5b50506000908152606760205260409020805460ff19169055565b6040516000805160206124d583398151915281526013016040518091039020611adb338260006040518059106109c057505990808252806020026020018201604052506118fd565b1515611ae657600080fd5b506000908152606760205260409020805460ff19166001179055565b6000611b0d886120f4565b805490915033600160a060020a039081166101009092041614611b2f57600080fd5b6001815460ff166002811115611b4157fe5b14611b4b57600080fd5b805461010060a860020a031916610100600160a060020a03891602178155611b7760028201878761239e565b50611b8660038201858561239e565b50805467ffffffffffffffff80841660a860020a026000805160206124f583398151915290921691909117825588167f6586deed9fa035704e9886588d904801e7e86d1ebd926905fa03a0018531b2fd85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600054600160a060020a031681565b6000611c26886120f4565b805490915033600160a060020a039081166101009092041614611c4857600080fd5b6000815460ff166002811115611c5a57fe5b14611c6457600080fd5b805461010060a860020a031916610100600160a060020a03891602178155611c9060028201878761239e565b50611c9f60038201858561239e565b50805467ffffffffffffffff80841660a860020a026000805160206124f583398151915290921691909117825588167f4b2f87168338ea08f27c7f7b2dfe4e61feb620ffe9a6a6a18afeaf94546075bf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600080611d3061238c565b611d3861238c565b6000806000806000611d498a6120f4565b80546002808301805460ff84169d5061010093849004600160a060020a03169c5093945092600181161590920260001901909116046020601f82018190048102016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dfe5780601f10611dd357610100808354040283529160200191611dfe565b820191906000526020600020905b815481529060010190602001808311611de157829003601f168201915b50505050509650806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e9d5780601f10611e7257610100808354040283529160200191611e9d565b820191906000526020600020905b815481529060010190602001808311611e8057829003601f168201915b505084546001909501549c9e9b9d50999b929a60a860020a90940467ffffffffffffffff9081169a5083169850505068010000000000000000810460ff16955069010000000000000000009004600160a060020a03169350915050565b6000611f05886120f4565b805490915033600160a060020a039081166101009092041614611f2757600080fd5b6002815460ff166002811115611f3957fe5b14611f4357600080fd5b805461010060a860020a031916610100600160a060020a03891602178155611f6f60028201878761239e565b50611f7e60038201858561239e565b50805467ffffffffffffffff80841660a860020a026000805160206124f583398151915290921691909117825588167fab039fa652845d2aa9439ffe6f2130ee7203ed63f29b71bed5b3b74f27c5870785856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600061200e612208565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561207557808201518382015260200161205d565b50505050905090810190601f1680156120a25780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156120c057600080fd5b6102c65a03f115156120d157600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b60645460009067ffffffffffffffff83161061210f57600080fd5b6064805467ffffffffffffffff841690811061212757fe5b90600052602060002090600402019050919050565b61214461238c565b61215682600160a060020a031661229f565b92915050565b60008060028351600281111561216e57fe5b1461217557fe5b826060015167ffffffffffffffff1615156121935760019150610963565b6121a083606001516120f4565b90506121c7816101006040519081016040528154909190829060ff16600281111561116e57fe5b6001019392505050565b600080600160a060020a03831615156121ed5760009150610963565b50506000903b1190565b6121ff61238c565b6121568261229f565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561227b57600080fd5b6102c65a03f1151561228c57600080fd5b50505060405180519250829150505b5090565b6122a761238c565b60016040518059106122b65750595b9080825280602002602001820160405250905081816000815181106122d757fe5b60209081029091010152919050565b8154818355818115116118f8576004028160040283600052602060002091820191016118f8919061240c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061235357805160ff1916838001178555612380565b82800160010185558215612380579182015b82811115612380578251825591602001919060010190612365565b5061229b929150612473565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106123df5782800160ff19823516178555612380565b82800160010185558215612380579182015b828111156123805782358255916020019190600101906123f1565b610aa391905b8082111561229b5780547fffffff000000000000000000000000000000000000000000000000000000000090811682556001820180549091169055600061245c600283018261248d565b61246a60038301600061248d565b50600401612412565b610aa391905b8082111561229b5760008155600101612479565b50805460018160011615610100020316600290046000825580601f106124b357506124d1565b601f0160209004906000526020600020908101906124d19190612473565b505600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000ffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffa165627a7a72305820dacc3d286257c383c6a175ee10b827fb6c0039392f2b7472143975104ebc8ba80029",
            "sourceMap": "919:12076:34:-;;;2538:37:33;;;-1:-1:-1;;2538:37:33;;;919:12076:34;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106101875763ffffffff60e060020a600035041663178e6079811461018c5780631c8e8568146101b15780632101a6ad146101d857806324fea3b0146101f857806332ce8ebc1461020b57806332f0a3b51461022b578063387402911461025a5780634eafbcd51461027257806352dc7dcc146102915780635503d9ba146102f157806360b1e057146103045780636293c702146103175780636e802c6a1461033657806372116e92146103f157806379f4542e146104435780637e7db6e1146104625780637f61fa931461048157806380afdea8146104c457806381ea4408146104d75780638322fff2146104f65780638b3dd749146105095780639b3fdf4c1461051c5780639d4941d81461052f578063a1658fad1461054e578063b12b5f76146105b1578063c8ae070f146105c7578063cc19ecf7146105dd578063d4aae0c41461062a578063db7c23141461063d578063eba8ba061461068a578063f6b24b1c146107e2578063f92a79ff1461082f578063fbfa77cf14610880575b600080fd5b341561019757600080fd5b61019f610893565b60405190815260200160405180910390f35b34156101bc57600080fd5b6101c46108b7565b604051901515815260200160405180910390f35b34156101e357600080fd5b6101c467ffffffffffffffff600435166108c0565b341561020357600080fd5b61019f610969565b341561021657600080fd5b610229600480356024810191013561098b565b005b341561023657600080fd5b61023e610a25565b604051600160a060020a03909116815260200160405180910390f35b341561026557600080fd5b6102296004351515610aa6565b341561027d57600080fd5b6101c4600160a060020a0360043516610b0c565b341561029c57600080fd5b6102d4602460048035828101929082013591813591820191013567ffffffffffffffff60443516600160a060020a0360643516610b83565b60405167ffffffffffffffff909116815260200160405180910390f35b34156102fc57600080fd5b61019f610e1a565b341561030f57600080fd5b61019f610e24565b341561032257600080fd5b610229600160a060020a0360043516610e48565b341561034157600080fd5b6102d460048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f0160208091040260200160405190810160405281815292919060208401838380828437509496505050833567ffffffffffffffff169360200135600160a060020a03169250610ea9915050565b34156103fc57600080fd5b6102d46024600480358281019290820135918135918201910135600160a060020a0360443581169067ffffffffffffffff6064358116916084359091169060a43516611115565b341561044e57600080fd5b610229600160a060020a03600435166115d4565b341561046d57600080fd5b6101c4600160a060020a036004351661164c565b341561048c57600080fd5b6102d4602460048035828101929082013591813591820191013567ffffffffffffffff60443516600160a060020a0360643516611652565b34156104cf57600080fd5b61019f6116ce565b34156104e257600080fd5b61019f600160a060020a03600435166116d4565b341561050157600080fd5b61023e611756565b341561051457600080fd5b61019f61175b565b341561052757600080fd5b61019f611761565b341561053a57600080fd5b610229600160a060020a0360043516611785565b341561055957600080fd5b6101c460048035600160a060020a03169060248035919060649060443590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506118fd95505050505050565b34156105bc57600080fd5b610229600435611a3b565b34156105d257600080fd5b610229600435611a93565b34156105e857600080fd5b6102296004803567ffffffffffffffff9081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516611b02565b341561063557600080fd5b61023e611c0c565b341561064857600080fd5b6102296004803567ffffffffffffffff9081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516611c1b565b341561069557600080fd5b6106aa67ffffffffffffffff60043516611d25565b604051808960028111156106ba57fe5b60ff168152600160a060020a03898116602083015267ffffffffffffffff8781166080840152861660a083015284151560c0830152831660e08201526101008282038101604083019081529160608101910189818151815260200191508051906020019080838360005b8381101561073c578082015183820152602001610724565b50505050905090810190601f1680156107695780820380516001836020036101000a031916815260200191505b50838103825288818151815260200191508051906020019080838360005b8381101561079f578082015183820152602001610787565b50505050905090810190601f1680156107cc5780820380516001836020036101000a031916815260200191505b509a505050505050505050505060405180910390f35b34156107ed57600080fd5b6102296004803567ffffffffffffffff9081169160248035600160a060020a031692604435808301939081013592606435908101929101359060843516611efa565b341561083a57600080fd5b61023e60046024813581810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965061200495505050505050565b341561088b57600080fd5b61023e6120e0565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b6000806108cc836120f4565b90506000815460ff1660028111156108e057fe5b14156108ef5760009150610963565b6002815460ff16600281111561090157fe5b1461090857fe5b600181015468010000000000000000900460ff161561092a5760019150610963565b600181015467ffffffffffffffff1615156109485760009150610963565b60018101546109609067ffffffffffffffff166108c0565b91505b50919050565b6040516000805160206124d58339815191528152601301604051809103902081565b60006040516000805160206124d5833981519152815260130160405180910390206109d6338260006040518059106109c05750595b90808252806020026020018201604052506118fd565b15156109e157600080fd5b600091505b60ff821683901015610a1f57610a14848460ff8516818110610a0457fe5b9050602002013560001916611a93565b6001909101906109e6565b50505050565b60008054600160a060020a03161515610a3d57600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610a8657600080fd5b6102c65a03f11515610a9757600080fd5b50505060405180519150505b90565b6040516000805160206124d583398151915281526013016040518091039020610aee338260006040518059106109c057505990808252806020026020018201604052506118fd565b1515610af957600080fd5b506069805460ff19169115919091179055565b606954600090819060ff1680610b295750600160a060020a038316155b15610b375760019150610963565b600160a060020a03831660009081526068602052604090205460ff1615610b615760019150610963565b610b6a836116d4565b60009081526067602052604090205460ff169392505050565b6000610b8e82610b0c565b1515610b9957600080fd5b5060648054908160018101610bae83826122e6565b91600052602060002090600402016000610100604051908101604052806001815260200133600160a060020a031681526020018767ffffffffffffffff168152602001600067ffffffffffffffff16815260200160001515815260200186600160a060020a031681526020018b8b8080601f0160208091040260200160405190810160405281815292919060208401838380828437820191505050505050815260200189898080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff19166001836002811115610ca157fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a03199091161781556040820151815467ffffffffffffffff9190911660a860020a026000805160206124f5833981519152909116178155606082015160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051610d99929160200190612312565b5060e082015181600301908051610db4929160200190612312565b505050508067ffffffffffffffff167fd921f0ff8d5f67ca22b52c5b4be3463a8cabd9d95c28a02dd7c86f9deb3329be86866040516020808252810182905280604081018484808284378201915050935050505060405180910390a29695505050505050565b6064546000190190565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b6040516000805160206124d583398151915281526013016040518091039020610e708261213c565b610e7b3383836118fd565b1515610e8657600080fd5b5050600160a060020a03166000908152606860205260409020805460ff19169055565b6000610eb482610b0c565b1515610ebf57600080fd5b5060648054908160018101610ed483826122e6565b916000526020600020906004020160006101006040519081016040528060008152600160a060020a03808c16602083015267ffffffffffffffff891660408301526000606083018190526080830152871660a082015260c081018a905260e00188905291905081518154829060ff19166001836002811115610f5257fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a03199091161781556040820151815467ffffffffffffffff9190911660a860020a026000805160206124f5833981519152909116178155606082015160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c08201518160020190805161104a929160200190612312565b5060e082015181600301908051611065929160200190612312565b505050508067ffffffffffffffff167fad9c62a4382fd0ddbc4a0cf6c2bc7df75b0b8beb786ff59014f39daaea7f232f8560405160208082528190810183818151815260200191508051906020019080838360005b838110156110d25780820151838201526020016110ba565b50505050905090810190601f1680156110ff5780820380516001836020036101000a031916815260200191505b509250505060405180910390a295945050505050565b60008061112183610b0c565b151561112c57600080fd5b67ffffffffffffffff85161561135157611145856120f4565b9050601461133d826101006040519081016040528154909190829060ff16600281111561116e57fe5b600281111561117957fe5b81528154610100808204600160a060020a0390811660208086019190915260a860020a90930467ffffffffffffffff908116604080870191909152600180880154928316606088015268010000000000000000830460ff1615156080880152690100000000000000000090920490921660a08601526002808701805460c090970196909592811615909402600019019093169290920491601f83018190048102019051908101604052809291908181526020018280546001816001161561010002031660029004801561128d5780601f106112625761010080835404028352916020019161128d565b820191906000526020600020905b81548152906001019060200180831161127057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561132f5780601f106113045761010080835404028352916020019161132f565b820191906000526020600020905b81548152906001019060200180831161131257829003601f168201915b50505050508152505061215c565b67ffffffffffffffff161061135157600080fd5b606480549250826001810161136683826122e6565b9160005260206000209060040201600061010060405190810160405280600281526020018a600160a060020a031681526020018867ffffffffffffffff1681526020018967ffffffffffffffff16815260200160001515815260200187600160a060020a031681526020018e8e8080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505081526020018c8c8080601f016020809104026020016040519081016040528181529291906020840183838082843750505092909352509193925083915050518154829060ff1916600183600281111561145857fe5b021790555060208201518154600160a060020a03919091166101000261010060a860020a03199091161781556040820151815467ffffffffffffffff9190911660a860020a026000805160206124f5833981519152909116178155606082015160018201805467ffffffffffffffff191667ffffffffffffffff929092169190911790556080820151600182018054911515680100000000000000000268ff00000000000000001990921691909117905560a08201518160010160096101000a815481600160a060020a030219169083600160a060020a0316021790555060c082015181600201908051611550929160200190612312565b5060e08201518160030190805161156b929160200190612312565b505050508167ffffffffffffffff167f9958fc92731727637b02f1ac1e6caf2814442c27e1d962f0c477cd14280f586d89896040516020808252810182905280604081018484808284378201915050935050505060405180910390a25098975050505050505050565b6040516000805160206124d58339815191528152601301604051809103902061161c338260006040518059106109c057505990808252806020026020018201604052506118fd565b151561162757600080fd5b50600160a060020a03166000908152606860205260409020805460ff19166001179055565b50600190565b60006116c33388888080601f016020809104026020016040519081016040528181529291906020840183838082843782019150505050505087878080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050508686610ea9565b979650505050505050565b60015481565b60006116de61238c565b823b604051915080825280600060208401863c50806040518082805190602001908083835b602083106117225780518252601f199092019160209182019101611703565b6001836020036101000a03801982511681845116179092525050509190910192506040915050518091039020915050919050565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b6000806117918361164c565b151561179c57600080fd5b6117a4610a25565b91506117af826121d1565b15156117ba57600080fd5b600160a060020a038316151561180c5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f19350505050151561180757600080fd5b6118f8565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561186357600080fd5b6102c65a03f1151561187457600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156118dc57600080fd5b6102c65a03f115156118ed57600080fd5b505050604051805150505b505050565b600061190761238c565b6000808451111561192057835160200290508391508082525b600054600160a060020a03161580611a31575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b838110156119c75780820151838201526020016119af565b50505050905090810190601f1680156119f45780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b1515611a1557600080fd5b6102c65a03f11515611a2657600080fd5b505050604051805190505b9695505050505050565b6040516000805160206124d583398151915281526013016040518091039020611a63826121f7565b611a6e3383836118fd565b1515611a7957600080fd5b50506000908152606760205260409020805460ff19169055565b6040516000805160206124d583398151915281526013016040518091039020611adb338260006040518059106109c057505990808252806020026020018201604052506118fd565b1515611ae657600080fd5b506000908152606760205260409020805460ff19166001179055565b6000611b0d886120f4565b805490915033600160a060020a039081166101009092041614611b2f57600080fd5b6001815460ff166002811115611b4157fe5b14611b4b57600080fd5b805461010060a860020a031916610100600160a060020a03891602178155611b7760028201878761239e565b50611b8660038201858561239e565b50805467ffffffffffffffff80841660a860020a026000805160206124f583398151915290921691909117825588167f6586deed9fa035704e9886588d904801e7e86d1ebd926905fa03a0018531b2fd85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600054600160a060020a031681565b6000611c26886120f4565b805490915033600160a060020a039081166101009092041614611c4857600080fd5b6000815460ff166002811115611c5a57fe5b14611c6457600080fd5b805461010060a860020a031916610100600160a060020a03891602178155611c9060028201878761239e565b50611c9f60038201858561239e565b50805467ffffffffffffffff80841660a860020a026000805160206124f583398151915290921691909117825588167f4b2f87168338ea08f27c7f7b2dfe4e61feb620ffe9a6a6a18afeaf94546075bf85856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600080611d3061238c565b611d3861238c565b6000806000806000611d498a6120f4565b80546002808301805460ff84169d5061010093849004600160a060020a03169c5093945092600181161590920260001901909116046020601f82018190048102016040519081016040528092919081815260200182805460018160011615610100020316600290048015611dfe5780601f10611dd357610100808354040283529160200191611dfe565b820191906000526020600020905b815481529060010190602001808311611de157829003601f168201915b50505050509650806003018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611e9d5780601f10611e7257610100808354040283529160200191611e9d565b820191906000526020600020905b815481529060010190602001808311611e8057829003601f168201915b505084546001909501549c9e9b9d50999b929a60a860020a90940467ffffffffffffffff9081169a5083169850505068010000000000000000810460ff16955069010000000000000000009004600160a060020a03169350915050565b6000611f05886120f4565b805490915033600160a060020a039081166101009092041614611f2757600080fd5b6002815460ff166002811115611f3957fe5b14611f4357600080fd5b805461010060a860020a031916610100600160a060020a03891602178155611f6f60028201878761239e565b50611f7e60038201858561239e565b50805467ffffffffffffffff80841660a860020a026000805160206124f583398151915290921691909117825588167fab039fa652845d2aa9439ffe6f2130ee7203ed63f29b71bed5b3b74f27c5870785856040516020808252810182905280604081018484808284378201915050935050505060405180910390a25050505050505050565b600061200e612208565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561207557808201518382015260200161205d565b50505050905090810190601f1680156120a25780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156120c057600080fd5b6102c65a03f115156120d157600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b60645460009067ffffffffffffffff83161061210f57600080fd5b6064805467ffffffffffffffff841690811061212757fe5b90600052602060002090600402019050919050565b61214461238c565b61215682600160a060020a031661229f565b92915050565b60008060028351600281111561216e57fe5b1461217557fe5b826060015167ffffffffffffffff1615156121935760019150610963565b6121a083606001516120f4565b90506121c7816101006040519081016040528154909190829060ff16600281111561116e57fe5b6001019392505050565b600080600160a060020a03831615156121ed5760009150610963565b50506000903b1190565b6121ff61238c565b6121568261229f565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561227b57600080fd5b6102c65a03f1151561228c57600080fd5b50505060405180519250829150505b5090565b6122a761238c565b60016040518059106122b65750595b9080825280602002602001820160405250905081816000815181106122d757fe5b60209081029091010152919050565b8154818355818115116118f8576004028160040283600052602060002091820191016118f8919061240c565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061235357805160ff1916838001178555612380565b82800160010185558215612380579182015b82811115612380578251825591602001919060010190612365565b5061229b929150612473565b60206040519081016040526000815290565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106123df5782800160ff19823516178555612380565b82800160010185558215612380579182015b828111156123805782358255916020019190600101906123f1565b610aa391905b8082111561229b5780547fffffff000000000000000000000000000000000000000000000000000000000090811682556001820180549091169055600061245c600283018261248d565b61246a60038301600061248d565b50600401612412565b610aa391905b8082111561229b5760008155600101612479565b50805460018160011615610100020316600290046000825580601f106124b357506124d1565b601f0160209004906000526020600020908101906124d19190612473565b505600504c5547494e5f4d414e414745525f524f4c4500000000000000000000000000ffffff0000000000000000ffffffffffffffffffffffffffffffffffffffffffa165627a7a72305820dacc3d286257c383c6a175ee10b827fb6c0039392f2b7472143975104ebc8ba80029",
            "sourceMap": "919:12076:34:-;;;;;;;;;-1:-1:-1;;;919:12076:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11584:478:34;;;;;;;;;;;;;;;;1061:78:32;;;;;;;;;;;;1746:226;;;;;;;;;;;;;;;;;;;;;;;1226::8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1226:226:8;;;;;;;;;;;;;;2602:126:32;;;;;;;;;;;;;;;;2828:450;;;;;;;;;;-1:-1:-1;;;;;2828:450:32;;;;;4892:589:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;4892:589:34;;;;;;;;;;;;;;;;;;;;;;;9934:101;;;;;;;;;;;;565:118:18;;;;;;;;;;;;2304:150:32;;;;;;;;;;-1:-1:-1;;;;;2304:150:32;;;;;2442:611:34;;;;;;;;;;;;;-1:-1:-1;;;;;2442:611:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2442:611:34;;-1:-1:-1;;;2442:611:34;;;;;;;;-1:-1:-1;;;;;2442:611:34;;-1:-1:-1;2442:611:34;;-1:-1:-1;;2442:611:34;7548:901;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;7548:901:34;;;;;;;;;;;;;;;;;;;;;;1218:134:32;;;;;;;;;;-1:-1:-1;;;;;1218:134:32;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;2123:313:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2123:313:34;;;;;113:20:7;;;;;;;;;;;;3356:485:32;;;;;;;;;;-1:-1:-1;;;;;3356:485:32;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;689:115:18;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;2049:174:32;;;;;;;;;;;;;;1592:148;;;;;;;;;;;;;;6235:542:34;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;6235:542:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;86:21:7;;;;;;;;;;;;3693:522:34;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;3693:522:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;10803:574;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;10803:574:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;10803:574:34;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9153:531:34;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;9153:531:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;2582:21:33;;;;;;;;;;;;448:111:18;493:66;448:111;:::o;2538:37:33:-;;;;;;:::o;11584:478:34:-;11658:4;11678:21;11702;11713:9;11702:10;:21::i;:::-;11678:45;-1:-1:-1;11753:21:34;11738:11;;;;:36;;;;;;;;;11734:79;;;11797:5;11790:12;;;;11734:79;11845:23;11830:11;;;;:38;;;;;;;;;11823:46;;;;11884:10;;;;;;;;;11880:52;;;11917:4;11910:11;;;;11880:52;11945:15;;;;;;:20;11941:63;;;11988:5;11981:12;;;;11941:63;12039:15;;;;12021:34;;12039:15;;12021:17;:34::i;:::-;12014:41;;11584:478;;;;;:::o;1061:78:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;1061:78;:::o;1746:226::-;1855:7;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;1865:1:32;1855:11;;1850:116;1868:25;;;;;;1850:116;;;1914:41;1937:14;;:17;;;;;;;;;;;;;;;;;;;1914:22;:41::i;:::-;1895:3;;;;;1850:116;;;1746:226;;;;:::o;1226::8:-;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1226:226:8;;:::o;2602:126:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;2688:17:32;:33;;-1:-1:-1;;2688:33:32;2708:13;;2688:33;;;;;;2602:126::o;2828:450::-;2905:17;;2885:4;;;;2905:17;;;:32;;-1:-1:-1;;;;;;2926:11:32;;;2905:32;2901:74;;;2960:4;2953:11;;;;2901:74;-1:-1:-1;;;;;3028:29:32;;;;;;:23;:29;;;;;;;;3024:71;;;3080:4;3073:11;;;;3024:71;3199:17;3211:4;3199:11;:17::i;:::-;3234:37;;;;:23;:37;;;;;;;;;2828:450;-1:-1:-1;;;2828:450:32:o;4892:589:34:-;5043:17;5085:21;5099:6;5085:13;:21::i;:::-;5077:30;;;;;;;;-1:-1:-1;5154:6:34;:13;;;;5179:254;;;;5154:6;5179:254;;:::i;:::-;;;;;;;;;;;;5204:219;;;;;;;;;5233:24;5204:219;;;;5275:10;-1:-1:-1;;;;;5204:219:34;;;;;5303:10;5204:219;;;;;;5331:1;5204:219;;;;;;5350:5;5204:219;;;;;;5373:6;-1:-1:-1;;;;;5204:219:34;;;;;5397:4;;5204:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5419:3;;5204:219;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;5204:219:34;;;;-1:-1:-1;5179:254:34;;;-1:-1:-1;5179:254:34;;-1:-1:-1;;5179:254:34;;;;;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;;;-1:-1:-1;;;;;;5179:254:34;;;;;;;;;;;;;;;;;-1:-1:-1;;;5179:254:34;-1:-1:-1;;;;;;;;;;;5179:254:34;;;;;;;;;;;;;;;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;5179:254:34;;;;;-1:-1:-1;;;;;5179:254:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;5458:10;5444:30;;;5470:3;;5444:30;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4892:589;;;;;;;;:::o;9934:101::-;10011:6;:13;-1:-1:-1;;10011:17:34;9934:101;:::o;565:118:18:-;617:66;565:118;:::o;2304:150:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2389:9;2393:4;2389:3;:9::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;;;;;;2410:29:32;2442:5;2410:29;;;:23;:29;;;;;:37;;-1:-1:-1;;2410:37:32;;;2304:150::o;2442:611:34:-;2610:14;2648:21;2662:6;2648:13;:21::i;:::-;2640:30;;;;;;;;-1:-1:-1;2714:6:34;:13;;;;2766:245;;;;2714:6;2766:245;;:::i;:::-;;;;;;;;;;;;2791:210;;;;;;;;;2820:21;2791:210;;-1:-1:-1;;;;;2791:210:34;;;;;;;;;;;;;;-1:-1:-1;2791:210:34;;;;;;;;;;;;;;;;;;;;;;;;;;;2766:245;;-1:-1:-1;2766:245:34;;;;;;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;;;-1:-1:-1;;;;;;2766:245:34;;;;;;;;;;;;;;;;;-1:-1:-1;;;2766:245:34;-1:-1:-1;;;;;;;;;;;2766:245:34;;;;;;;;;;;;;;;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2766:245:34;;;;;-1:-1:-1;;;;;2766:245:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;3033:7;3022:24;;;3042:3;3022:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2442:611:34;;;;;;;:::o;7548:901::-;7758:16;7870:21;7799;7813:6;7799:13;:21::i;:::-;7791:30;;;;;;;;7836:18;;;;7832:250;;7894:25;7905:13;7894:10;:25::i;:::-;7870:49;;1096:2;8028:19;8045:1;8028:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8028:19:34;;;;;;;;;;;-1:-1:-1;;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8028:19:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:16;:19::i;:::-;:42;;;8020:51;;;;;;8111:6;:13;;;-1:-1:-1;8111:13:34;8136:267;;;;8111:6;8136:267;;:::i;:::-;;;;;;;;;;;;8161:232;;;;;;;;;8190:23;8161:232;;;;8231:12;-1:-1:-1;;;;;8161:232:34;;;;;8261:10;8161:232;;;;;;8289:13;8161:232;;;;;;8320:5;8161:232;;;;;;8343:6;-1:-1:-1;;;;;8161:232:34;;;;;8367:4;;8161:232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;8389:3;;8161:232;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;8161:232:34;;;;-1:-1:-1;8136:267:34;;;-1:-1:-1;8136:267:34;;-1:-1:-1;;8136:267:34;;;;;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;;;-1:-1:-1;;;;;;8136:267:34;;;;;;;;;;;;;;;;;-1:-1:-1;;;8136:267:34;-1:-1:-1;;;;;;;;;;;8136:267:34;;;;;;;;;;;;;;;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;8136:267:34;;;;;-1:-1:-1;;;;;8136:267:34;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;8427:9;8414:28;;;8438:3;;8414:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7548:901;;;;;;;;;;;:::o;1218:134:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;;;;;;1309:29:32;;;;;:23;:29;;;;;:36;;-1:-1:-1;;1309:36:32;1341:4;1309:36;;;1218:134::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;2123:313:34:-;2271:14;2308:121;2330:10;2354:4;;2308:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2372:3;;2308:121;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2389:10;2413:6;2308:8;:121::i;:::-;2301:128;2123:313;-1:-1:-1;;;;;;;2123:313:34:o;113:20:7:-;;;;:::o;3356:485:32:-;3411:7;3430:19;;:::i;:::-;3551:4;3539:11;3627:4;3621:5;3611:21;;3660:4;3652:6;3645;3786:4;3783:1;3776:4;3768:6;3764:3;3758:4;3746:11;3468:333;3827:6;3817:17;;;;;;;;;;;;;36:153:-1;66:2;58;;36:153;;182:3;176:5;164:6;;-1:-1;;139:3;;;;98:2;89:3;;;;114;36:153;;;274:1;267:3;263:2;259:3;254;250;246;315:4;311:3;305;299:5;295:3;356:4;350:3;344:5;340:3;377:2;365:6;;;-1:-1;;;3:399;;;;;-1:-1;3:399;;-1:-1;;3:399;;;;;;3810:24:32;;3356:485;;;;:::o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;689:115:18:-;738:66;689:115;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;2049:174:32:-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;2142:17;2146:12;2142:3;:17::i;:::-;664:37:8;675:10;687:5;694:6;664:10;:37::i;:::-;656:46;;;;;;;;-1:-1:-1;;2211:5:32;2171:37;;;:23;:37;;;;;:45;;-1:-1:-1;;2171:45:32;;;2049:174::o;1592:148::-;1107:32;;-1:-1:-1;;;;;;;;;;;1107:32:32;;;;;;;;;;;526:47:8;537:10;549:5;570:1;556:16;;;;;;;;;;;;;;;;;;;;;;;526:10;:47::i;:::-;518:56;;;;;;;;-1:-1:-1;1689:37:32;;;;:23;:37;;;;;:44;;-1:-1:-1;;1689:44:32;1729:4;1689:44;;;1592:148::o;6235:542:34:-;6418:28;6449:22;6460:10;6449;:22::i;:::-;6503:13;;6418:53;;-1:-1:-1;6489:10:34;-1:-1:-1;;;;;6489:27:34;;;6503:13;;;;;6489:27;6481:36;;;;;;6557:24;6535:18;;;;:46;;;;;;;;;6527:55;;;;;;6592:23;;-1:-1:-1;;;;;;6592:23:34;;-1:-1:-1;;;;;6592:23:34;;;;;;6625;:13;;;6641:7;;6625:23;:::i;:::-;-1:-1:-1;6658:21:34;:12;;;6673:6;;6658:21;:::i;:::-;-1:-1:-1;6689:35:34;;;;;;-1:-1:-1;;;6689:35:34;-1:-1:-1;;;;;;;;;;;6689:35:34;;;;;;;;;6735;;;6763:6;;6735:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;6235:542;;;;;;;;:::o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;3693:522:34:-;3870:25;3898:19;3909:7;3898:10;:19::i;:::-;3949:10;;3870:47;;-1:-1:-1;3935:10:34;-1:-1:-1;;;;;3935:24:34;;;3949:10;;;;;3935:24;3927:33;;;;;;3997:21;3978:15;;;;:40;;;;;;;;;3970:49;;;;;;4048:20;;-1:-1:-1;;;;;;4048:20:34;;-1:-1:-1;;;;;4048:20:34;;;;;;4078;:10;;;4091:7;;4078:20;:::i;:::-;-1:-1:-1;4108:18:34;:9;;;4120:6;;4108:18;:::i;:::-;-1:-1:-1;4136:32:34;;;;;;-1:-1:-1;;;4136:32:34;-1:-1:-1;;;;;;;;;;;4136:32:34;;;;;;;;;4179:29;;;4201:6;;4179:29;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3693:522;;;;;;;;:::o;10803:574::-;10875:25;10910:12;10932:11;;:::i;:::-;10953:10;;:::i;:::-;10973:17;11000:20;11030:13;11053:14;11084:21;11108:19;11119:7;11108:10;:19::i;:::-;11149:11;;11200:6;;;;11193:13;;11149:11;;;;-1:-1:-1;11149:11:34;11177:6;;;;-1:-1:-1;;;;;11177:6:34;;-1:-1:-1;11149:11:34;;-1:-1:-1;11200:6:34;11149:11;11193:13;;;;;;-1:-1:-1;;11193:13:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;11222:1;:5;;11216:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;11250:12:34;;11288:15;;;;;10803:574;;;;-1:-1:-1;10803:574:34;;11216:11;;-1:-1:-1;;;11250:12:34;;;;;;;;-1:-1:-1;11288:15:34;;;-1:-1:-1;;;11324:10:34;;;;;;-1:-1:-1;11361:8:34;;;-1:-1:-1;;;;;11361:8:34;;-1:-1:-1;10803:574:34;-1:-1:-1;;10803:574:34:o;9153:531::-;9334:27;9364:21;9375:9;9364:10;:21::i;:::-;9418:12;;9334:51;;-1:-1:-1;9404:10:34;-1:-1:-1;;;;;9404:26:34;;;9418:12;;;;;9404:26;9396:35;;;;;;9470:23;9449:17;;;;:44;;;;;;;;;9441:53;;;;;;9505:22;;-1:-1:-1;;;;;;9505:22:34;;-1:-1:-1;;;;;9505:22:34;;;;;;9537;:12;;;9552:7;;9537:22;:::i;:::-;-1:-1:-1;9569:20:34;:11;;;9583:6;;9569:20;:::i;:::-;-1:-1:-1;9599:34:34;;;;;;-1:-1:-1;;;9599:34:34;-1:-1:-1;;;;;;;;;;;9599:34:34;;;;;;;;;9644:33;;;9670:6;;9644:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9153:531;;;;;;;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;2582:21:33:-;;;;;;-1:-1:-1;;;;;2582:21:33;;:::o;12300:161:34:-;12408:6;:13;12359:11;;12398:23;;;;12390:32;;;;;;12439:6;:15;;;;;;;;;;;;;;;;;;;;;;12432:22;;12300:161;;;:::o;355:101:2:-;403:11;;:::i;:::-;433:16;445:2;-1:-1:-1;;;;;437:11:2;433:3;:16::i;:::-;426:23;355:101;-1:-1:-1;;355:101:2:o;12677:316:34:-;12740:6;;12780:23;12765:1;:11;:38;;;;;;;;;12758:46;;;;12819:1;:15;;;:20;;;12815:60;;;12862:1;12855:9;;;;12815:60;12914:27;12925:1;:15;;;12914:10;:27::i;:::-;12885:56;;12958:24;12975:6;12958:24;;;;;;;;;;;;;;;;;;;;;;;;;12985:1;12958:28;;12677:316;-1:-1:-1;;;12677:316:34:o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;-1:-1:-1;;289:1:14;244:11;;282:8;;53:244::o;116:101:2:-;164:11;;:::i;:::-;194:16;206:2;194:3;:16::i;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;1195:37:16;;-1:-1:-1;;1088:200:16;;;:::o;1359:117:2:-;1407:11;;:::i;:::-;1448:1;1434:16;;;;;;;;;;;;;;;;;;;;;;;;1430:20;;1467:2;1460:1;1462;1460:4;;;;;;;;;;;;;;;;:9;1359:117;;-1:-1:-1;1359:117:2:o;919:12076:34:-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;919:12076:34;;;-1:-1:-1;919:12076:34;:::i;:::-;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;919:12076:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "1907200",
              "executionCost": "22225",
              "totalCost": "1929425"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "236",
              "ETH()": "732",
              "EVMSCRIPT_REGISTRY_APP()": "698",
              "EVMSCRIPT_REGISTRY_APP_ID()": "456",
              "PLUGIN_MANAGER_ROLE()": "infinite",
              "addDelegate(string,string,uint64,address)": "infinite",
              "addGiver(address,string,string,uint64,address)": "infinite",
              "addGiver(string,string,uint64,address)": "infinite",
              "addProject(string,string,address,uint64,uint64,address)": "infinite",
              "addValidPluginContract(bytes32)": "infinite",
              "addValidPluginContracts(bytes32[])": "infinite",
              "addValidPluginInstance(address)": "infinite",
              "allowRecoverability(address)": "655",
              "appId()": "810",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "getCodeHash(address)": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "876",
              "getPledgeAdmin(uint64)": "infinite",
              "getRecoveryVault()": "infinite",
              "isProjectCanceled(uint64)": "infinite",
              "isValidPlugin(address)": "infinite",
              "kernel()": "1183",
              "numberOfPledgeAdmins()": "643",
              "removeValidPluginContract(bytes32)": "infinite",
              "removeValidPluginInstance(address)": "infinite",
              "transferToVault(address)": "infinite",
              "updateDelegate(uint64,address,string,string,uint64)": "infinite",
              "updateGiver(uint64,address,string,string,uint64)": "infinite",
              "updateProject(uint64,address,string,string,uint64)": "infinite",
              "useWhitelist(bool)": "infinite",
              "vault()": "1304",
              "whitelistDisabled()": "470"
            },
            "internal": {
              "_findAdmin(uint64)": "563",
              "_getProjectLevel(struct LiquidPledgingStorage.PledgeAdmin memory)": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "PLUGIN_MANAGER_ROLE()": "24fea3b0",
            "addDelegate(string,string,uint64,address)": "52dc7dcc",
            "addGiver(address,string,string,uint64,address)": "6e802c6a",
            "addGiver(string,string,uint64,address)": "7f61fa93",
            "addProject(string,string,address,uint64,uint64,address)": "72116e92",
            "addValidPluginContract(bytes32)": "c8ae070f",
            "addValidPluginContracts(bytes32[])": "32ce8ebc",
            "addValidPluginInstance(address)": "79f4542e",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "getCodeHash(address)": "81ea4408",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getPledgeAdmin(uint64)": "eba8ba06",
            "getRecoveryVault()": "32f0a3b5",
            "isProjectCanceled(uint64)": "2101a6ad",
            "isValidPlugin(address)": "4eafbcd5",
            "kernel()": "d4aae0c4",
            "numberOfPledgeAdmins()": "5503d9ba",
            "removeValidPluginContract(bytes32)": "b12b5f76",
            "removeValidPluginInstance(address)": "6293c702",
            "transferToVault(address)": "9d4941d8",
            "updateDelegate(uint64,address,string,string,uint64)": "cc19ecf7",
            "updateGiver(uint64,address,string,string,uint64)": "db7c2314",
            "updateProject(uint64,address,string,string,uint64)": "f6b24b1c",
            "useWhitelist(bool)": "38740291",
            "vault()": "fbfa77cf",
            "whitelistDisabled()": "1c8e8568"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"projectId\",\"type\":\"uint64\"}],\"name\":\"isProjectCanceled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PLUGIN_MANAGER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHashes\",\"type\":\"bytes32[]\"}],\"name\":\"addValidPluginContracts\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"useWhitelist\",\"type\":\"bool\"}],\"name\":\"useWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"isValidPlugin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addDelegate\",\"outputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPledgeAdmins\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"removeValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addGiver\",\"outputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"projectAdmin\",\"type\":\"address\"},{\"name\":\"parentProject\",\"type\":\"uint64\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addProject\",\"outputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"addValidPluginInstance\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"name\":\"addGiver\",\"outputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"getCodeHash\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"removeValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"contractHash\",\"type\":\"bytes32\"}],\"name\":\"addValidPluginContract\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateDelegate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idGiver\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateGiver\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idAdmin\",\"type\":\"uint64\"}],\"name\":\"getPledgeAdmin\",\"outputs\":[{\"name\":\"adminType\",\"type\":\"uint8\"},{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"parentProject\",\"type\":\"uint64\"},{\"name\":\"canceled\",\"type\":\"bool\"},{\"name\":\"plugin\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"idProject\",\"type\":\"uint64\"},{\"name\":\"newAddr\",\"type\":\"address\"},{\"name\":\"newName\",\"type\":\"string\"},{\"name\":\"newUrl\",\"type\":\"string\"},{\"name\":\"newCommitTime\",\"type\":\"uint64\"}],\"name\":\"updateProject\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idGiver\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"GiverAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idGiver\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"GiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DelegateAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idDelegate\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"DelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProjectAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"idProject\",\"type\":\"uint64\"},{\"indexed\":false,\"name\":\"url\",\"type\":\"string\"}],\"name\":\"ProjectUpdated\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"addDelegate(string,string,uint64,address)\":{\"params\":{\"commitTime\":\"Sets the length of time in seconds that this delegate  can be vetoed. Whenever this delegate is in a delegate chain the time  allowed to veto any event must be greater than or equal to this time.\",\"name\":\"The name used to identify the Delegate\",\"plugin\":\"This is Delegate's liquid pledge plugin allowing for  extended functionality\",\"url\":\"The link to the Delegate's profile often an IPFS hash\"},\"return\":\"idxDelegate The id number used to reference this Delegate within  the PLEDGE_ADMIN array\"},\"addGiver(string,string,uint64,address)\":{\"params\":{\"commitTime\":\"The length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project\",\"name\":\"The name used to identify the Giver\",\"plugin\":\"This is Giver's liquid pledge plugin allowing for  extended functionality\",\"url\":\"The link to the Giver's profile often an IPFS hash\"},\"return\":\"idGiver The id number used to reference this Admin\"},\"addProject(string,string,address,uint64,uint64,address)\":{\"params\":{\"commitTime\":\"Sets the length of time in seconds the Project has to   veto when the Project delegates to another Delegate and they pledge   those funds to a project\",\"name\":\"The name used to identify the Project\",\"parentProject\":\"The Admin id number for the parent project or 0 if  there is no parentProject\",\"plugin\":\"This is Project's liquid pledge plugin allowing for  extended functionality\",\"projectAdmin\":\"The address for the trusted project manager\",\"url\":\"The link to the Project's profile often an IPFS hash\"},\"return\":\"idProject The id number used to reference this Admin\"},\"addValidPluginContract(bytes32)\":{\"details\":\"add a contract to the plugin whitelist.\"},\"addValidPluginInstance(address)\":{\"details\":\"adds an instance of a plugin to the whitelist\"},\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"getCodeHash(address)\":{\"return\":\"the hash of the code for the given address\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getPledgeAdmin(uint64)\":{\"return\":\"addr Account or contract address for adminname Name of the pledgeAdminurl The link to the Project's profile often an IPFS hashcommitTime The length of time in seconds the Admin has to veto   when the Admin delegates to a Delegate and that Delegate pledges those   funds to a projectparentProject The Admin id number for the parent project or 0  if there is no parentProjectcanceled 0 for Delegates & Givers, true if a Project has been  canceledplugin This is Project's liquidPledging plugin allowing for  extended functionality\"},\"isProjectCanceled(uint64)\":{\"params\":{\"projectId\":\"The Admin id number used to specify the Project\"},\"return\":\"True if the Project has been canceled\"},\"numberOfPledgeAdmins()\":{\"return\":\"The total number of admins (Givers, Delegates and Projects) .\"},\"removeValidPluginContract(bytes32)\":{\"details\":\"removes a contract from the plugin whitelist\"},\"removeValidPluginInstance(address)\":{\"details\":\"removes an instance of a plugin to the whitelist\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"updateDelegate(uint64,address,string,string,uint64)\":{\"params\":{\"idDelegate\":\"The Admin id number used to specify the Delegate\",\"newAddr\":\"The new address that represents this Delegate\",\"newCommitTime\":\"Sets the length of time in seconds that this  delegate can be vetoed. Whenever this delegate is in a delegate chain  the time allowed to veto any event must be greater than or equal to  this time.\",\"newName\":\"The new name used to identify the Delegate\",\"newUrl\":\"The new link to the Delegate's profile often an IPFS hash\"}},\"updateGiver(uint64,address,string,string,uint64)\":{\"params\":{\"idGiver\":\"This is the Admin id number used to specify the Giver\",\"newAddr\":\"The new address that represents this Giver\",\"newCommitTime\":\"Sets the length of time in seconds the Giver has to   veto when the Giver's delegates Pledge funds to a project\",\"newName\":\"The new name used to identify the Giver\",\"newUrl\":\"The new link to the Giver's profile often an IPFS hash\"}},\"updateProject(uint64,address,string,string,uint64)\":{\"params\":{\"idProject\":\"The Admin id number used to specify the Project\",\"newAddr\":\"The new address that represents this Project\",\"newCommitTime\":\"Sets the length of time in seconds the Project has  to veto when the Project delegates to a Delegate and they pledge those  funds to a project\",\"newName\":\"The new name used to identify the Project\",\"newUrl\":\"The new link to the Project's profile often an IPFS hash\"}},\"useWhitelist(bool)\":{\"details\":\"enable/disable the plugin whitelist.\"}}},\"userdoc\":{\"methods\":{\"addDelegate(string,string,uint64,address)\":{\"notice\":\"Creates a Delegate Admin with the `msg.sender` as the Admin addr\"},\"addGiver(string,string,uint64,address)\":{\"notice\":\"/////////////////Creates a Giver Admin with the `msg.sender` as the Admin address\"},\"addProject(string,string,address,uint64,uint64,address)\":{\"notice\":\"Creates a Project Admin with the `msg.sender` as the Admin addr\"},\"addValidPluginContract(bytes32)\":{\"notice\":\"Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`\"},\"getPledgeAdmin(uint64)\":{\"notice\":\"A constant getter to check the details of a specified Admin\"},\"isProjectCanceled(uint64)\":{\"notice\":\"A getter to find if a specified Project has been canceled\"},\"isValidPlugin(address)\":{\"notice\":\"check if the contract at the provided address is in the plugin whitelist\"},\"numberOfPledgeAdmins()\":{\"notice\":\"//////////////////////////A constant getter used to check how many total Admins exist\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"updateDelegate(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Delegate's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Delegate\"},\"updateGiver(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Giver's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Giver\"},\"updateProject(uint64,address,string,string,uint64)\":{\"notice\":\"Updates a Project's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin or a parentProject,  and it must be called by the current address of the Project\"},\"useWhitelist(bool)\":{\"notice\":\"you better know what you're doing if you are going to disable it\"}}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/PledgeAdmins.sol\":\"PledgeAdmins\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\ncontract LiquidPledgingACLHelpers {\\n    function arr(uint64 a, uint64 b, address c, uint d, address e) internal pure returns(uint[] r) {\\n        r = new uint[](4);\\n        r[0] = uint(a);\\n        r[1] = uint(b);\\n        r[2] = uint(c);\\n        r[3] = d;\\n        r[4] = uint(e);\\n    }\\n\\n    function arr(bool a) internal pure returns (uint[] r) {\\n        r = new uint[](1);\\n        uint _a;\\n        assembly {\\n            _a := a // forced casting\\n        }\\n        r[0] = _a;\\n    }\\n}\",\"keccak256\":\"0xb675a7a788bf656d4c3c78f3b4cf6645afb432939d1a4c38d70e01d068b0ce62\"},\"giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\nimport \\\"./LiquidPledgingACLHelpers.sol\\\";\\n\\ncontract LiquidPledgingPlugins is AragonApp, LiquidPledgingStorage, LiquidPledgingACLHelpers {\\n\\n    bytes32 constant public PLUGIN_MANAGER_ROLE = keccak256(\\\"PLUGIN_MANAGER_ROLE\\\");\\n\\n    /**\\n    * @dev adds an instance of a plugin to the whitelist\\n    */\\n    function addValidPluginInstance(address addr) auth(PLUGIN_MANAGER_ROLE) external {\\n        pluginInstanceWhitelist[addr] = true;\\n    }\\n\\n    /**\\n    * @dev add a contract to the plugin whitelist.\\n    * @notice Proxy contracts should never be added using this method. Each individual\\n    *         proxy instance should be added by calling `addValidPluginInstance`\\n    */\\n    function addValidPluginContract(bytes32 contractHash) auth(PLUGIN_MANAGER_ROLE) public {\\n        pluginContractWhitelist[contractHash] = true;\\n    }\\n\\n    function addValidPluginContracts(bytes32[] contractHashes) external auth(PLUGIN_MANAGER_ROLE) {\\n        for (uint8 i = 0; i < contractHashes.length; i++) {\\n            addValidPluginContract(contractHashes[i]);\\n        }\\n    }\\n\\n    /**\\n    * @dev removes a contract from the plugin whitelist\\n    */\\n    function removeValidPluginContract(bytes32 contractHash) external authP(PLUGIN_MANAGER_ROLE, arr(contractHash)) {\\n        pluginContractWhitelist[contractHash] = false;\\n    }\\n\\n    /**\\n    * @dev removes an instance of a plugin to the whitelist\\n    */\\n    function removeValidPluginInstance(address addr) external authP(PLUGIN_MANAGER_ROLE, arr(addr)) {\\n        pluginInstanceWhitelist[addr] = false;\\n    }\\n\\n    /**\\n    * @dev enable/disable the plugin whitelist.\\n    * @notice you better know what you're doing if you are going to disable it\\n    */\\n    function useWhitelist(bool useWhitelist) external auth(PLUGIN_MANAGER_ROLE) {\\n        whitelistDisabled = !useWhitelist;\\n    }\\n\\n    /**\\n    * check if the contract at the provided address is in the plugin whitelist\\n    */\\n    function isValidPlugin(address addr) public view returns(bool) {\\n        if (whitelistDisabled || addr == 0x0) {\\n            return true;\\n        }\\n\\n        // first check pluginInstances\\n        if (pluginInstanceWhitelist[addr]) {\\n            return true;\\n        }\\n\\n        // if the addr isn't a valid instance, check the contract code\\n        bytes32 contractHash = getCodeHash(addr);\\n\\n        return pluginContractWhitelist[contractHash];\\n    }\\n\\n    /**\\n    * @return the hash of the code for the given address\\n    */\\n    function getCodeHash(address addr) public view returns(bytes32) {\\n        bytes memory o_code;\\n        assembly {\\n            // retrieve the size of the code\\n            let size := extcodesize(addr)\\n            // allocate output byte array\\n            o_code := mload(0x40)\\n            mstore(o_code, size) // store length in memory\\n            // actually retrieve the code\\n            extcodecopy(addr, add(o_code, 0x20), 0, size)\\n        }\\n        return keccak256(o_code);\\n    }\\n}\",\"keccak256\":\"0x109373f81759324d3d39f0b2b8fd02072c2b0e502901c14e1b06ca91a05a5ae2\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"},\"giveth-liquidpledging/contracts/PledgeAdmins.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\nimport \\\"./LiquidPledgingPlugins.sol\\\";\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\n\\ncontract PledgeAdmins is AragonApp, LiquidPledgingPlugins {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_SUBPROJECT_LEVEL = 20;\\n    uint constant MAX_INTERPROJECT_LEVEL = 20;\\n\\n    // Events\\n    event GiverAdded(uint64 indexed idGiver, string url);\\n    event GiverUpdated(uint64 indexed idGiver, string url);\\n    event DelegateAdded(uint64 indexed idDelegate, string url);\\n    event DelegateUpdated(uint64 indexed idDelegate, string url);\\n    event ProjectAdded(uint64 indexed idProject, string url);\\n    event ProjectUpdated(uint64 indexed idProject, string url);\\n\\n////////////////////\\n// Public functions\\n////////////////////\\n\\n    /// @notice Creates a Giver Admin with the `msg.sender` as the Admin address\\n    /// @param name The name used to identify the Giver\\n    /// @param url The link to the Giver's profile often an IPFS hash\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param plugin This is Giver's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idGiver The id number used to reference this Admin\\n    function addGiver(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idGiver)\\n    {\\n        return addGiver(\\n            msg.sender,\\n            name,\\n            url,\\n            commitTime,\\n            plugin\\n        );\\n    }\\n\\n    function addGiver(\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) public returns (uint64 idGiver)\\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idGiver = uint64(admins.length);\\n\\n        // Save the fields\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Giver,\\n                addr,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        GiverAdded(idGiver, url);\\n    }\\n\\n    /// @notice Updates a Giver's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Giver\\n    /// @param idGiver This is the Admin id number used to specify the Giver\\n    /// @param newAddr The new address that represents this Giver\\n    /// @param newName The new name used to identify the Giver\\n    /// @param newUrl The new link to the Giver's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    function updateGiver(\\n        uint64 idGiver,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage giver = _findAdmin(idGiver);\\n        require(msg.sender == giver.addr);\\n        require(giver.adminType == PledgeAdminType.Giver); // Must be a Giver\\n        giver.addr = newAddr;\\n        giver.name = newName;\\n        giver.url = newUrl;\\n        giver.commitTime = newCommitTime;\\n\\n        GiverUpdated(idGiver, newUrl);\\n    }\\n\\n    /// @notice Creates a Delegate Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Delegate\\n    /// @param url The link to the Delegate's profile often an IPFS hash\\n    /// @param commitTime Sets the length of time in seconds that this delegate\\n    ///  can be vetoed. Whenever this delegate is in a delegate chain the time\\n    ///  allowed to veto any event must be greater than or equal to this time.\\n    /// @param plugin This is Delegate's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idxDelegate The id number used to reference this Delegate within\\n    ///  the PLEDGE_ADMIN array\\n    function addDelegate(\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idDelegate) \\n    {\\n        require(isValidPlugin(plugin)); // Plugin check\\n\\n        idDelegate = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Delegate,\\n                msg.sender,\\n                commitTime,\\n                0,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        DelegateAdded(idDelegate, url);\\n    }\\n\\n    /// @notice Updates a Delegate's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin, and it must be called\\n    ///  by the current address of the Delegate\\n    /// @param idDelegate The Admin id number used to specify the Delegate\\n    /// @param newAddr The new address that represents this Delegate\\n    /// @param newName The new name used to identify the Delegate\\n    /// @param newUrl The new link to the Delegate's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds that this\\n    ///  delegate can be vetoed. Whenever this delegate is in a delegate chain\\n    ///  the time allowed to veto any event must be greater than or equal to\\n    ///  this time.\\n    function updateDelegate(\\n        uint64 idDelegate,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage delegate = _findAdmin(idDelegate);\\n        require(msg.sender == delegate.addr);\\n        require(delegate.adminType == PledgeAdminType.Delegate);\\n        delegate.addr = newAddr;\\n        delegate.name = newName;\\n        delegate.url = newUrl;\\n        delegate.commitTime = newCommitTime;\\n\\n        DelegateUpdated(idDelegate, newUrl);\\n    }\\n\\n    /// @notice Creates a Project Admin with the `msg.sender` as the Admin addr\\n    /// @param name The name used to identify the Project\\n    /// @param url The link to the Project's profile often an IPFS hash\\n    /// @param projectAdmin The address for the trusted project manager\\n    /// @param parentProject The Admin id number for the parent project or 0 if\\n    ///  there is no parentProject\\n    /// @param commitTime Sets the length of time in seconds the Project has to\\n    ///   veto when the Project delegates to another Delegate and they pledge\\n    ///   those funds to a project\\n    /// @param plugin This is Project's liquid pledge plugin allowing for\\n    ///  extended functionality\\n    /// @return idProject The id number used to reference this Admin\\n    function addProject(\\n        string name,\\n        string url,\\n        address projectAdmin,\\n        uint64 parentProject,\\n        uint64 commitTime,\\n        ILiquidPledgingPlugin plugin\\n    ) external returns (uint64 idProject) \\n    {\\n        require(isValidPlugin(plugin));\\n\\n        if (parentProject != 0) {\\n            PledgeAdmin storage a = _findAdmin(parentProject);\\n            // getProjectLevel will check that parentProject has a `Project` adminType\\n            require(_getProjectLevel(a) < MAX_SUBPROJECT_LEVEL);\\n        }\\n\\n        idProject = uint64(admins.length);\\n\\n        admins.push(\\n            PledgeAdmin(\\n                PledgeAdminType.Project,\\n                projectAdmin,\\n                commitTime,\\n                parentProject,\\n                false,\\n                plugin,\\n                name,\\n                url)\\n        );\\n\\n        ProjectAdded(idProject, url);\\n    }\\n\\n    /// @notice Updates a Project's info to change the address, name, url, or\\n    ///  commitTime, it cannot be used to change a plugin or a parentProject,\\n    ///  and it must be called by the current address of the Project\\n    /// @param idProject The Admin id number used to specify the Project\\n    /// @param newAddr The new address that represents this Project\\n    /// @param newName The new name used to identify the Project\\n    /// @param newUrl The new link to the Project's profile often an IPFS hash\\n    /// @param newCommitTime Sets the length of time in seconds the Project has\\n    ///  to veto when the Project delegates to a Delegate and they pledge those\\n    ///  funds to a project\\n    function updateProject(\\n        uint64 idProject,\\n        address newAddr,\\n        string newName,\\n        string newUrl,\\n        uint64 newCommitTime\\n    ) external \\n    {\\n        PledgeAdmin storage project = _findAdmin(idProject);\\n\\n        require(msg.sender == project.addr);\\n        require(project.adminType == PledgeAdminType.Project);\\n\\n        project.addr = newAddr;\\n        project.name = newName;\\n        project.url = newUrl;\\n        project.commitTime = newCommitTime;\\n\\n        ProjectUpdated(idProject, newUrl);\\n    }\\n\\n/////////////////////////////\\n// Public constant functions\\n/////////////////////////////\\n\\n    /// @notice A constant getter used to check how many total Admins exist\\n    /// @return The total number of admins (Givers, Delegates and Projects) .\\n    function numberOfPledgeAdmins() external view returns(uint) {\\n        return admins.length - 1;\\n    }\\n\\n    /// @notice A constant getter to check the details of a specified Admin\\n    /// @return addr Account or contract address for admin\\n    /// @return name Name of the pledgeAdmin\\n    /// @return url The link to the Project's profile often an IPFS hash\\n    /// @return commitTime The length of time in seconds the Admin has to veto\\n    ///   when the Admin delegates to a Delegate and that Delegate pledges those\\n    ///   funds to a project\\n    /// @return parentProject The Admin id number for the parent project or 0\\n    ///  if there is no parentProject\\n    /// @return canceled 0 for Delegates & Givers, true if a Project has been\\n    ///  canceled\\n    /// @return plugin This is Project's liquidPledging plugin allowing for\\n    ///  extended functionality\\n    function getPledgeAdmin(uint64 idAdmin) external view returns (\\n        PledgeAdminType adminType,\\n        address addr,\\n        string name,\\n        string url,\\n        uint64 commitTime,\\n        uint64 parentProject,\\n        bool canceled,\\n        address plugin\\n    ) {\\n        PledgeAdmin storage a = _findAdmin(idAdmin);\\n        adminType = a.adminType;\\n        addr = a.addr;\\n        name = a.name;\\n        url = a.url;\\n        commitTime = a.commitTime;\\n        parentProject = a.parentProject;\\n        canceled = a.canceled;\\n        plugin = address(a.plugin);\\n    }\\n\\n    /// @notice A getter to find if a specified Project has been canceled\\n    /// @param projectId The Admin id number used to specify the Project\\n    /// @return True if the Project has been canceled\\n    function isProjectCanceled(uint64 projectId)\\n        public view returns (bool)\\n    {\\n        PledgeAdmin storage a = _findAdmin(projectId);\\n\\n        if (a.adminType == PledgeAdminType.Giver) {\\n            return false;\\n        }\\n\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.canceled) {\\n            return true;\\n        }\\n        if (a.parentProject == 0) {\\n            return false;\\n        }\\n\\n        return isProjectCanceled(a.parentProject);\\n    }\\n\\n///////////////////\\n// Internal methods\\n///////////////////\\n\\n    /// @notice A getter to look up a Admin's details\\n    /// @param idAdmin The id for the Admin to lookup\\n    /// @return The PledgeAdmin struct for the specified Admin\\n    function _findAdmin(uint64 idAdmin) internal view returns (PledgeAdmin storage) {\\n        require(idAdmin < admins.length);\\n        return admins[idAdmin];\\n    }\\n\\n    /// @notice Find the level of authority a specific Project has\\n    ///  using a recursive loop\\n    /// @param a The project admin being queried\\n    /// @return The level of authority a specific Project has\\n    function _getProjectLevel(PledgeAdmin a) internal view returns(uint64) {\\n        assert(a.adminType == PledgeAdminType.Project);\\n\\n        if (a.parentProject == 0) {\\n            return(1);\\n        }\\n\\n        PledgeAdmin storage parent = _findAdmin(a.parentProject);\\n        return _getProjectLevel(parent) + 1;\\n    }\\n}\",\"keccak256\":\"0x06bc6171a12d31aaa05dce4217e107555f8289182046a0bd8da615c38faae3f5\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "addDelegate(string,string,uint64,address)": {
              "notice": "Creates a Delegate Admin with the `msg.sender` as the Admin addr"
            },
            "addGiver(string,string,uint64,address)": {
              "notice": "/////////////////Creates a Giver Admin with the `msg.sender` as the Admin address"
            },
            "addProject(string,string,address,uint64,uint64,address)": {
              "notice": "Creates a Project Admin with the `msg.sender` as the Admin addr"
            },
            "addValidPluginContract(bytes32)": {
              "notice": "Proxy contracts should never be added using this method. Each individual        proxy instance should be added by calling `addValidPluginInstance`"
            },
            "getPledgeAdmin(uint64)": {
              "notice": "A constant getter to check the details of a specified Admin"
            },
            "isProjectCanceled(uint64)": {
              "notice": "A getter to find if a specified Project has been canceled"
            },
            "isValidPlugin(address)": {
              "notice": "check if the contract at the provided address is in the plugin whitelist"
            },
            "numberOfPledgeAdmins()": {
              "notice": "//////////////////////////A constant getter used to check how many total Admins exist"
            },
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            },
            "updateDelegate(uint64,address,string,string,uint64)": {
              "notice": "Updates a Delegate's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Delegate"
            },
            "updateGiver(uint64,address,string,string,uint64)": {
              "notice": "Updates a Giver's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin, and it must be called  by the current address of the Giver"
            },
            "updateProject(uint64,address,string,string,uint64)": {
              "notice": "Updates a Project's info to change the address, name, url, or  commitTime, it cannot be used to change a plugin or a parentProject,  and it must be called by the current address of the Project"
            },
            "useWhitelist(bool)": {
              "notice": "you better know what you're doing if you are going to disable it"
            }
          }
        }
      }
    },
    "giveth-liquidpledging/contracts/Pledges.sol": {
      "Pledges": {
        "abi": [
          {
            "constant": true,
            "inputs": [],
            "name": "APP_ADDR_NAMESPACE",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "whitelistDisabled",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "numberOfPledges",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getRecoveryVault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "idPledge",
                "type": "uint64"
              }
            ],
            "name": "getPledge",
            "outputs": [
              {
                "name": "amount",
                "type": "uint256"
              },
              {
                "name": "owner",
                "type": "uint64"
              },
              {
                "name": "nDelegates",
                "type": "uint64"
              },
              {
                "name": "intendedProject",
                "type": "uint64"
              },
              {
                "name": "commitTime",
                "type": "uint64"
              },
              {
                "name": "oldPledge",
                "type": "uint64"
              },
              {
                "name": "token",
                "type": "address"
              },
              {
                "name": "pledgeState",
                "type": "uint8"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP_ID",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "token",
                "type": "address"
              }
            ],
            "name": "allowRecoverability",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "appId",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "ETH",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "getInitializationBlock",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "EVMSCRIPT_REGISTRY_APP",
            "outputs": [
              {
                "name": "",
                "type": "bytes32"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_token",
                "type": "address"
              }
            ],
            "name": "transferToVault",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_sender",
                "type": "address"
              },
              {
                "name": "_role",
                "type": "bytes32"
              },
              {
                "name": "params",
                "type": "uint256[]"
              }
            ],
            "name": "canPerform",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "kernel",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_script",
                "type": "bytes"
              }
            ],
            "name": "getExecutor",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [],
            "name": "vault",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          }
        ],
        "devdoc": {
          "methods": {
            "allowRecoverability(address)": {
              "details": "By default deriving from AragonApp makes it recoverable",
              "params": {
                "token": "Token address that would be recovered"
              },
              "return": "bool whether the app allows the recovery"
            },
            "getInitializationBlock()": {
              "return": "Block number in which the contract was initialized"
            },
            "getPledge(uint64)": {
              "params": {
                "idPledge": "the id number of the pledge being queried"
              },
              "return": "the amount, owner, the number of delegates (but not the actual  delegates, the intendedProject (if any), the current commit time and  the previous pledge this pledge was derived from"
            },
            "numberOfPledges()": {
              "return": "The total number of Pledges in the system"
            },
            "transferToVault(address)": {
              "params": {
                "_token": "Token balance to be sent to recovery vault."
              }
            }
          }
        },
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526069805460ff19169055341561001957600080fd5b610b5d806100286000396000f3006060604052600436106100cc5763ffffffff60e060020a600035041663178e607981146100d15780631c8e8568146100f65780632a8ec8cc1461011d57806332f0a3b5146101305780633f657a461461015f57806360b1e057146101ef5780637e7db6e11461020257806380afdea8146102215780638322fff2146102345780638b3dd749146102475780639b3fdf4c1461025a5780639d4941d81461026d578063a1658fad1461028e578063d4aae0c4146102f1578063f92a79ff14610304578063fbfa77cf14610355575b600080fd5b34156100dc57600080fd5b6100e4610368565b60405190815260200160405180910390f35b341561010157600080fd5b61010961038c565b604051901515815260200160405180910390f35b341561012857600080fd5b6100e4610395565b341561013b57600080fd5b61014361039f565b604051600160a060020a03909116815260200160405180910390f35b341561016a57600080fd5b61017f67ffffffffffffffff6004351661041f565b60405188815267ffffffffffffffff8089166020830152878116604083015286811660608301528581166080830152841660a0820152600160a060020a03831660c082015260e081018260028111156101d457fe5b60ff1681526020019850505050505050505060405180910390f35b34156101fa57600080fd5b6100e46105d7565b341561020d57600080fd5b610109600160a060020a03600435166105fb565b341561022c57600080fd5b6100e4610601565b341561023f57600080fd5b610143610607565b341561025257600080fd5b6100e461060c565b341561026557600080fd5b6100e4610612565b341561027857600080fd5b61028c600160a060020a0360043516610636565b005b341561029957600080fd5b61010960048035600160a060020a03169060248035919060649060443590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506107ae95505050505050565b34156102fc57600080fd5b6101436108ec565b341561030f57600080fd5b61014360046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506108fb95505050505050565b341561036057600080fd5b6101436109d7565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b6065546000190190565b60008054600160a060020a031615156103b757600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561040057600080fd5b6102c65a03f1151561041157600080fd5b505050604051805191505090565b600080600080600080600080610433610ad3565b61043c8a6109eb565b610100604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156104d657602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116104915790505b505050918352505060028281015467ffffffffffffffff80821660208501526801000000000000000082048116604085015270010000000000000000000000000000000082048116606085015278010000000000000000000000000000000000000000000000009091041660808301526003830154600160a060020a03811660a084015260c09092019174010000000000000000000000000000000000000000900460ff169081111561058557fe5b600281111561059057fe5b90525090508051985080604001519750806020015151965080606001519550806080015194508060a0015193508060c0015192508060e00151915050919395975091939597565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b50600190565b60015481565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b600080610642836105fb565b151561064d57600080fd5b61065561039f565b915061066082610a33565b151561066b57600080fd5b600160a060020a03831615156106bd5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156106b857600080fd5b6107a9565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561071457600080fd5b6102c65a03f1151561072557600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561078d57600080fd5b6102c65a03f1151561079e57600080fd5b505050604051805150505b505050565b60006107b8610b1f565b600080845111156107d157835160200290508391508082525b600054600160a060020a031615806108e2575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b83811015610878578082015183820152602001610860565b50505050905090810190601f1680156108a55780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156108c657600080fd5b6102c65a03f115156108d757600080fd5b505050604051805190505b9695505050505050565b600054600160a060020a031681565b6000610905610a60565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561096c578082015183820152602001610954565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156109b757600080fd5b6102c65a03f115156109c857600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b60655460009067ffffffffffffffff831610610a0657600080fd5b6065805467ffffffffffffffff8416908110610a1e57fe5b90600052602060002090600402019050919050565b600080600160a060020a0383161515610a4f5760009150610a5a565b823b90506000811191505b50919050565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156109b757600080fd5b6101006040519081016040528060008152602001610aef610b1f565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b602060405190810160405260008152905600a165627a7a7230582064710c7ace62fc58d7e6597b1d7e9669ecf62678411ab7deb8d1fd1c1e26a3760029",
            "sourceMap": "920:5090:35:-;;;2538:37:33;;;-1:-1:-1;;2538:37:33;;;920:5090:35;;;;;;;;;;;;;;"
          },
          "deployedBytecode": {
            "linkReferences": {},
            "object": "6060604052600436106100cc5763ffffffff60e060020a600035041663178e607981146100d15780631c8e8568146100f65780632a8ec8cc1461011d57806332f0a3b5146101305780633f657a461461015f57806360b1e057146101ef5780637e7db6e11461020257806380afdea8146102215780638322fff2146102345780638b3dd749146102475780639b3fdf4c1461025a5780639d4941d81461026d578063a1658fad1461028e578063d4aae0c4146102f1578063f92a79ff14610304578063fbfa77cf14610355575b600080fd5b34156100dc57600080fd5b6100e4610368565b60405190815260200160405180910390f35b341561010157600080fd5b61010961038c565b604051901515815260200160405180910390f35b341561012857600080fd5b6100e4610395565b341561013b57600080fd5b61014361039f565b604051600160a060020a03909116815260200160405180910390f35b341561016a57600080fd5b61017f67ffffffffffffffff6004351661041f565b60405188815267ffffffffffffffff8089166020830152878116604083015286811660608301528581166080830152841660a0820152600160a060020a03831660c082015260e081018260028111156101d457fe5b60ff1681526020019850505050505050505060405180910390f35b34156101fa57600080fd5b6100e46105d7565b341561020d57600080fd5b610109600160a060020a03600435166105fb565b341561022c57600080fd5b6100e4610601565b341561023f57600080fd5b610143610607565b341561025257600080fd5b6100e461060c565b341561026557600080fd5b6100e4610612565b341561027857600080fd5b61028c600160a060020a0360043516610636565b005b341561029957600080fd5b61010960048035600160a060020a03169060248035919060649060443590810190830135806020808202016040519081016040528093929190818152602001838360200280828437509496506107ae95505050505050565b34156102fc57600080fd5b6101436108ec565b341561030f57600080fd5b61014360046024813581810190830135806020601f820181900481020160405190810160405281815292919060208401838380828437509496506108fb95505050505050565b341561036057600080fd5b6101436109d7565b7fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb81565b60695460ff1681565b6065546000190190565b60008054600160a060020a031615156103b757600080fd5b60008054600160a060020a0316906332f0a3b590604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561040057600080fd5b6102c65a03f1151561041157600080fd5b505050604051805191505090565b600080600080600080600080610433610ad3565b61043c8a6109eb565b610100604051908101604052908160008201548152602001600182018054806020026020016040519081016040528092919081815260200182805480156104d657602002820191906000526020600020906000905b82829054906101000a900467ffffffffffffffff1667ffffffffffffffff16815260200190600801906020826007010492830192600103820291508084116104915790505b505050918352505060028281015467ffffffffffffffff80821660208501526801000000000000000082048116604085015270010000000000000000000000000000000082048116606085015278010000000000000000000000000000000000000000000000009091041660808301526003830154600160a060020a03811660a084015260c09092019174010000000000000000000000000000000000000000900460ff169081111561058557fe5b600281111561059057fe5b90525090508051985080604001519750806020015151965080606001519550806080015194508060a0015193508060c0015192508060e00151915050919395975091939597565b7fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6181565b50600190565b60015481565b600081565b60035490565b7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d38287181565b600080610642836105fb565b151561064d57600080fd5b61065561039f565b915061066082610a33565b151561066b57600080fd5b600160a060020a03831615156106bd5781600160a060020a03166108fc30600160a060020a0316319081150290604051600060405180830381858888f1935050505015156106b857600080fd5b6107a9565b82600160a060020a03166370a082313060006040516020015260405160e060020a63ffffffff8416028152600160a060020a039091166004820152602401602060405180830381600087803b151561071457600080fd5b6102c65a03f1151561072557600080fd5b5050506040518051915050600160a060020a03831663a9059cbb838360006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b151561078d57600080fd5b6102c65a03f1151561079e57600080fd5b505050604051805150505b505050565b60006107b8610b1f565b600080845111156107d157835160200290508391508082525b600054600160a060020a031615806108e2575060008054600160a060020a03169063fdef91069088903090899087906040516020015260405160e060020a63ffffffff8716028152600160a060020a0380861660048301908152908516602483015260448201849052608060648301908152909160840183818151815260200191508051906020019080838360005b83811015610878578082015183820152602001610860565b50505050905090810190601f1680156108a55780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15156108c657600080fd5b6102c65a03f115156108d757600080fd5b505050604051805190505b9695505050505050565b600054600160a060020a031681565b6000610905610a60565b600160a060020a03166304bf2a7f836000604051602001526040518263ffffffff1660e060020a0281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561096c578082015183820152602001610954565b50505050905090810190601f1680156109995780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15156109b757600080fd5b6102c65a03f115156109c857600080fd5b50505060405180519392505050565b6069546101009004600160a060020a031681565b60655460009067ffffffffffffffff831610610a0657600080fd5b6065805467ffffffffffffffff8416908110610a1e57fe5b90600052602060002090600402019050919050565b600080600160a060020a0383161515610a4f5760009150610a5a565b823b90506000811191505b50919050565b600080548190600160a060020a03166342c71f1d7f34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871836040516020015260405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b15156109b757600080fd5b6101006040519081016040528060008152602001610aef610b1f565b815260006020820181905260408201819052606082018190526080820181905260a0820181905260c09091015290565b602060405190810160405260008152905600a165627a7a7230582064710c7ace62fc58d7e6597b1d7e9669ecf62678411ab7deb8d1fd1c1e26a3760029",
            "sourceMap": "920:5090:35:-;;;;;;;;;-1:-1:-1;;;920:5090:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;448:111:18;;;;;;;;;;;;;;;;;;;;;;;;;;;2538:37:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1446:98:35;;;;;;;;;;;;1226:226:8;;;;;;;;;;;;;;;-1:-1:-1;;;;;1226:226:8;;;;;;;;;;;;;;1905:613:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;1905:613:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;565:118:18;;;;;;;;;;;;1090:99:15;;;;;;;;;;-1:-1:-1;;;;;1090:99:15;;;;;113:20:7;;;;;;;;;;;;185:40:11;;;;;;;;;;;;358:107:13;;;;;;;;;;;;689:115:18;;;;;;;;;;;;497:393:15;;;;;;;;;;-1:-1:-1;;;;;497:393:15;;;;;;;726:494:8;;;;;;;;;;;;;-1:-1:-1;;;;;726:494:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;726:494:8;;-1:-1:-1;726:494:8;;-1:-1:-1;;;;;;726:494:8;86:21:7;;;;;;;;;;;;891:169:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;891:169:16;;-1:-1:-1;891:169:16;;-1:-1:-1;;;;;;891:169:16;2582:21:33;;;;;;;;;;;;448:111:18;493:66;448:111;:::o;2538:37:33:-;;;;;;:::o;1446:98:35:-;1519:7;:14;-1:-1:-1;;1519:18:35;1446:98;:::o;1226:226:8:-;1275:7;1390:6;;-1:-1:-1;;;;;1390:6:8;1382:20;;1374:29;;;;;;1420:6;;;-1:-1:-1;;;;;1420:6:8;;:23;;:25;;;;;;;;;;-1:-1:-1;;;1420:25:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;1226:226:8;:::o;1905:613:35:-;1972:11;1993:12;2015:17;2042:22;2074:17;2101:16;2127:13;2150:23;2190:15;;:::i;:::-;2208:21;2220:8;2208:11;:21::i;:::-;2190:39;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;2190:39:35;;;-1:-1:-1;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;2190:39:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;2190:39:35;-1:-1:-1;2190:39:35;2248:8;2239:17;;2274:1;:7;;;2266:15;;2311:1;:17;;;:24;2291:45;;2364:1;:17;;;2346:35;;2404:1;:12;;;2391:25;;2438:1;:11;;;2426:23;;2467:1;:7;;;2459:15;;2498:1;:13;;;2484:27;;1905:613;;;;;;;;;;:::o;565:118:18:-;617:66;565:118;:::o;1090:99:15:-;-1:-1:-1;1178:4:15;;1090:99::o;113:20:7:-;;;;:::o;185:40:11:-;223:1;185:40;:::o;358:107:13:-;439:19;;358:107;:::o;689:115:18:-;738:66;689:115;:::o;497:393:15:-;603:13;776:14;565:27;585:6;565:19;:27::i;:::-;557:36;;;;;;;;619:18;:16;:18::i;:::-;603:34;;655:17;666:5;655:10;:17::i;:::-;647:26;;;;;;;;-1:-1:-1;;;;;688:13:15;;;684:200;;;717:5;-1:-1:-1;;;;;717:14:15;:28;732:4;-1:-1:-1;;;;;732:12:15;;717:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;684:200;;;799:6;-1:-1:-1;;;;;793:23:15;;817:4;793:29;;;;;;;;-1:-1:-1;;;793:29:15;;;;;;-1:-1:-1;;;;;793:29:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;836:22:15;;;859:5;793:29;836:37;;;;;;;;-1:-1:-1;;;836:37:15;;;;;;-1:-1:-1;;;;;836:37:15;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;684:200:15;497:393;;;:::o;726:494:8:-;817:4;833:16;;:::i;:::-;942:18;925:1;909:6;:13;:17;905:212;;;963:6;:13;979:2;963:18;942:39;;1029:6;1022:13;;1082:10;1077:3;1070:6;1004:103;1141:6;;-1:-1:-1;;;;;1141:6:8;1133:20;;:80;;-1:-1:-1;1157:6:8;;;-1:-1:-1;;;;;1157:6:8;;:20;;1178:7;;1195:4;;1202:5;;1209:3;;1157:56;;;;;;;-1:-1:-1;;;1157:56:8;;;;;;-1:-1:-1;;;;;1157:56:8;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1133:80:8;1126:87;726:494;-1:-1:-1;;;;;;726:494:8:o;86:21:7:-;;;-1:-1:-1;;;;;86:21:7;;:::o;891:169:16:-;948:18;1004:21;:19;:21::i;:::-;-1:-1:-1;;;;;1004:39:16;;1044:7;1004:48;;;;;;;;;;;-1:-1:-1;;;1004:48:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;23:1:-1;8:100;33:3;30:1;27:2;8:100;;;99:1;94:3;90;84:5;71:3;;;64:6;52:2;45:3;8:100;;;12:14;3:109;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;891:169:16;-1:-1:-1;;;891:169:16:o;2582:21:33:-;;;;;;-1:-1:-1;;;;;2582:21:33;;:::o;4558:161:35:-;4663:7;:14;4618:6;;4652:25;;;;4644:34;;;;;;4695:7;:17;;;;;;;;;;;;;;;;;;;;;;4688:24;;4558:161;;;:::o;53:244:14:-;113:4;;-1:-1:-1;;;;;133:21:14;;;129:64;;;177:5;170:12;;;;129:64;256:7;244:11;236:28;;289:1;282:4;:8;275:15;;53:244;;;;;:::o;1088:200:16:-;1142:18;1195:6;;1142:18;;-1:-1:-1;;;;;1195:6:16;:13;738:66:18;1142:18:16;1195:37;;;;;;;-1:-1:-1;;;1195:37:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;920:5090:35;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;:::o"
          },
          "gasEstimates": {
            "creation": {
              "codeDepositCost": "581800",
              "executionCost": "20826",
              "totalCost": "602626"
            },
            "external": {
              "APP_ADDR_NAMESPACE()": "236",
              "ETH()": "490",
              "EVMSCRIPT_REGISTRY_APP()": "456",
              "EVMSCRIPT_REGISTRY_APP_ID()": "346",
              "allowRecoverability(address)": "457",
              "appId()": "590",
              "canPerform(address,bytes32,uint256[])": "infinite",
              "getExecutor(bytes)": "infinite",
              "getInitializationBlock()": "634",
              "getPledge(uint64)": "infinite",
              "getRecoveryVault()": "infinite",
              "kernel()": "875",
              "numberOfPledges()": "489",
              "transferToVault(address)": "infinite",
              "vault()": "930",
              "whitelistDisabled()": "470"
            },
            "internal": {
              "_findOrCreatePledge(uint64,uint64[] memory,uint64,uint64,uint64,address,enum LiquidPledgingStorage.PledgeState)": "infinite",
              "_findPledge(uint64)": "563",
              "_getDelegateIdx(struct LiquidPledgingStorage.Pledge memory,uint64)": "infinite",
              "_getPledgeLevel(struct LiquidPledgingStorage.Pledge memory)": "infinite"
            }
          },
          "methodIdentifiers": {
            "APP_ADDR_NAMESPACE()": "178e6079",
            "ETH()": "8322fff2",
            "EVMSCRIPT_REGISTRY_APP()": "9b3fdf4c",
            "EVMSCRIPT_REGISTRY_APP_ID()": "60b1e057",
            "allowRecoverability(address)": "7e7db6e1",
            "appId()": "80afdea8",
            "canPerform(address,bytes32,uint256[])": "a1658fad",
            "getExecutor(bytes)": "f92a79ff",
            "getInitializationBlock()": "8b3dd749",
            "getPledge(uint64)": "3f657a46",
            "getRecoveryVault()": "32f0a3b5",
            "kernel()": "d4aae0c4",
            "numberOfPledges()": "2a8ec8cc",
            "transferToVault(address)": "9d4941d8",
            "vault()": "fbfa77cf",
            "whitelistDisabled()": "1c8e8568"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.18+commit.9cf6e910\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"APP_ADDR_NAMESPACE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"whitelistDisabled\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"numberOfPledges\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"idPledge\",\"type\":\"uint64\"}],\"name\":\"getPledge\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"owner\",\"type\":\"uint64\"},{\"name\":\"nDelegates\",\"type\":\"uint64\"},{\"name\":\"intendedProject\",\"type\":\"uint64\"},{\"name\":\"commitTime\",\"type\":\"uint64\"},{\"name\":\"oldPledge\",\"type\":\"uint64\"},{\"name\":\"token\",\"type\":\"address\"},{\"name\":\"pledgeState\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP_ID\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ETH\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EVMSCRIPT_REGISTRY_APP\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getPledge(uint64)\":{\"params\":{\"idPledge\":\"the id number of the pledge being queried\"},\"return\":\"the amount, owner, the number of delegates (but not the actual  delegates, the intendedProject (if any), the current commit time and  the previous pledge this pledge was derived from\"},\"numberOfPledges()\":{\"return\":\"The total number of Pledges in the system\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"getPledge(uint64)\":{\"notice\":\"A getter that returns the details of the specified pledge\"},\"numberOfPledges()\":{\"notice\":\"/////////////////////////A constant getter that returns the total number of pledges\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"giveth-liquidpledging/contracts/Pledges.sol\":\"Pledges\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[] r) {}\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0xb60f567383dd66e25eaf0925320fdff8d5c57d4f1f74a7a53a9573b61876340e\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) public;\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0xa120fc32d8d2c5096d605b0fe012d5b1e4a62118952a25a18bac5210f4fceede\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    IKernel public kernel;\\n    bytes32 public appId;\\n    address internal pinnedCode; // used by Proxy Pinned\\n    uint256 internal initializationBlock; // used by Initializable\\n    uint256[95] private storageOffset; // forces App storage to start at after 100 slots\\n    uint256 private offset;\\n}\\n\",\"keccak256\":\"0x8b9205a3fdf9d94fb1461d2c2d32335803122aa75d3fa8cf0b982796fd040c25\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\n\\n\\n// ACLSyntaxSugar and EVMScriptRunner are not directly used by this contract, but are included so\\n// that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Initializable, ACLSyntaxSugar, VaultRecoverable, EVMScriptRunner {\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)));\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] params) {\\n        require(canPerform(msg.sender, _role, params));\\n        _;\\n    }\\n\\n    function canPerform(address _sender, bytes32 _role, uint256[] params) public view returns (bool) {\\n        bytes memory how; // no need to init memory as it is never used\\n        if (params.length > 0) {\\n            uint256 byteLength = params.length * 32;\\n            assembly {\\n                how := params // forced casting\\n                mstore(how, byteLength)\\n            }\\n        }\\n        return address(kernel) == 0 || kernel.hasPermission(_sender, address(this), _role, how);\\n    }\\n\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        require(address(kernel) != 0);\\n        return kernel.getRecoveryVault();\\n    }\\n}\\n\",\"keccak256\":\"0x04bd38b82d31aff08b67def2e1637482fdb91f1f44f4ec497f4e7416c5f83dfb\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address constant public ETH = address(0);\\n}\\n\",\"keccak256\":\"0x160b651ec349ce381646d8ba24b873a61ab4bf0d60315b9644a175283a574b94\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IVaultRecoverable {\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) public view returns (bool);\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xf6ed3f4043aee4526c9563c83f74d701141dd81a988f1be463ba6a18e09ba2c3\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract Initializable is AppStorage {\\n    modifier onlyInit {\\n        require(initializationBlock == 0);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(initializationBlock > 0);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        initializationBlock = getBlockNumber();\\n    }\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n}\\n\",\"keccak256\":\"0x1265fd5de8acf30e4b444f52cfdf91dcebb222fe05bdfc081f2fc0ea953ab5e4\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract IsContract {\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xee6df8a68ea442a2c0414ee70d95eb3e197425ce372a28bfda01888b0d9446f1\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"../lib/zeppelin/token/ERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token));\\n        address vault = getRecoveryVault();\\n        require(isContract(vault));\\n\\n        if (_token == ETH) {\\n            vault.transfer(this.balance);\\n        } else {\\n            uint256 amount = ERC20(_token).balanceOf(this);\\n            ERC20(_token).transfer(vault, amount);\\n        }\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x1b71cbea32aee6e65912e3447eb8001bdad127d421e0c4464bb8294f945d9cf1\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, EVMScriptRegistryConstants {\\n    using ScriptHelpers for bytes;\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist) protectState internal returns (bytes output) {\\n        // TODO: Too much data flying around, maybe extracting spec id here is cheaper\\n        address executorAddr = getExecutor(_script);\\n        require(executorAddr != address(0));\\n\\n        bytes memory calldataArgs = _script.encode(_input, _blacklist);\\n        bytes4 sig = IEVMScriptExecutor(0).execScript.selector;\\n\\n        require(executorAddr.delegatecall(sig, calldataArgs));\\n\\n        bytes memory ret = returnedDataDecoded();\\n\\n        require(ret.length > 0);\\n\\n        return ret;\\n    }\\n\\n    function getExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getExecutorRegistry().getScriptExecutor(_script));\\n    }\\n\\n    // TODO: Internal\\n    function getExecutorRegistry() internal view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel.getApp(EVMSCRIPT_REGISTRY_APP);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    /**\\n    * @dev copies and returns last's call data. Needs to ABI decode first\\n    */\\n    function returnedDataDecoded() internal pure returns (bytes ret) {\\n        assembly {\\n            let size := returndatasize\\n            switch size\\n            case 0 {}\\n            default {\\n                ret := mload(0x40) // free mem ptr get\\n                mstore(0x40, add(ret, add(size, 0x20))) // free mem ptr set\\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = kernel;\\n        bytes32 preAppId = appId;\\n        _; // exec\\n        require(kernel == preKernel);\\n        require(appId == preAppId);\\n    }\\n}\\n\",\"keccak256\":\"0x85d0a5051c5e867b0b15b756789911871ae746f36462cb774557682f90e7fa78\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n}\\n\",\"keccak256\":\"0x6a4beed810085f11cda9d50c3547ac4cc2100d9dc18ab4982ff11dd483410012\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    // repeated definitions from KernelStorage, to avoid out of gas issues\\n    bytes32 constant public APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = keccak256(APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n    */\\n    bytes32 constant public APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n    bytes32 constant public EVMSCRIPT_REGISTRY_APP = 0x34f01c17e9be6ddbf2c61f37b5b1fb9f1a090a975006581ad19bda1c4d382871;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(address executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    function getScriptExecutor(bytes script) public view returns (address);\\n}\\n\",\"keccak256\":\"0x460ff768028031e444267cad9d848b6e98182c3721d16013afd5949444701e84\"},\"@aragon/os/contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n\\nlibrary ScriptHelpers {\\n    // To test with JS and compare with actual encoder. Maintaining for reference.\\n    // t = function() { return IEVMScriptExecutor.at('0x4bcdd59d6c77774ee7317fc1095f69ec84421e49').contract.execScript.getData(...[].slice.call(arguments)).slice(10).match(/.{1,64}/g) }\\n    // run = function() { return ScriptHelpers.new().then(sh => { sh.abiEncode.call(...[].slice.call(arguments)).then(a => console.log(a.slice(2).match(/.{1,64}/g)) ) }) }\\n    // This is truly not beautiful but lets no daydream to the day solidity gets reflection features\\n\\n    function abiEncode(bytes _a, bytes _b, address[] _c) public pure returns (bytes d) {\\n        return encode(_a, _b, _c);\\n    }\\n\\n    function encode(bytes memory _a, bytes memory _b, address[] memory _c) internal pure returns (bytes memory d) {\\n        // A is positioned after the 3 position words\\n        uint256 aPosition = 0x60;\\n        uint256 bPosition = aPosition + 32 * abiLength(_a);\\n        uint256 cPosition = bPosition + 32 * abiLength(_b);\\n        uint256 length = cPosition + 32 * abiLength(_c);\\n\\n        d = new bytes(length);\\n        assembly {\\n            // Store positions\\n            mstore(add(d, 0x20), aPosition)\\n            mstore(add(d, 0x40), bPosition)\\n            mstore(add(d, 0x60), cPosition)\\n        }\\n\\n        // Copy memory to correct position\\n        copy(d, getPtr(_a), aPosition, _a.length);\\n        copy(d, getPtr(_b), bPosition, _b.length);\\n        copy(d, getPtr(_c), cPosition, _c.length * 32); // 1 word per address\\n    }\\n\\n    function abiLength(bytes memory _a) internal pure returns (uint256) {\\n        // 1 for length +\\n        // memory words + 1 if not divisible for 32 to offset word\\n        return 1 + (_a.length / 32) + (_a.length % 32 > 0 ? 1 : 0);\\n    }\\n\\n    function abiLength(address[] _a) internal pure returns (uint256) {\\n        // 1 for length + 1 per item\\n        return 1 + _a.length;\\n    }\\n\\n    function copy(bytes _d, uint256 _src, uint256 _pos, uint256 _length) internal pure {\\n        uint dest;\\n        assembly {\\n            dest := add(add(_d, 0x20), _pos)\\n        }\\n        memcpy(dest, _src, _length + 32);\\n    }\\n\\n    function getPtr(bytes memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getPtr(address[] memory _x) internal pure returns (uint256 ptr) {\\n        assembly {\\n            ptr := _x\\n        }\\n    }\\n\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n\\n    function memcpy(uint _dest, uint _src, uint _len) internal pure {\\n        uint256 src = _src;\\n        uint256 dest = _dest;\\n        uint256 len = _len;\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        uint mask = 256 ** (32 - len) - 1;\\n        assembly {\\n            let srcpart := and(mload(src), not(mask))\\n            let destpart := and(mload(dest), mask)\\n            mstore(dest, or(destpart, srcpart))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5bf6b2ceab21c1f8b31b6e797ae12974a655e46e142aeb12b3560ed912a4dd01\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IVaultRecoverable {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed name, bytes32 indexed id, address app);\\n\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 name, address app) public returns (bytes32 id);\\n    function getApp(bytes32 id) public view returns (address);\\n}\\n\",\"keccak256\":\"0x1f0c5def4ecec01abcbb07eea3312e0a4683d81a81c2475d66f06c5c3b8585cd\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\nimport './ERC20Basic.sol';\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 is ERC20Basic {\\n  function allowance(address owner, address spender) public constant returns (uint256);\\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\\n  function approve(address spender, uint256 value) public returns (bool);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x48674c3983e4e9ba8f771d28e349833164934960a952966c17ae05f05fa84379\"},\"@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol\":{\"content\":\"pragma solidity ^0.4.11;\\n\\n\\n/**\\n * @title ERC20Basic\\n * @dev Simpler version of ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/179\\n */\\ncontract ERC20Basic {\\n  function totalSupply() public view returns (uint256);\\n  function balanceOf(address who) public constant returns (uint256);\\n  function transfer(address to, uint256 value) public returns (bool);\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n}\\n\",\"keccak256\":\"0x3ad7429b6f0a6330e8e89646aef39de99fa1fd8221e6a9dd55e3a9104908d585\"},\"giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol\":{\"content\":\"pragma solidity ^0.4.0;\\n\\n/*\\n    Copyright 2018, Jordi Baylina\\n    Contributors: Adrià Massanet <adria@codecontext.io>, RJ Ewing, Griff\\n    Green, Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\n\\n/// @dev `ILiquidPledgingPlugin` is the basic interface for any\\n///  liquid pledging plugin\\ncontract ILiquidPledgingPlugin {\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated before a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    /// @param amount The amount of value that will be transfered.\\n    function beforeTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount ) public returns (uint maxAllowed);\\n\\n    /// @notice Plugins are used (much like web hooks) to initiate an action\\n    ///  upon any donation, delegation, or transfer; this is an optional feature\\n    ///  and allows for extreme customization of the contract. This function\\n    ///  implements any action that should be initiated after a transfer.\\n    /// @param pledgeManager The admin or current manager of the pledge\\n    /// @param pledgeFrom This is the Id from which value will be transfered.\\n    /// @param pledgeTo This is the Id that value will be transfered to.    \\n    /// @param context The situation that is triggering the plugin:\\n    ///  0 -> Plugin for the owner transferring pledge to another party\\n    ///  1 -> Plugin for the first delegate transferring pledge to another party\\n    ///  2 -> Plugin for the second delegate transferring pledge to another party\\n    ///  ...\\n    ///  255 -> Plugin for the intendedProject transferring pledge to another party\\n    ///\\n    ///  256 -> Plugin for the owner receiving pledge to another party\\n    ///  257 -> Plugin for the first delegate receiving pledge to another party\\n    ///  258 -> Plugin for the second delegate receiving pledge to another party\\n    ///  ...\\n    ///  511 -> Plugin for the intendedProject receiving pledge to another party\\n    ///  @param amount The amount of value that will be transfered.\\n    function afterTransfer(\\n        uint64 pledgeManager,\\n        uint64 pledgeFrom,\\n        uint64 pledgeTo,\\n        uint64 context,\\n        address token,\\n        uint amount\\n    ) public;\\n}\\n\",\"keccak256\":\"0x539d0f5e161acbabc3284727028de768be1405f22acbf515038266a3981c8e92\"},\"giveth-liquidpledging/contracts/LiquidPledgingStorage.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\nimport \\\"./ILiquidPledgingPlugin.sol\\\";\\n\\n/// @dev This is an interface for `LPVault` which serves as a secure storage for\\n///  the ETH that backs the Pledges, only after `LiquidPledging` authorizes\\n///  payments can Pledges be converted for ETH\\ninterface ILPVault {\\n    function authorizePayment(bytes32 _ref, address _dest, address _token, uint _amount) public;\\n    function () public payable;\\n}\\n\\n/// This contract contains all state variables used in LiquidPledging contracts\\n/// This is done to have everything in 1 location, b/c state variable layout\\n/// is MUST have be the same when performing an upgrade.\\ncontract LiquidPledgingStorage {\\n    enum PledgeAdminType { Giver, Delegate, Project }\\n    enum PledgeState { Pledged, Paying, Paid }\\n\\n    /// @dev This struct defines the details of a `PledgeAdmin` which are \\n    ///  commonly referenced by their index in the `admins` array\\n    ///  and can own pledges and act as delegates\\n    struct PledgeAdmin { \\n        PledgeAdminType adminType; // Giver, Delegate or Project\\n        address addr; // Account or contract address for admin\\n        uint64 commitTime;  // In seconds, used for time Givers' & Delegates' have to veto\\n        uint64 parentProject;  // Only for projects\\n        bool canceled;      //Always false except for canceled projects\\n\\n        /// @dev if the plugin is 0x0 then nothing happens, if its an address\\n        // than that smart contract is called when appropriate\\n        ILiquidPledgingPlugin plugin; \\n        string name;\\n        string url;  // Can be IPFS hash\\n    }\\n\\n    struct Pledge {\\n        uint amount;\\n        uint64[] delegationChain; // List of delegates in order of authority\\n        uint64 owner; // PledgeAdmin\\n        uint64 intendedProject; // Used when delegates are sending to projects\\n        uint64 commitTime;  // When the intendedProject will become the owner\\n        uint64 oldPledge; // Points to the id that this Pledge was derived from\\n        address token;\\n        PledgeState pledgeState; //  Pledged, Paying, Paid\\n    }\\n\\n    PledgeAdmin[] admins; //The list of pledgeAdmins 0 means there is no admin\\n    Pledge[] pledges;\\n    /// @dev this mapping allows you to search for a specific pledge's \\n    ///  index number by the hash of that pledge\\n    mapping (bytes32 => uint64) hPledge2idx;\\n\\n    // this whitelist is for non-proxied plugins\\n    mapping (bytes32 => bool) pluginContractWhitelist;\\n    // this whitelist is for proxied plugins\\n    mapping (address => bool) pluginInstanceWhitelist;\\n    bool public whitelistDisabled = false;\\n\\n    ILPVault public vault;\\n\\n    // reserve 50 slots for future upgrades.\\n    uint[50] private storageOffset;\\n}\",\"keccak256\":\"0xd1f287f7471c80d4167f47a462930d83208c366f3858eb8b2e6dc923382a5f08\"},\"giveth-liquidpledging/contracts/Pledges.sol\":{\"content\":\"pragma solidity ^0.4.18;\\n\\n/*\\n    Copyright 2017, Jordi Baylina, RJ Ewing\\n    Contributors: Adrià Massanet <adria@codecontext.io>, Griff Green,\\n                  Arthur Lunn\\n\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n*/\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"./LiquidPledgingStorage.sol\\\";\\n\\ncontract Pledges is AragonApp, LiquidPledgingStorage {\\n\\n    // Limits inserted to prevent large loops that could prevent canceling\\n    uint constant MAX_DELEGATES = 10;\\n\\n    // a constant for when a delegate is requested that is not in the system\\n    uint64 constant  NOTFOUND = 0xFFFFFFFFFFFFFFFF;\\n\\n/////////////////////////////\\n// Public constant functions\\n////////////////////////////\\n\\n    /// @notice A constant getter that returns the total number of pledges\\n    /// @return The total number of Pledges in the system\\n    function numberOfPledges() external view returns (uint) {\\n        return pledges.length - 1;\\n    }\\n\\n    /// @notice A getter that returns the details of the specified pledge\\n    /// @param idPledge the id number of the pledge being queried\\n    /// @return the amount, owner, the number of delegates (but not the actual\\n    ///  delegates, the intendedProject (if any), the current commit time and\\n    ///  the previous pledge this pledge was derived from\\n    function getPledge(uint64 idPledge) external view returns(\\n        uint amount,\\n        uint64 owner,\\n        uint64 nDelegates,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState pledgeState\\n    ) {\\n        Pledge memory p = _findPledge(idPledge);\\n        amount = p.amount;\\n        owner = p.owner;\\n        nDelegates = uint64(p.delegationChain.length);\\n        intendedProject = p.intendedProject;\\n        commitTime = p.commitTime;\\n        oldPledge = p.oldPledge;\\n        token = p.token;\\n        pledgeState = p.pledgeState;\\n    }\\n\\n\\n////////////////////\\n// Internal methods\\n////////////////////\\n\\n    /// @notice This creates a Pledge with an initial amount of 0 if one is not\\n    ///  created already; otherwise it finds the pledge with the specified\\n    ///  attributes; all pledges technically exist, if the pledge hasn't been\\n    ///  created in this system yet it simply isn't in the hash array\\n    ///  hPledge2idx[] yet\\n    /// @param owner The owner of the pledge being looked up\\n    /// @param delegationChain The list of delegates in order of authority\\n    /// @param intendedProject The project this pledge will Fund after the\\n    ///  commitTime has passed\\n    /// @param commitTime The length of time in seconds the Giver has to\\n    ///   veto when the Giver's delegates Pledge funds to a project\\n    /// @param oldPledge This value is used to store the pledge the current\\n    ///  pledge was came from, and in the case a Project is canceled, the Pledge\\n    ///  will revert back to it's previous state\\n    /// @param state The pledge state: Pledged, Paying, or state\\n    /// @return The hPledge2idx index number\\n    function _findOrCreatePledge(\\n        uint64 owner,\\n        uint64[] delegationChain,\\n        uint64 intendedProject,\\n        uint64 commitTime,\\n        uint64 oldPledge,\\n        address token,\\n        PledgeState state\\n    ) internal returns (uint64)\\n    {\\n        bytes32 hPledge = keccak256(delegationChain, owner, intendedProject, commitTime, oldPledge, token, state);\\n        uint64 id = hPledge2idx[hPledge];\\n        if (id > 0) {\\n            return id;\\n        }\\n\\n        id = uint64(pledges.length);\\n        hPledge2idx[hPledge] = id;\\n        pledges.push(\\n            Pledge(\\n                0,\\n                delegationChain,\\n                owner,\\n                intendedProject,\\n                commitTime,\\n                oldPledge,\\n                token,\\n                state\\n            )\\n        );\\n        return id;\\n    }\\n\\n    /// @param idPledge the id of the pledge to load from storage\\n    /// @return The Pledge\\n    function _findPledge(uint64 idPledge) internal view returns(Pledge storage) {\\n        require(idPledge < pledges.length);\\n        return pledges[idPledge];\\n    }\\n\\n    /// @notice A getter that searches the delegationChain for the level of\\n    ///  authority a specific delegate has within a Pledge\\n    /// @param p The Pledge that will be searched\\n    /// @param idDelegate The specified delegate that's searched for\\n    /// @return If the delegate chain contains the delegate with the\\n    ///  `admins` array index `idDelegate` this returns that delegates\\n    ///  corresponding index in the delegationChain. Otherwise it returns\\n    ///  the NOTFOUND constant\\n    function _getDelegateIdx(Pledge p, uint64 idDelegate) internal pure returns(uint64) {\\n        for (uint i = 0; i < p.delegationChain.length; i++) {\\n            if (p.delegationChain[i] == idDelegate) {\\n                return uint64(i);\\n            }\\n        }\\n        return NOTFOUND;\\n    }\\n\\n    /// @notice A getter to find how many old \\\"parent\\\" pledges a specific Pledge\\n    ///  had using a self-referential loop\\n    /// @param p The Pledge being queried\\n    /// @return The number of old \\\"parent\\\" pledges a specific Pledge had\\n    function _getPledgeLevel(Pledge p) internal view returns(uint) {\\n        if (p.oldPledge == 0) {\\n            return 0;\\n        }\\n        Pledge storage oldP = _findPledge(p.oldPledge);\\n        return _getPledgeLevel(oldP) + 1; // a loop lookup\\n    }\\n}\\n\",\"keccak256\":\"0x9c7a60dff92f94d518d0c4a40d5434cd23680f79fd364ae855575ae4ca683797\"}},\"version\":1}",
        "userdoc": {
          "methods": {
            "getPledge(uint64)": {
              "notice": "A getter that returns the details of the specified pledge"
            },
            "numberOfPledges()": {
              "notice": "/////////////////////////A constant getter that returns the total number of pledges"
            },
            "transferToVault(address)": {
              "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
            }
          }
        }
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "formattedMessage": "@aragon/os/contracts/evmscript/EVMScriptRunner.sol:45:25: Warning: The \"returndatasize\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.\n            let size := returndatasize\n                        ^------------^\n",
      "message": "The \"returndatasize\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "@aragon/os/contracts/evmscript/EVMScriptRunner.sol:51:17: Warning: The \"returndatacopy\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.\n                returndatacopy(ret, 0x20, sub(size, 0x20)) // copy return data\n                ^------------^\n",
      "message": "The \"returndatacopy\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "@aragon/os/contracts/common/DelegateProxy.sol:33:21: Warning: The \"returndatasize\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.\n            size := returndatasize\n                    ^------------^\n",
      "message": "The \"returndatasize\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "@aragon/os/contracts/common/DelegateProxy.sol:40:13: Warning: The \"returndatacopy\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.\n            returndatacopy(ptr, 0, size)\n            ^------------^\n",
      "message": "The \"returndatacopy\" instruction is only available after the Metropolis hard fork. Before that it acts as an invalid instruction.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "@aragon/os/contracts/common/VaultRecoverable.sol:33:34: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function allowRecoverability(address token) public view returns (bool) {\n                                 ^-----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "@aragon/os/contracts/acl/ACLSyntaxSugar.sol:5:43: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n    function arr() internal pure returns (uint256[] r) {}\n                                          ^---------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/LPPCappedMilestone.sol:258:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n        uint64 pledgeManager,\n        ^------------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/LPPCappedMilestone.sol:302:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n        uint64 pledgeManager,\n        ^------------------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/LPPCappedMilestone.sol:306:9: Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n        address token,\n        ^-----------^\n",
      "message": "Unused function parameter. Remove or comment out the variable name to silence this warning.",
      "severity": "warning",
      "type": "Warning"
    },
    {
      "component": "general",
      "formattedMessage": "./contracts/LPPCappedMilestone.sol:257:5: Warning: Function state mutability can be restricted to view\n    function beforeTransfer(\n    ^\nSpanning multiple lines.\n",
      "message": "Function state mutability can be restricted to view",
      "severity": "warning",
      "type": "Warning"
    }
  ],
  "sources": {
    "./contracts/LPPCappedMilestone.sol": {
      "id": 0
    },
    "./contracts/LPPCappedMilestoneFactory.sol": {
      "id": 1
    },
    "@aragon/os/contracts/acl/ACLSyntaxSugar.sol": {
      "id": 2
    },
    "@aragon/os/contracts/acl/IACL.sol": {
      "id": 3
    },
    "@aragon/os/contracts/apps/AppProxyBase.sol": {
      "id": 4
    },
    "@aragon/os/contracts/apps/AppProxyPinned.sol": {
      "id": 5
    },
    "@aragon/os/contracts/apps/AppProxyUpgradeable.sol": {
      "id": 6
    },
    "@aragon/os/contracts/apps/AppStorage.sol": {
      "id": 7
    },
    "@aragon/os/contracts/apps/AragonApp.sol": {
      "id": 8
    },
    "@aragon/os/contracts/common/DelegateProxy.sol": {
      "id": 9
    },
    "@aragon/os/contracts/common/DepositableDelegateProxy.sol": {
      "id": 10
    },
    "@aragon/os/contracts/common/EtherTokenConstant.sol": {
      "id": 11
    },
    "@aragon/os/contracts/common/IVaultRecoverable.sol": {
      "id": 12
    },
    "@aragon/os/contracts/common/Initializable.sol": {
      "id": 13
    },
    "@aragon/os/contracts/common/IsContract.sol": {
      "id": 14
    },
    "@aragon/os/contracts/common/VaultRecoverable.sol": {
      "id": 15
    },
    "@aragon/os/contracts/evmscript/EVMScriptRunner.sol": {
      "id": 16
    },
    "@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol": {
      "id": 17
    },
    "@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol": {
      "id": 18
    },
    "@aragon/os/contracts/evmscript/ScriptHelpers.sol": {
      "id": 19
    },
    "@aragon/os/contracts/factory/AppProxyFactory.sol": {
      "id": 20
    },
    "@aragon/os/contracts/kernel/IKernel.sol": {
      "id": 21
    },
    "@aragon/os/contracts/kernel/Kernel.sol": {
      "id": 22
    },
    "@aragon/os/contracts/kernel/KernelStorage.sol": {
      "id": 23
    },
    "@aragon/os/contracts/lib/misc/ERCProxy.sol": {
      "id": 24
    },
    "@aragon/os/contracts/lib/zeppelin/token/ERC20.sol": {
      "id": 25
    },
    "@aragon/os/contracts/lib/zeppelin/token/ERC20Basic.sol": {
      "id": 26
    },
    "giveth-liquidpledging/contracts/ILiquidPledgingPlugin.sol": {
      "id": 27
    },
    "giveth-liquidpledging/contracts/LPConstants.sol": {
      "id": 28
    },
    "giveth-liquidpledging/contracts/LiquidPledging.sol": {
      "id": 29
    },
    "giveth-liquidpledging/contracts/LiquidPledgingACLHelpers.sol": {
      "id": 30
    },
    "giveth-liquidpledging/contracts/LiquidPledgingBase.sol": {
      "id": 31
    },
    "giveth-liquidpledging/contracts/LiquidPledgingPlugins.sol": {
      "id": 32
    },
    "giveth-liquidpledging/contracts/LiquidPledgingStorage.sol": {
      "id": 33
    },
    "giveth-liquidpledging/contracts/PledgeAdmins.sol": {
      "id": 34
    },
    "giveth-liquidpledging/contracts/Pledges.sol": {
      "id": 35
    }
  }
}